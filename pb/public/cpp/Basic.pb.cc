// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Basic.proto

#include "Basic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Common {
namespace Basic {
constexpr Security::Security(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , market_(0){}
struct SecurityDefaultTypeInternal {
  constexpr SecurityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecurityDefaultTypeInternal() {}
  union {
    Security _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecurityDefaultTypeInternal _Security_default_instance_;
constexpr PreAfterMarketData::PreAfterMarketData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(0)
  , high_price_(0)
  , low_price_(0)
  , volume_(PROTOBUF_LONGLONG(0))
  , turnover_(0)
  , change_value_(0)
  , change_rate_(0)
  , amplitude_(0){}
struct PreAfterMarketDataDefaultTypeInternal {
  constexpr PreAfterMarketDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreAfterMarketDataDefaultTypeInternal() {}
  union {
    PreAfterMarketData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreAfterMarketDataDefaultTypeInternal _PreAfterMarketData_default_instance_;
constexpr FutureBasicQotExData::FutureBasicQotExData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_settle_price_(0)
  , position_(0)
  , pre_open_interest_(0)
  , upper_limit_price_(0)
  , lower_limit_price_(0)
  , close_price_(0)
  , pre_delta_(0)
  , curr_delta_(0){}
struct FutureBasicQotExDataDefaultTypeInternal {
  constexpr FutureBasicQotExDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FutureBasicQotExDataDefaultTypeInternal() {}
  union {
    FutureBasicQotExData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FutureBasicQotExDataDefaultTypeInternal _FutureBasicQotExData_default_instance_;
constexpr BasicQot::BasicQot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : security_(nullptr)
  , pre_market_(nullptr)
  , after_market_(nullptr)
  , future_data_(nullptr)
  , update_time_(PROTOBUF_ULONGLONG(0))
  , high_price_(0)
  , open_price_(0)
  , low_price_(0)
  , cur_price_(0)
  , last_close_price_(0)
  , volume_(PROTOBUF_LONGLONG(0))
  , turnover_(0)
  , turnover_rate_(0)
  , security_status_(0){}
struct BasicQotDefaultTypeInternal {
  constexpr BasicQotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasicQotDefaultTypeInternal() {}
  union {
    BasicQot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasicQotDefaultTypeInternal _BasicQot_default_instance_;
constexpr HKSecurityStaticBasic::HKSecurityStaticBasic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vcm_flag_(false)
  , shortsell_flag_(false)
  , cas_flag_(false)
  , ccass_flag_(false)
  , stamp_duty_flag_(false)
  , pos_flag_(false)
  , pos_upper_limit_(0u)
  , pos_lower_limit_(0u){}
struct HKSecurityStaticBasicDefaultTypeInternal {
  constexpr HKSecurityStaticBasicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HKSecurityStaticBasicDefaultTypeInternal() {}
  union {
    HKSecurityStaticBasic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HKSecurityStaticBasicDefaultTypeInternal _HKSecurityStaticBasic_default_instance_;
constexpr SecurityStaticBasic::SecurityStaticBasic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , list_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , security_(nullptr)
  , id_(PROTOBUF_LONGLONG(0))
  , lot_size_(0)
  , security_type_(0)
  , list_timestamp_(0)
  , delisting_(false){}
struct SecurityStaticBasicDefaultTypeInternal {
  constexpr SecurityStaticBasicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecurityStaticBasicDefaultTypeInternal() {}
  union {
    SecurityStaticBasic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecurityStaticBasicDefaultTypeInternal _SecurityStaticBasic_default_instance_;
constexpr FutureStaticExData::FutureStaticExData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_trade_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_trade_timestamp_(0)
  , is_main_contract_(false){}
struct FutureStaticExDataDefaultTypeInternal {
  constexpr FutureStaticExDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FutureStaticExDataDefaultTypeInternal() {}
  union {
    FutureStaticExData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FutureStaticExDataDefaultTypeInternal _FutureStaticExData_default_instance_;
constexpr SecurityStaticInfo::SecurityStaticInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : basic_(nullptr)
  , future_exdata_(nullptr)
  , hk_basic_(nullptr){}
struct SecurityStaticInfoDefaultTypeInternal {
  constexpr SecurityStaticInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecurityStaticInfoDefaultTypeInternal() {}
  union {
    SecurityStaticInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecurityStaticInfoDefaultTypeInternal _SecurityStaticInfo_default_instance_;
constexpr VCMTrigger::VCMTrigger(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : security_(nullptr)
  , coolingoff_starttime_(PROTOBUF_ULONGLONG(0))
  , coolingoff_endtime_(PROTOBUF_ULONGLONG(0))
  , vcm_price_(0u)
  , vcm_lower_price_(0u)
  , vcm_upper_price_(0u){}
struct VCMTriggerDefaultTypeInternal {
  constexpr VCMTriggerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VCMTriggerDefaultTypeInternal() {}
  union {
    VCMTrigger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VCMTriggerDefaultTypeInternal _VCMTrigger_default_instance_;
constexpr RefPrice::RefPrice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : security_(nullptr)
  , ref_price_(0u)
  , lower_price_(0u)
  , upper_price_(0u){}
struct RefPriceDefaultTypeInternal {
  constexpr RefPriceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RefPriceDefaultTypeInternal() {}
  union {
    RefPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RefPriceDefaultTypeInternal _RefPrice_default_instance_;
constexpr TradingSessionStatus::TradingSessionStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : market_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , marketcode_(0u)
  , trading_session_subid_(0u)
  , start_datetime_(PROTOBUF_ULONGLONG(0))
  , end_datetime_(PROTOBUF_ULONGLONG(0))
  , trading_session_status_(0u){}
struct TradingSessionStatusDefaultTypeInternal {
  constexpr TradingSessionStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TradingSessionStatusDefaultTypeInternal() {}
  union {
    TradingSessionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TradingSessionStatusDefaultTypeInternal _TradingSessionStatus_default_instance_;
constexpr Ticker::Ticker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_(PROTOBUF_LONGLONG(0))
  , price_(0)
  , volume_(PROTOBUF_LONGLONG(0))
  , dir_(0)
  , type_(0)
  , turnover_(0)
  , recvtime_(0)
  , timestamp_(0)
  , type_sign_(0){}
struct TickerDefaultTypeInternal {
  constexpr TickerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TickerDefaultTypeInternal() {}
  union {
    Ticker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TickerDefaultTypeInternal _Ticker_default_instance_;
constexpr Broker::Broker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(PROTOBUF_LONGLONG(0))
  , pos_(0){}
struct BrokerDefaultTypeInternal {
  constexpr BrokerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerDefaultTypeInternal() {}
  union {
    Broker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerDefaultTypeInternal _Broker_default_instance_;
constexpr Brokerlist::Brokerlist(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broker_ask_list_()
  , broker_bid_list_()
  , security_(nullptr){}
struct BrokerlistDefaultTypeInternal {
  constexpr BrokerlistDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerlistDefaultTypeInternal() {}
  union {
    Brokerlist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerlistDefaultTypeInternal _Brokerlist_default_instance_;
constexpr OrderBookDetail::OrderBookDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ask_price_(0)
  , ask_volume_(PROTOBUF_LONGLONG(0))
  , bid_price_(0)
  , ask_order_count_(0)
  , bid_order_count_(0)
  , bid_volume_(PROTOBUF_LONGLONG(0)){}
struct OrderBookDetailDefaultTypeInternal {
  constexpr OrderBookDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderBookDetailDefaultTypeInternal() {}
  union {
    OrderBookDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderBookDetailDefaultTypeInternal _OrderBookDetail_default_instance_;
constexpr OrderBook::OrderBook(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_list_()
  , security_(nullptr)
  , update_time_(PROTOBUF_ULONGLONG(0))
  , order_level_count_(0){}
struct OrderBookDefaultTypeInternal {
  constexpr OrderBookDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderBookDefaultTypeInternal() {}
  union {
    OrderBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderBookDefaultTypeInternal _OrderBook_default_instance_;
constexpr PlateInfo::PlateInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plate_(nullptr)
  , plate_type_(0){}
struct PlateInfoDefaultTypeInternal {
  constexpr PlateInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlateInfoDefaultTypeInternal() {}
  union {
    PlateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlateInfoDefaultTypeInternal _PlateInfo_default_instance_;
constexpr Rehab::Rehab(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , company_act_flag_(PROTOBUF_LONGLONG(0))
  , fwd_factor_a_(0)
  , fwd_factor_b_(0)
  , bwd_factor_a_(0)
  , bwd_factor_b_(0)
  , split_base_(0)
  , split_(0)
  , join_base_(0)
  , join_(0)
  , bonus_base_(0)
  , bonus_(0)
  , transfer_base_(0)
  , transfer_(0)
  , allot_base_(0)
  , allot_(0)
  , allot_price_(0)
  , add_base_(0)
  , add_(0)
  , add_price_(0)
  , dividend_(0)
  , special_dividend_(0)
  , timestamp_(0){}
struct RehabDefaultTypeInternal {
  constexpr RehabDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RehabDefaultTypeInternal() {}
  union {
    Rehab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RehabDefaultTypeInternal _Rehab_default_instance_;
constexpr CapitalFlow::CapitalFlow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , capital_in_big_(0)
  , capital_in_mid_(0)
  , capital_in_small_(0)
  , capital_out_big_(0)
  , capital_out_mid_(0)
  , capital_out_small_(0)
  , update_timestamp_(0){}
struct CapitalFlowDefaultTypeInternal {
  constexpr CapitalFlowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapitalFlowDefaultTypeInternal() {}
  union {
    CapitalFlow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapitalFlowDefaultTypeInternal _CapitalFlow_default_instance_;
constexpr KLine::KLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , high_price_(0)
  , open_price_(0)
  , low_price_(0)
  , close_price_(0)
  , last_close_price_(0)
  , volume_(PROTOBUF_LONGLONG(0))
  , turnover_(0)
  , turnover_rate_(0)
  , pe_(0)
  , change_rate_(0)
  , timestamp_(0)
  , is_blank_(false){}
struct KLineDefaultTypeInternal {
  constexpr KLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KLineDefaultTypeInternal() {}
  union {
    KLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KLineDefaultTypeInternal _KLine_default_instance_;
constexpr TimeShare::TimeShare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(0)
  , last_close_price_(0)
  , avg_price_(0)
  , volume_(PROTOBUF_LONGLONG(0))
  , turnover_(0)
  , is_blank_(false)
  , timestamp_(0){}
struct TimeShareDefaultTypeInternal {
  constexpr TimeShareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeShareDefaultTypeInternal() {}
  union {
    TimeShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeShareDefaultTypeInternal _TimeShare_default_instance_;
}  // namespace Basic
}  // namespace Common
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Basic_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Basic_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Basic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Basic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Security, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Security, market_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Security, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, high_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, low_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, volume_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, turnover_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, change_value_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, change_rate_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PreAfterMarketData, amplitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, last_settle_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, position_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, pre_open_interest_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, upper_limit_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, lower_limit_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, close_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, pre_delta_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureBasicQotExData, curr_delta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, security_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, update_time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, high_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, open_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, low_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, cur_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, last_close_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, volume_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, turnover_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, turnover_rate_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, security_status_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, pre_market_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, after_market_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::BasicQot, future_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, vcm_flag_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, shortsell_flag_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, cas_flag_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, ccass_flag_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, stamp_duty_flag_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, pos_flag_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, pos_upper_limit_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::HKSecurityStaticBasic, pos_lower_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, security_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, id_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, lot_size_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, security_type_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, name_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, list_time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, delisting_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticBasic, list_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureStaticExData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureStaticExData, last_trade_time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureStaticExData, last_trade_timestamp_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::FutureStaticExData, is_main_contract_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticInfo, basic_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticInfo, future_exdata_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::SecurityStaticInfo, hk_basic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::VCMTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::VCMTrigger, security_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::VCMTrigger, coolingoff_starttime_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::VCMTrigger, coolingoff_endtime_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::VCMTrigger, vcm_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::VCMTrigger, vcm_lower_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::VCMTrigger, vcm_upper_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::RefPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::RefPrice, security_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::RefPrice, ref_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::RefPrice, lower_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::RefPrice, upper_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TradingSessionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TradingSessionStatus, market_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TradingSessionStatus, marketcode_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TradingSessionStatus, trading_session_subid_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TradingSessionStatus, trading_session_status_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TradingSessionStatus, start_datetime_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TradingSessionStatus, end_datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, sequence_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, dir_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, volume_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, turnover_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, recvtime_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, type_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, type_sign_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Ticker, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Broker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Broker, id_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Broker, name_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Broker, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Brokerlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Brokerlist, security_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Brokerlist, broker_ask_list_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Brokerlist, broker_bid_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBookDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBookDetail, ask_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBookDetail, ask_volume_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBookDetail, ask_order_count_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBookDetail, bid_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBookDetail, bid_volume_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBookDetail, bid_order_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBook, security_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBook, order_level_count_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBook, update_time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::OrderBook, detail_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PlateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PlateInfo, plate_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PlateInfo, name_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::PlateInfo, plate_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, company_act_flag_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, fwd_factor_a_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, fwd_factor_b_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, bwd_factor_a_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, bwd_factor_b_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, split_base_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, split_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, join_base_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, join_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, bonus_base_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, bonus_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, transfer_base_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, transfer_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, allot_base_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, allot_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, allot_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, add_base_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, add_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, add_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, dividend_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, special_dividend_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::Rehab, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, capital_in_big_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, capital_in_mid_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, capital_in_small_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, capital_out_big_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, capital_out_mid_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, capital_out_small_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, update_time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::CapitalFlow, update_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, is_blank_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, high_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, open_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, low_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, close_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, last_close_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, volume_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, turnover_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, turnover_rate_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, pe_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, change_rate_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::KLine, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, time_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, is_blank_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, last_close_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, avg_price_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, volume_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, turnover_),
  PROTOBUF_FIELD_OFFSET(::Common::Basic::TimeShare, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Common::Basic::Security)},
  { 7, -1, sizeof(::Common::Basic::PreAfterMarketData)},
  { 20, -1, sizeof(::Common::Basic::FutureBasicQotExData)},
  { 33, -1, sizeof(::Common::Basic::BasicQot)},
  { 52, -1, sizeof(::Common::Basic::HKSecurityStaticBasic)},
  { 65, -1, sizeof(::Common::Basic::SecurityStaticBasic)},
  { 78, -1, sizeof(::Common::Basic::FutureStaticExData)},
  { 86, -1, sizeof(::Common::Basic::SecurityStaticInfo)},
  { 94, -1, sizeof(::Common::Basic::VCMTrigger)},
  { 105, -1, sizeof(::Common::Basic::RefPrice)},
  { 114, -1, sizeof(::Common::Basic::TradingSessionStatus)},
  { 125, -1, sizeof(::Common::Basic::Ticker)},
  { 140, -1, sizeof(::Common::Basic::Broker)},
  { 148, -1, sizeof(::Common::Basic::Brokerlist)},
  { 156, -1, sizeof(::Common::Basic::OrderBookDetail)},
  { 167, -1, sizeof(::Common::Basic::OrderBook)},
  { 176, -1, sizeof(::Common::Basic::PlateInfo)},
  { 184, -1, sizeof(::Common::Basic::Rehab)},
  { 212, -1, sizeof(::Common::Basic::CapitalFlow)},
  { 225, -1, sizeof(::Common::Basic::KLine)},
  { 243, -1, sizeof(::Common::Basic::TimeShare)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_Security_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_PreAfterMarketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_FutureBasicQotExData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_BasicQot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_HKSecurityStaticBasic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_SecurityStaticBasic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_FutureStaticExData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_SecurityStaticInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_VCMTrigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_RefPrice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_TradingSessionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_Ticker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_Broker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_Brokerlist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_OrderBookDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_OrderBook_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_PlateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_Rehab_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_CapitalFlow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_KLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::Basic::_TimeShare_default_instance_),
};

const char descriptor_table_protodef_Basic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Basic.proto\022\014Common.Basic\"(\n\010Security\022"
  "\016\n\006market\030\001 \001(\005\022\014\n\004code\030\002 \001(\t\"\252\001\n\022PreAft"
  "erMarketData\022\r\n\005price\030\001 \001(\001\022\022\n\nhigh_pric"
  "e\030\002 \001(\001\022\021\n\tlow_price\030\003 \001(\001\022\016\n\006volume\030\004 \001"
  "(\003\022\020\n\010turnover\030\005 \001(\001\022\024\n\014change_value\030\006 \001"
  "(\001\022\023\n\013change_rate\030\007 \001(\001\022\021\n\tamplitude\030\010 \001"
  "(\001\"\320\001\n\024FutureBasicQotExData\022\031\n\021last_sett"
  "le_price\030\001 \001(\001\022\020\n\010position\030\002 \001(\005\022\031\n\021pre_"
  "open_interest\030\003 \001(\005\022\031\n\021upper_limit_price"
  "\030\004 \001(\001\022\031\n\021lower_limit_price\030\005 \001(\001\022\023\n\013clo"
  "se_price\030\006 \001(\001\022\021\n\tpre_delta\030\007 \001(\001\022\022\n\ncur"
  "r_delta\030\010 \001(\001\"\252\003\n\010BasicQot\022(\n\010security\030\001"
  " \001(\0132\026.Common.Basic.Security\022\023\n\013update_t"
  "ime\030\002 \001(\004\022\022\n\nhigh_price\030\003 \001(\001\022\022\n\nopen_pr"
  "ice\030\004 \001(\001\022\021\n\tlow_price\030\005 \001(\001\022\021\n\tcur_pric"
  "e\030\006 \001(\001\022\030\n\020last_close_price\030\007 \001(\001\022\016\n\006vol"
  "ume\030\010 \001(\003\022\020\n\010turnover\030\t \001(\001\022\025\n\rturnover_"
  "rate\030\n \001(\001\022\027\n\017security_status\030\013 \001(\005\0224\n\np"
  "re_market\0302 \001(\0132 .Common.Basic.PreAfterM"
  "arketData\0226\n\014after_market\0303 \001(\0132 .Common"
  ".Basic.PreAfterMarketData\0227\n\013future_data"
  "\0304 \001(\0132\".Common.Basic.FutureBasicQotExDa"
  "ta\"\304\001\n\025HKSecurityStaticBasic\022\020\n\010VCM_flag"
  "\030\002 \001(\010\022\026\n\016shortsell_flag\030\003 \001(\010\022\020\n\010CAS_fl"
  "ag\030\004 \001(\010\022\022\n\nCCASS_flag\030\005 \001(\010\022\027\n\017stamp_du"
  "ty_flag\030\006 \001(\010\022\020\n\010POS_flag\030\007 \001(\010\022\027\n\017POS_u"
  "pper_limit\030\010 \001(\r\022\027\n\017POS_lower_limit\030\t \001("
  "\r\"\300\001\n\023SecurityStaticBasic\022(\n\010security\030\001 "
  "\001(\0132\026.Common.Basic.Security\022\n\n\002id\030\002 \001(\003\022"
  "\020\n\010lot_size\030\003 \001(\005\022\025\n\rsecurity_type\030\004 \001(\005"
  "\022\014\n\004name\030\005 \001(\t\022\021\n\tlist_time\030\006 \001(\t\022\021\n\tdel"
  "isting\030\007 \001(\010\022\026\n\016list_timestamp\030\010 \001(\001\"e\n\022"
  "FutureStaticExData\022\027\n\017last_trade_time\030\001 "
  "\001(\t\022\034\n\024last_trade_timestamp\030\002 \001(\001\022\030\n\020is_"
  "main_contract\030\003 \001(\010\"\266\001\n\022SecurityStaticIn"
  "fo\0220\n\005basic\030\001 \001(\0132!.Common.Basic.Securit"
  "yStaticBasic\0227\n\rfuture_exdata\030\002 \001(\0132 .Co"
  "mmon.Basic.FutureStaticExData\0225\n\010hk_basi"
  "c\030\003 \001(\0132#.Common.Basic.HKSecurityStaticB"
  "asic\"\265\001\n\nVCMTrigger\022(\n\010security\030\001 \001(\0132\026."
  "Common.Basic.Security\022\034\n\024coolingoff_star"
  "ttime\030\002 \001(\004\022\032\n\022coolingoff_endtime\030\003 \001(\004\022"
  "\021\n\tvcm_price\030\004 \001(\r\022\027\n\017vcm_lower_price\030\005 "
  "\001(\r\022\027\n\017vcm_upper_price\030\006 \001(\r\"q\n\010RefPrice"
  "\022(\n\010security\030\001 \001(\0132\026.Common.Basic.Securi"
  "ty\022\021\n\tref_price\030\002 \001(\r\022\023\n\013lower_price\030\003 \001"
  "(\r\022\023\n\013upper_price\030\004 \001(\r\"\247\001\n\024TradingSessi"
  "onStatus\022\016\n\006market\030\001 \001(\t\022\022\n\nmarketcode\030\002"
  " \001(\r\022\035\n\025trading_session_subid\030\003 \001(\r\022\036\n\026t"
  "rading_session_status\030\004 \001(\r\022\026\n\016start_dat"
  "etime\030\005 \001(\004\022\024\n\014end_datetime\030\006 \001(\004\"\254\001\n\006Ti"
  "cker\022\014\n\004time\030\001 \001(\t\022\020\n\010sequence\030\002 \001(\003\022\013\n\003"
  "dir\030\003 \001(\005\022\r\n\005price\030\004 \001(\001\022\016\n\006volume\030\005 \001(\003"
  "\022\020\n\010turnover\030\006 \001(\001\022\020\n\010recvTime\030\007 \001(\001\022\014\n\004"
  "type\030\010 \001(\005\022\021\n\ttype_sign\030\t \001(\005\022\021\n\ttimesta"
  "mp\030\n \001(\001\"/\n\006Broker\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002"
  " \001(\t\022\013\n\003pos\030\003 \001(\005\"\224\001\n\nBrokerlist\022(\n\010secu"
  "rity\030\001 \001(\0132\026.Common.Basic.Security\022-\n\017br"
  "oker_ask_list\030\002 \003(\0132\024.Common.Basic.Broke"
  "r\022-\n\017broker_bid_list\030\003 \003(\0132\024.Common.Basi"
  "c.Broker\"\221\001\n\017OrderBookDetail\022\021\n\task_pric"
  "e\030\001 \001(\001\022\022\n\nask_volume\030\002 \001(\003\022\027\n\017ask_order"
  "_count\030\003 \001(\005\022\021\n\tbid_price\030\004 \001(\001\022\022\n\nbid_v"
  "olume\030\005 \001(\003\022\027\n\017bid_order_count\030\006 \001(\005\"\231\001\n"
  "\tOrderBook\022(\n\010security\030\001 \001(\0132\026.Common.Ba"
  "sic.Security\022\031\n\021order_level_count\030\002 \001(\005\022"
  "\023\n\013update_time\030\003 \001(\004\0222\n\013detail_list\030\004 \003("
  "\0132\035.Common.Basic.OrderBookDetail\"T\n\tPlat"
  "eInfo\022%\n\005plate\030\001 \001(\0132\026.Common.Basic.Secu"
  "rity\022\014\n\004name\030\002 \001(\t\022\022\n\nplate_type\030\003 \001(\005\"\300"
  "\003\n\005Rehab\022\014\n\004time\030\001 \001(\t\022\030\n\020company_act_fl"
  "ag\030\002 \001(\003\022\024\n\014fwd_factor_A\030\003 \001(\001\022\024\n\014fwd_fa"
  "ctor_B\030\004 \001(\001\022\024\n\014bwd_factor_A\030\005 \001(\001\022\024\n\014bw"
  "d_factor_B\030\006 \001(\001\022\022\n\nsplit_base\030\007 \001(\005\022\r\n\005"
  "split\030\010 \001(\005\022\021\n\tjoin_base\030\t \001(\005\022\014\n\004join\030\n"
  " \001(\005\022\022\n\nbonus_base\030\013 \001(\005\022\r\n\005bonus\030\014 \001(\005\022"
  "\025\n\rtransfer_base\030\r \001(\005\022\020\n\010transfer\030\016 \001(\005"
  "\022\022\n\nallot_base\030\017 \001(\005\022\r\n\005allot\030\020 \001(\005\022\023\n\013a"
  "llot_price\030\021 \001(\001\022\020\n\010add_base\030\022 \001(\005\022\013\n\003ad"
  "d\030\023 \001(\005\022\021\n\tadd_price\030\024 \001(\001\022\020\n\010dividend\030\025"
  " \001(\001\022\030\n\020special_dividend\030\026 \001(\001\022\021\n\ttimest"
  "amp\030\027 \001(\001\"\323\001\n\013CapitalFlow\022\026\n\016capital_in_"
  "big\030\001 \001(\001\022\026\n\016capital_in_mid\030\002 \001(\001\022\030\n\020cap"
  "ital_in_small\030\003 \001(\001\022\027\n\017capital_out_big\030\004"
  " \001(\001\022\027\n\017capital_out_mid\030\005 \001(\001\022\031\n\021capital"
  "_out_small\030\006 \001(\001\022\023\n\013update_time\030\007 \001(\t\022\030\n"
  "\020update_timestamp\030\010 \001(\001\"\376\001\n\005KLine\022\014\n\004tim"
  "e\030\001 \001(\t\022\020\n\010is_blank\030\002 \001(\010\022\022\n\nhigh_price\030"
  "\003 \001(\001\022\022\n\nopen_price\030\004 \001(\001\022\021\n\tlow_price\030\005"
  " \001(\001\022\023\n\013close_price\030\006 \001(\001\022\030\n\020last_close_"
  "price\030\007 \001(\001\022\016\n\006volume\030\010 \001(\003\022\020\n\010turnover\030"
  "\t \001(\001\022\025\n\rturnover_rate\030\n \001(\001\022\n\n\002pe\030\013 \001(\001"
  "\022\023\n\013change_rate\030\014 \001(\001\022\021\n\ttimestamp\030\r \001(\001"
  "\"\234\001\n\tTimeShare\022\014\n\004time\030\001 \001(\t\022\020\n\010is_blank"
  "\030\002 \001(\010\022\r\n\005price\030\003 \001(\001\022\030\n\020last_close_pric"
  "e\030\004 \001(\001\022\021\n\tavg_price\030\005 \001(\001\022\016\n\006volume\030\006 \001"
  "(\003\022\020\n\010turnover\030\007 \001(\001\022\021\n\ttimestamp\030b \001(\001*"
  "\222\001\n\tQotMarket\022\025\n\021QotMarket_Unknown\020\000\022\031\n\025"
  "QotMarket_HK_Security\020\001\022\031\n\025QotMarket_US_"
  "Security\020\013\022\033\n\027QotMarket_CNSH_Security\020\025\022"
  "\033\n\027QotMarket_CNSZ_Security\020\026*e\n\nAssetCla"
  "ss\022\025\n\021AssetClass_Unknow\020\000\022\024\n\020AssetClass_"
  "Stock\020\001\022\023\n\017AssetClass_Bond\020\002\022\025\n\021AssetCla"
  "ss_Future\020\003*\352\001\n\014SecurityType\022\030\n\024Security"
  "Type_Unknown\020\000\022\025\n\021SecurityType_Bond\020\001\022\025\n"
  "\021SecurityType_Eqty\020\002\022\026\n\022SecurityType_Tru"
  "st\020\003\022\030\n\024SecurityType_Warrant\020\004\022\026\n\022Securi"
  "tyType_Index\020\005\022\026\n\022SecurityType_Plate\020\006\022\027"
  "\n\023SecurityType_Option\020\007\022\027\n\023SecurityType_"
  "Future\020\010*\332\001\n\nCompanyAct\022\023\n\017CompanyAct_No"
  "ne\020\000\022\024\n\020CompanyAct_Split\020\001\022\023\n\017CompanyAct"
  "_Join\020\002\022\024\n\020CompanyAct_Bonus\020\004\022\027\n\023Company"
  "Act_Transfer\020\010\022\024\n\020CompanyAct_Allot\020\020\022\022\n\016"
  "CompanyAct_Add\020 \022\027\n\023CompanyAct_Dividend\020"
  "@\022\032\n\025CompanyAct_SPDividend\020\200\001*N\n\tRehabTy"
  "pe\022\022\n\016RehabType_None\020\000\022\025\n\021RehabType_Forw"
  "ard\020\001\022\026\n\022RehabType_Backward\020\002*\224\006\n\016Securi"
  "tyStatus\022\032\n\026SecurityStatus_Unknown\020\000\022\031\n\025"
  "SecurityStatus_Normal\020\001\022\032\n\026SecurityStatu"
  "s_Listing\020\002\022\035\n\031SecurityStatus_Purchasing"
  "\020\003\022\036\n\032SecurityStatus_Subscribing\020\004\022)\n%Se"
  "curityStatus_BeforeDrakTradeOpening\020\005\022\036\n"
  "\032SecurityStatus_DrakTrading\020\006\022\037\n\033Securit"
  "yStatus_DrakTradeEnd\020\007\022\033\n\027SecurityStatus"
  "_ToBeOpen\020\010\022\034\n\030SecurityStatus_Suspended\020"
  "\t\022\031\n\025SecurityStatus_Called\020\n\022)\n%Security"
  "Status_ExpiredLastTradingDate\020\013\022\032\n\026Secur"
  "ityStatus_Expired\020\014\022\033\n\027SecurityStatus_De"
  "listed\020\r\022(\n$SecurityStatus_ChangeToTempo"
  "raryCode\020\016\022(\n$SecurityStatus_TemporaryCo"
  "deTradeEnd\020\017\022\'\n#SecurityStatus_ChangedPl"
  "ateTradeEnd\020\020\022&\n\"SecurityStatus_ChangedC"
  "odeTradeEnd\020\021\022,\n(SecurityStatus_Recovera"
  "bleCircuitBreaker\020\022\022.\n*SecurityStatus_Un"
  "RecoverableCircuitBreaker\020\023\022#\n\037SecurityS"
  "tatus_AfterCombination\020\024\022\"\n\036SecurityStat"
  "us_AfterTransation\020\025*\322\003\n\016QotMarketState\022"
  "\027\n\023QotMarketState_None\020\000\022\032\n\026QotMarketSta"
  "te_Auction\020\001\022\036\n\032QotMarketState_WaitingOp"
  "en\020\002\022\032\n\026QotMarketState_Morning\020\003\022\027\n\023QotM"
  "arketState_Rest\020\004\022\034\n\030QotMarketState_Afte"
  "rnoon\020\005\022\031\n\025QotMarketState_Closed\020\006\022!\n\035Qo"
  "tMarketState_PreMarketBegin\020\010\022\037\n\033QotMark"
  "etState_PreMarketEnd\020\t\022\"\n\036QotMarketState"
  "_AfterHoursBegin\020\n\022 \n\034QotMarketState_Aft"
  "erHoursEnd\020\013\022%\n!QotMarketState_StibAfter"
  "HoursWait\020\033\022&\n\"QotMarketState_StibAfterH"
  "oursBegin\020\034\022$\n QotMarketState_StibAfterH"
  "oursEnd\020\035*}\n\017TickerDirection\022\033\n\027TickerDi"
  "rection_Unknown\020\000\022\027\n\023TickerDirection_Bid"
  "\020\001\022\027\n\023TickerDirection_Ask\020\002\022\033\n\027TickerDir"
  "ection_Neutral\020\003*\226\005\n\023TradingSessionSubID"
  "\022 \n\034TradingSessionSubID_DayClose\020\000\022\"\n\036Tr"
  "adingSessionSubID_NotYetOpen\020d\022%\n!Tradin"
  "gSessionSubID_POSOrderInput\020\001\022)\n%Trading"
  "SessionSubID_POSNoCancellation\020e\022)\n%Trad"
  "ingSessionSubID_POSRandomMatching\020l\022(\n$T"
  "radingSessionSubID_POSOrderMatching\020\002\022 \n"
  "\034TradingSessionSubID_Blocking\020\007\022)\n%Tradi"
  "ngSessionSubID_ContinuousTrading\020\003\022/\n+Tr"
  "adingSessionSubID_CASReferencePriceFixin"
  "g\020i\022%\n!TradingSessionSubID_CASOrderInput"
  "\020\005\022)\n%TradingSessionSubID_CASNoCancellat"
  "ion\020j\022&\n\"TradingSessionSubID_CASRandomCl"
  "ose\020k\022(\n$TradingSessionSubID_CASOrderMat"
  "ching\020\004\022,\n(TradingSessionSubID_ExchangeI"
  "ntervention\020f\022\035\n\031TradingSessionSubID_Clo"
  "se\020g\022#\n\037TradingSessionSubID_OrderCancel\020"
  "hb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Basic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Basic_2eproto = {
  false, false, 6729, descriptor_table_protodef_Basic_2eproto, "Basic.proto", 
  &descriptor_table_Basic_2eproto_once, nullptr, 0, 21,
  schemas, file_default_instances, TableStruct_Basic_2eproto::offsets,
  file_level_metadata_Basic_2eproto, file_level_enum_descriptors_Basic_2eproto, file_level_service_descriptors_Basic_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Basic_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return descriptor_table_Basic_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Basic_2eproto(&descriptor_table_Basic_2eproto);
namespace Common {
namespace Basic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QotMarket_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[0];
}
bool QotMarket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 11:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AssetClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[1];
}
bool AssetClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[2];
}
bool SecurityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompanyAct_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[3];
}
bool CompanyAct_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RehabType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[4];
}
bool RehabType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[5];
}
bool SecurityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QotMarketState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[6];
}
bool QotMarketState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TickerDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[7];
}
bool TickerDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradingSessionSubID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Basic_2eproto);
  return file_level_enum_descriptors_Basic_2eproto[8];
}
bool TradingSessionSubID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Security::_Internal {
 public:
};

Security::Security(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.Security)
}
Security::Security(const Security& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  market_ = from.market_;
  // @@protoc_insertion_point(copy_constructor:Common.Basic.Security)
}

void Security::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
market_ = 0;
}

Security::~Security() {
  // @@protoc_insertion_point(destructor:Common.Basic.Security)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Security::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Security::ArenaDtor(void* object) {
  Security* _this = reinterpret_cast< Security* >(object);
  (void)_this;
}
void Security::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Security::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Security::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.Security)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  market_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Security::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 market = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          market_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.Security.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Security::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.Security)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 market = 1;
  if (this->market() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_market(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.Security.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.Security)
  return target;
}

size_t Security::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.Security)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 market = 1;
  if (this->market() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_market());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Security::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.Security)
  GOOGLE_DCHECK_NE(&from, this);
  const Security* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Security>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.Security)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.Security)
    MergeFrom(*source);
  }
}

void Security::MergeFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.Security)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.market() != 0) {
    _internal_set_market(from._internal_market());
  }
}

void Security::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Security::CopyFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security::IsInitialized() const {
  return true;
}

void Security::InternalSwap(Security* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(market_, other->market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PreAfterMarketData::_Internal {
 public:
};

PreAfterMarketData::PreAfterMarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.PreAfterMarketData)
}
PreAfterMarketData::PreAfterMarketData(const PreAfterMarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&amplitude_) -
    reinterpret_cast<char*>(&price_)) + sizeof(amplitude_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.PreAfterMarketData)
}

void PreAfterMarketData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amplitude_) -
    reinterpret_cast<char*>(&price_)) + sizeof(amplitude_));
}

PreAfterMarketData::~PreAfterMarketData() {
  // @@protoc_insertion_point(destructor:Common.Basic.PreAfterMarketData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreAfterMarketData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PreAfterMarketData::ArenaDtor(void* object) {
  PreAfterMarketData* _this = reinterpret_cast< PreAfterMarketData* >(object);
  (void)_this;
}
void PreAfterMarketData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreAfterMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreAfterMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.PreAfterMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amplitude_) -
      reinterpret_cast<char*>(&price_)) + sizeof(amplitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreAfterMarketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double high_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          high_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          low_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double change_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          change_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double change_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          change_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double amplitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreAfterMarketData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.PreAfterMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_price(), target);
  }

  // double high_price = 2;
  if (!(this->high_price() <= 0 && this->high_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_high_price(), target);
  }

  // double low_price = 3;
  if (!(this->low_price() <= 0 && this->low_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_low_price(), target);
  }

  // int64 volume = 4;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_volume(), target);
  }

  // double turnover = 5;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_turnover(), target);
  }

  // double change_value = 6;
  if (!(this->change_value() <= 0 && this->change_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_change_value(), target);
  }

  // double change_rate = 7;
  if (!(this->change_rate() <= 0 && this->change_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_change_rate(), target);
  }

  // double amplitude = 8;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_amplitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.PreAfterMarketData)
  return target;
}

size_t PreAfterMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.PreAfterMarketData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double high_price = 2;
  if (!(this->high_price() <= 0 && this->high_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double low_price = 3;
  if (!(this->low_price() <= 0 && this->low_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // double turnover = 5;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double change_value = 6;
  if (!(this->change_value() <= 0 && this->change_value() >= 0)) {
    total_size += 1 + 8;
  }

  // double change_rate = 7;
  if (!(this->change_rate() <= 0 && this->change_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double amplitude = 8;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreAfterMarketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.PreAfterMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const PreAfterMarketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreAfterMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.PreAfterMarketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.PreAfterMarketData)
    MergeFrom(*source);
  }
}

void PreAfterMarketData::MergeFrom(const PreAfterMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.PreAfterMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.high_price() <= 0 && from.high_price() >= 0)) {
    _internal_set_high_price(from._internal_high_price());
  }
  if (!(from.low_price() <= 0 && from.low_price() >= 0)) {
    _internal_set_low_price(from._internal_low_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.change_value() <= 0 && from.change_value() >= 0)) {
    _internal_set_change_value(from._internal_change_value());
  }
  if (!(from.change_rate() <= 0 && from.change_rate() >= 0)) {
    _internal_set_change_rate(from._internal_change_rate());
  }
  if (!(from.amplitude() <= 0 && from.amplitude() >= 0)) {
    _internal_set_amplitude(from._internal_amplitude());
  }
}

void PreAfterMarketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.PreAfterMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreAfterMarketData::CopyFrom(const PreAfterMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.PreAfterMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreAfterMarketData::IsInitialized() const {
  return true;
}

void PreAfterMarketData::InternalSwap(PreAfterMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreAfterMarketData, amplitude_)
      + sizeof(PreAfterMarketData::amplitude_)
      - PROTOBUF_FIELD_OFFSET(PreAfterMarketData, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreAfterMarketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FutureBasicQotExData::_Internal {
 public:
};

FutureBasicQotExData::FutureBasicQotExData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.FutureBasicQotExData)
}
FutureBasicQotExData::FutureBasicQotExData(const FutureBasicQotExData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&last_settle_price_, &from.last_settle_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_delta_) -
    reinterpret_cast<char*>(&last_settle_price_)) + sizeof(curr_delta_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.FutureBasicQotExData)
}

void FutureBasicQotExData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_settle_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_delta_) -
    reinterpret_cast<char*>(&last_settle_price_)) + sizeof(curr_delta_));
}

FutureBasicQotExData::~FutureBasicQotExData() {
  // @@protoc_insertion_point(destructor:Common.Basic.FutureBasicQotExData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FutureBasicQotExData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FutureBasicQotExData::ArenaDtor(void* object) {
  FutureBasicQotExData* _this = reinterpret_cast< FutureBasicQotExData* >(object);
  (void)_this;
}
void FutureBasicQotExData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FutureBasicQotExData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FutureBasicQotExData::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.FutureBasicQotExData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&last_settle_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_delta_) -
      reinterpret_cast<char*>(&last_settle_price_)) + sizeof(curr_delta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutureBasicQotExData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double last_settle_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          last_settle_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pre_open_interest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pre_open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double upper_limit_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          upper_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          lower_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_delta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          pre_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double curr_delta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          curr_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FutureBasicQotExData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.FutureBasicQotExData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double last_settle_price = 1;
  if (!(this->last_settle_price() <= 0 && this->last_settle_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_last_settle_price(), target);
  }

  // int32 position = 2;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_position(), target);
  }

  // int32 pre_open_interest = 3;
  if (this->pre_open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pre_open_interest(), target);
  }

  // double upper_limit_price = 4;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_upper_limit_price(), target);
  }

  // double lower_limit_price = 5;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_lower_limit_price(), target);
  }

  // double close_price = 6;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_close_price(), target);
  }

  // double pre_delta = 7;
  if (!(this->pre_delta() <= 0 && this->pre_delta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pre_delta(), target);
  }

  // double curr_delta = 8;
  if (!(this->curr_delta() <= 0 && this->curr_delta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_curr_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.FutureBasicQotExData)
  return target;
}

size_t FutureBasicQotExData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.FutureBasicQotExData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double last_settle_price = 1;
  if (!(this->last_settle_price() <= 0 && this->last_settle_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  // int32 pre_open_interest = 3;
  if (this->pre_open_interest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pre_open_interest());
  }

  // double upper_limit_price = 4;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double lower_limit_price = 5;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_price = 6;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_delta = 7;
  if (!(this->pre_delta() <= 0 && this->pre_delta() >= 0)) {
    total_size += 1 + 8;
  }

  // double curr_delta = 8;
  if (!(this->curr_delta() <= 0 && this->curr_delta() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureBasicQotExData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.FutureBasicQotExData)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureBasicQotExData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FutureBasicQotExData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.FutureBasicQotExData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.FutureBasicQotExData)
    MergeFrom(*source);
  }
}

void FutureBasicQotExData::MergeFrom(const FutureBasicQotExData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.FutureBasicQotExData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.last_settle_price() <= 0 && from.last_settle_price() >= 0)) {
    _internal_set_last_settle_price(from._internal_last_settle_price());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.pre_open_interest() != 0) {
    _internal_set_pre_open_interest(from._internal_pre_open_interest());
  }
  if (!(from.upper_limit_price() <= 0 && from.upper_limit_price() >= 0)) {
    _internal_set_upper_limit_price(from._internal_upper_limit_price());
  }
  if (!(from.lower_limit_price() <= 0 && from.lower_limit_price() >= 0)) {
    _internal_set_lower_limit_price(from._internal_lower_limit_price());
  }
  if (!(from.close_price() <= 0 && from.close_price() >= 0)) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (!(from.pre_delta() <= 0 && from.pre_delta() >= 0)) {
    _internal_set_pre_delta(from._internal_pre_delta());
  }
  if (!(from.curr_delta() <= 0 && from.curr_delta() >= 0)) {
    _internal_set_curr_delta(from._internal_curr_delta());
  }
}

void FutureBasicQotExData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.FutureBasicQotExData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureBasicQotExData::CopyFrom(const FutureBasicQotExData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.FutureBasicQotExData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureBasicQotExData::IsInitialized() const {
  return true;
}

void FutureBasicQotExData::InternalSwap(FutureBasicQotExData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FutureBasicQotExData, curr_delta_)
      + sizeof(FutureBasicQotExData::curr_delta_)
      - PROTOBUF_FIELD_OFFSET(FutureBasicQotExData, last_settle_price_)>(
          reinterpret_cast<char*>(&last_settle_price_),
          reinterpret_cast<char*>(&other->last_settle_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FutureBasicQotExData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BasicQot::_Internal {
 public:
  static const ::Common::Basic::Security& security(const BasicQot* msg);
  static const ::Common::Basic::PreAfterMarketData& pre_market(const BasicQot* msg);
  static const ::Common::Basic::PreAfterMarketData& after_market(const BasicQot* msg);
  static const ::Common::Basic::FutureBasicQotExData& future_data(const BasicQot* msg);
};

const ::Common::Basic::Security&
BasicQot::_Internal::security(const BasicQot* msg) {
  return *msg->security_;
}
const ::Common::Basic::PreAfterMarketData&
BasicQot::_Internal::pre_market(const BasicQot* msg) {
  return *msg->pre_market_;
}
const ::Common::Basic::PreAfterMarketData&
BasicQot::_Internal::after_market(const BasicQot* msg) {
  return *msg->after_market_;
}
const ::Common::Basic::FutureBasicQotExData&
BasicQot::_Internal::future_data(const BasicQot* msg) {
  return *msg->future_data_;
}
BasicQot::BasicQot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.BasicQot)
}
BasicQot::BasicQot(const BasicQot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_security()) {
    security_ = new ::Common::Basic::Security(*from.security_);
  } else {
    security_ = nullptr;
  }
  if (from._internal_has_pre_market()) {
    pre_market_ = new ::Common::Basic::PreAfterMarketData(*from.pre_market_);
  } else {
    pre_market_ = nullptr;
  }
  if (from._internal_has_after_market()) {
    after_market_ = new ::Common::Basic::PreAfterMarketData(*from.after_market_);
  } else {
    after_market_ = nullptr;
  }
  if (from._internal_has_future_data()) {
    future_data_ = new ::Common::Basic::FutureBasicQotExData(*from.future_data_);
  } else {
    future_data_ = nullptr;
  }
  ::memcpy(&update_time_, &from.update_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&security_status_) -
    reinterpret_cast<char*>(&update_time_)) + sizeof(security_status_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.BasicQot)
}

void BasicQot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&security_status_) -
    reinterpret_cast<char*>(&security_)) + sizeof(security_status_));
}

BasicQot::~BasicQot() {
  // @@protoc_insertion_point(destructor:Common.Basic.BasicQot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BasicQot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete security_;
  if (this != internal_default_instance()) delete pre_market_;
  if (this != internal_default_instance()) delete after_market_;
  if (this != internal_default_instance()) delete future_data_;
}

void BasicQot::ArenaDtor(void* object) {
  BasicQot* _this = reinterpret_cast< BasicQot* >(object);
  (void)_this;
}
void BasicQot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasicQot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasicQot::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.BasicQot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  if (GetArena() == nullptr && pre_market_ != nullptr) {
    delete pre_market_;
  }
  pre_market_ = nullptr;
  if (GetArena() == nullptr && after_market_ != nullptr) {
    delete after_market_;
  }
  after_market_ = nullptr;
  if (GetArena() == nullptr && future_data_ != nullptr) {
    delete future_data_;
  }
  future_data_ = nullptr;
  ::memset(&update_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_status_) -
      reinterpret_cast<char*>(&update_time_)) + sizeof(security_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicQot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common.Basic.Security security = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 update_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double high_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          high_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double open_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          open_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          low_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cur_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cur_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double last_close_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          last_close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double turnover_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          turnover_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 security_status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          security_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Common.Basic.PreAfterMarketData pre_market = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Common.Basic.PreAfterMarketData after_market = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_after_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Common.Basic.FutureBasicQotExData future_data = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_future_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicQot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.BasicQot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::security(this), target, stream);
  }

  // uint64 update_time = 2;
  if (this->update_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_update_time(), target);
  }

  // double high_price = 3;
  if (!(this->high_price() <= 0 && this->high_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_high_price(), target);
  }

  // double open_price = 4;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_open_price(), target);
  }

  // double low_price = 5;
  if (!(this->low_price() <= 0 && this->low_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_low_price(), target);
  }

  // double cur_price = 6;
  if (!(this->cur_price() <= 0 && this->cur_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_cur_price(), target);
  }

  // double last_close_price = 7;
  if (!(this->last_close_price() <= 0 && this->last_close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_last_close_price(), target);
  }

  // int64 volume = 8;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_volume(), target);
  }

  // double turnover = 9;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_turnover(), target);
  }

  // double turnover_rate = 10;
  if (!(this->turnover_rate() <= 0 && this->turnover_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_turnover_rate(), target);
  }

  // int32 security_status = 11;
  if (this->security_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_security_status(), target);
  }

  // .Common.Basic.PreAfterMarketData pre_market = 50;
  if (this->has_pre_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::pre_market(this), target, stream);
  }

  // .Common.Basic.PreAfterMarketData after_market = 51;
  if (this->has_after_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::after_market(this), target, stream);
  }

  // .Common.Basic.FutureBasicQotExData future_data = 52;
  if (this->has_future_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::future_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.BasicQot)
  return target;
}

size_t BasicQot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.BasicQot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  // .Common.Basic.PreAfterMarketData pre_market = 50;
  if (this->has_pre_market()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pre_market_);
  }

  // .Common.Basic.PreAfterMarketData after_market = 51;
  if (this->has_after_market()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *after_market_);
  }

  // .Common.Basic.FutureBasicQotExData future_data = 52;
  if (this->has_future_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *future_data_);
  }

  // uint64 update_time = 2;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_update_time());
  }

  // double high_price = 3;
  if (!(this->high_price() <= 0 && this->high_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double open_price = 4;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double low_price = 5;
  if (!(this->low_price() <= 0 && this->low_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double cur_price = 6;
  if (!(this->cur_price() <= 0 && this->cur_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_close_price = 7;
  if (!(this->last_close_price() <= 0 && this->last_close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 volume = 8;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // double turnover = 9;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double turnover_rate = 10;
  if (!(this->turnover_rate() <= 0 && this->turnover_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 security_status = 11;
  if (this->security_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_security_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicQot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.BasicQot)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicQot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicQot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.BasicQot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.BasicQot)
    MergeFrom(*source);
  }
}

void BasicQot::MergeFrom(const BasicQot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.BasicQot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_security()) {
    _internal_mutable_security()->::Common::Basic::Security::MergeFrom(from._internal_security());
  }
  if (from.has_pre_market()) {
    _internal_mutable_pre_market()->::Common::Basic::PreAfterMarketData::MergeFrom(from._internal_pre_market());
  }
  if (from.has_after_market()) {
    _internal_mutable_after_market()->::Common::Basic::PreAfterMarketData::MergeFrom(from._internal_after_market());
  }
  if (from.has_future_data()) {
    _internal_mutable_future_data()->::Common::Basic::FutureBasicQotExData::MergeFrom(from._internal_future_data());
  }
  if (from.update_time() != 0) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (!(from.high_price() <= 0 && from.high_price() >= 0)) {
    _internal_set_high_price(from._internal_high_price());
  }
  if (!(from.open_price() <= 0 && from.open_price() >= 0)) {
    _internal_set_open_price(from._internal_open_price());
  }
  if (!(from.low_price() <= 0 && from.low_price() >= 0)) {
    _internal_set_low_price(from._internal_low_price());
  }
  if (!(from.cur_price() <= 0 && from.cur_price() >= 0)) {
    _internal_set_cur_price(from._internal_cur_price());
  }
  if (!(from.last_close_price() <= 0 && from.last_close_price() >= 0)) {
    _internal_set_last_close_price(from._internal_last_close_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.turnover_rate() <= 0 && from.turnover_rate() >= 0)) {
    _internal_set_turnover_rate(from._internal_turnover_rate());
  }
  if (from.security_status() != 0) {
    _internal_set_security_status(from._internal_security_status());
  }
}

void BasicQot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.BasicQot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicQot::CopyFrom(const BasicQot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.BasicQot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicQot::IsInitialized() const {
  return true;
}

void BasicQot::InternalSwap(BasicQot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasicQot, security_status_)
      + sizeof(BasicQot::security_status_)
      - PROTOBUF_FIELD_OFFSET(BasicQot, security_)>(
          reinterpret_cast<char*>(&security_),
          reinterpret_cast<char*>(&other->security_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicQot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HKSecurityStaticBasic::_Internal {
 public:
};

HKSecurityStaticBasic::HKSecurityStaticBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.HKSecurityStaticBasic)
}
HKSecurityStaticBasic::HKSecurityStaticBasic(const HKSecurityStaticBasic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vcm_flag_, &from.vcm_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_lower_limit_) -
    reinterpret_cast<char*>(&vcm_flag_)) + sizeof(pos_lower_limit_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.HKSecurityStaticBasic)
}

void HKSecurityStaticBasic::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vcm_flag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_lower_limit_) -
    reinterpret_cast<char*>(&vcm_flag_)) + sizeof(pos_lower_limit_));
}

HKSecurityStaticBasic::~HKSecurityStaticBasic() {
  // @@protoc_insertion_point(destructor:Common.Basic.HKSecurityStaticBasic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HKSecurityStaticBasic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HKSecurityStaticBasic::ArenaDtor(void* object) {
  HKSecurityStaticBasic* _this = reinterpret_cast< HKSecurityStaticBasic* >(object);
  (void)_this;
}
void HKSecurityStaticBasic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HKSecurityStaticBasic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HKSecurityStaticBasic::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.HKSecurityStaticBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vcm_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_lower_limit_) -
      reinterpret_cast<char*>(&vcm_flag_)) + sizeof(pos_lower_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HKSecurityStaticBasic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool VCM_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vcm_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shortsell_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shortsell_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool CAS_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cas_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool CCASS_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ccass_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stamp_duty_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          stamp_duty_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool POS_flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pos_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 POS_upper_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pos_upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 POS_lower_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pos_lower_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HKSecurityStaticBasic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.HKSecurityStaticBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool VCM_flag = 2;
  if (this->vcm_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vcm_flag(), target);
  }

  // bool shortsell_flag = 3;
  if (this->shortsell_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shortsell_flag(), target);
  }

  // bool CAS_flag = 4;
  if (this->cas_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_cas_flag(), target);
  }

  // bool CCASS_flag = 5;
  if (this->ccass_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ccass_flag(), target);
  }

  // bool stamp_duty_flag = 6;
  if (this->stamp_duty_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_stamp_duty_flag(), target);
  }

  // bool POS_flag = 7;
  if (this->pos_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_pos_flag(), target);
  }

  // uint32 POS_upper_limit = 8;
  if (this->pos_upper_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pos_upper_limit(), target);
  }

  // uint32 POS_lower_limit = 9;
  if (this->pos_lower_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pos_lower_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.HKSecurityStaticBasic)
  return target;
}

size_t HKSecurityStaticBasic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.HKSecurityStaticBasic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool VCM_flag = 2;
  if (this->vcm_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool shortsell_flag = 3;
  if (this->shortsell_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool CAS_flag = 4;
  if (this->cas_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool CCASS_flag = 5;
  if (this->ccass_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool stamp_duty_flag = 6;
  if (this->stamp_duty_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool POS_flag = 7;
  if (this->pos_flag() != 0) {
    total_size += 1 + 1;
  }

  // uint32 POS_upper_limit = 8;
  if (this->pos_upper_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pos_upper_limit());
  }

  // uint32 POS_lower_limit = 9;
  if (this->pos_lower_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pos_lower_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HKSecurityStaticBasic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.HKSecurityStaticBasic)
  GOOGLE_DCHECK_NE(&from, this);
  const HKSecurityStaticBasic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HKSecurityStaticBasic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.HKSecurityStaticBasic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.HKSecurityStaticBasic)
    MergeFrom(*source);
  }
}

void HKSecurityStaticBasic::MergeFrom(const HKSecurityStaticBasic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.HKSecurityStaticBasic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vcm_flag() != 0) {
    _internal_set_vcm_flag(from._internal_vcm_flag());
  }
  if (from.shortsell_flag() != 0) {
    _internal_set_shortsell_flag(from._internal_shortsell_flag());
  }
  if (from.cas_flag() != 0) {
    _internal_set_cas_flag(from._internal_cas_flag());
  }
  if (from.ccass_flag() != 0) {
    _internal_set_ccass_flag(from._internal_ccass_flag());
  }
  if (from.stamp_duty_flag() != 0) {
    _internal_set_stamp_duty_flag(from._internal_stamp_duty_flag());
  }
  if (from.pos_flag() != 0) {
    _internal_set_pos_flag(from._internal_pos_flag());
  }
  if (from.pos_upper_limit() != 0) {
    _internal_set_pos_upper_limit(from._internal_pos_upper_limit());
  }
  if (from.pos_lower_limit() != 0) {
    _internal_set_pos_lower_limit(from._internal_pos_lower_limit());
  }
}

void HKSecurityStaticBasic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.HKSecurityStaticBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HKSecurityStaticBasic::CopyFrom(const HKSecurityStaticBasic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.HKSecurityStaticBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HKSecurityStaticBasic::IsInitialized() const {
  return true;
}

void HKSecurityStaticBasic::InternalSwap(HKSecurityStaticBasic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HKSecurityStaticBasic, pos_lower_limit_)
      + sizeof(HKSecurityStaticBasic::pos_lower_limit_)
      - PROTOBUF_FIELD_OFFSET(HKSecurityStaticBasic, vcm_flag_)>(
          reinterpret_cast<char*>(&vcm_flag_),
          reinterpret_cast<char*>(&other->vcm_flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HKSecurityStaticBasic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SecurityStaticBasic::_Internal {
 public:
  static const ::Common::Basic::Security& security(const SecurityStaticBasic* msg);
};

const ::Common::Basic::Security&
SecurityStaticBasic::_Internal::security(const SecurityStaticBasic* msg) {
  return *msg->security_;
}
SecurityStaticBasic::SecurityStaticBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.SecurityStaticBasic)
}
SecurityStaticBasic::SecurityStaticBasic(const SecurityStaticBasic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  list_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_list_time().empty()) {
    list_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_list_time(), 
      GetArena());
  }
  if (from._internal_has_security()) {
    security_ = new ::Common::Basic::Security(*from.security_);
  } else {
    security_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delisting_) -
    reinterpret_cast<char*>(&id_)) + sizeof(delisting_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.SecurityStaticBasic)
}

void SecurityStaticBasic::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
list_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delisting_) -
    reinterpret_cast<char*>(&security_)) + sizeof(delisting_));
}

SecurityStaticBasic::~SecurityStaticBasic() {
  // @@protoc_insertion_point(destructor:Common.Basic.SecurityStaticBasic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityStaticBasic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  list_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete security_;
}

void SecurityStaticBasic::ArenaDtor(void* object) {
  SecurityStaticBasic* _this = reinterpret_cast< SecurityStaticBasic* >(object);
  (void)_this;
}
void SecurityStaticBasic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityStaticBasic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityStaticBasic::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.SecurityStaticBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  list_time_.ClearToEmpty();
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delisting_) -
      reinterpret_cast<char*>(&id_)) + sizeof(delisting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityStaticBasic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common.Basic.Security security = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lot_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lot_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 security_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          security_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.SecurityStaticBasic.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string list_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_list_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.SecurityStaticBasic.list_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool delisting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          delisting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double list_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          list_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityStaticBasic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.SecurityStaticBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::security(this), target, stream);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int32 lot_size = 3;
  if (this->lot_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lot_size(), target);
  }

  // int32 security_type = 4;
  if (this->security_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_security_type(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.SecurityStaticBasic.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string list_time = 6;
  if (this->list_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_time().data(), static_cast<int>(this->_internal_list_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.SecurityStaticBasic.list_time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_list_time(), target);
  }

  // bool delisting = 7;
  if (this->delisting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_delisting(), target);
  }

  // double list_timestamp = 8;
  if (!(this->list_timestamp() <= 0 && this->list_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_list_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.SecurityStaticBasic)
  return target;
}

size_t SecurityStaticBasic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.SecurityStaticBasic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string list_time = 6;
  if (this->list_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_time());
  }

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 lot_size = 3;
  if (this->lot_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lot_size());
  }

  // int32 security_type = 4;
  if (this->security_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_security_type());
  }

  // double list_timestamp = 8;
  if (!(this->list_timestamp() <= 0 && this->list_timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  // bool delisting = 7;
  if (this->delisting() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityStaticBasic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.SecurityStaticBasic)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityStaticBasic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityStaticBasic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.SecurityStaticBasic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.SecurityStaticBasic)
    MergeFrom(*source);
  }
}

void SecurityStaticBasic::MergeFrom(const SecurityStaticBasic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.SecurityStaticBasic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.list_time().size() > 0) {
    _internal_set_list_time(from._internal_list_time());
  }
  if (from.has_security()) {
    _internal_mutable_security()->::Common::Basic::Security::MergeFrom(from._internal_security());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.lot_size() != 0) {
    _internal_set_lot_size(from._internal_lot_size());
  }
  if (from.security_type() != 0) {
    _internal_set_security_type(from._internal_security_type());
  }
  if (!(from.list_timestamp() <= 0 && from.list_timestamp() >= 0)) {
    _internal_set_list_timestamp(from._internal_list_timestamp());
  }
  if (from.delisting() != 0) {
    _internal_set_delisting(from._internal_delisting());
  }
}

void SecurityStaticBasic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.SecurityStaticBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityStaticBasic::CopyFrom(const SecurityStaticBasic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.SecurityStaticBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityStaticBasic::IsInitialized() const {
  return true;
}

void SecurityStaticBasic::InternalSwap(SecurityStaticBasic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  list_time_.Swap(&other->list_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityStaticBasic, delisting_)
      + sizeof(SecurityStaticBasic::delisting_)
      - PROTOBUF_FIELD_OFFSET(SecurityStaticBasic, security_)>(
          reinterpret_cast<char*>(&security_),
          reinterpret_cast<char*>(&other->security_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityStaticBasic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FutureStaticExData::_Internal {
 public:
};

FutureStaticExData::FutureStaticExData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.FutureStaticExData)
}
FutureStaticExData::FutureStaticExData(const FutureStaticExData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_trade_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_trade_time().empty()) {
    last_trade_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_trade_time(), 
      GetArena());
  }
  ::memcpy(&last_trade_timestamp_, &from.last_trade_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_main_contract_) -
    reinterpret_cast<char*>(&last_trade_timestamp_)) + sizeof(is_main_contract_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.FutureStaticExData)
}

void FutureStaticExData::SharedCtor() {
last_trade_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_trade_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_main_contract_) -
    reinterpret_cast<char*>(&last_trade_timestamp_)) + sizeof(is_main_contract_));
}

FutureStaticExData::~FutureStaticExData() {
  // @@protoc_insertion_point(destructor:Common.Basic.FutureStaticExData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FutureStaticExData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_trade_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FutureStaticExData::ArenaDtor(void* object) {
  FutureStaticExData* _this = reinterpret_cast< FutureStaticExData* >(object);
  (void)_this;
}
void FutureStaticExData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FutureStaticExData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FutureStaticExData::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.FutureStaticExData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_trade_time_.ClearToEmpty();
  ::memset(&last_trade_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_main_contract_) -
      reinterpret_cast<char*>(&last_trade_timestamp_)) + sizeof(is_main_contract_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutureStaticExData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string last_trade_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_last_trade_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.FutureStaticExData.last_trade_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double last_trade_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          last_trade_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_main_contract = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_main_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FutureStaticExData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.FutureStaticExData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string last_trade_time = 1;
  if (this->last_trade_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_trade_time().data(), static_cast<int>(this->_internal_last_trade_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.FutureStaticExData.last_trade_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_last_trade_time(), target);
  }

  // double last_trade_timestamp = 2;
  if (!(this->last_trade_timestamp() <= 0 && this->last_trade_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_last_trade_timestamp(), target);
  }

  // bool is_main_contract = 3;
  if (this->is_main_contract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_main_contract(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.FutureStaticExData)
  return target;
}

size_t FutureStaticExData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.FutureStaticExData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_trade_time = 1;
  if (this->last_trade_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_trade_time());
  }

  // double last_trade_timestamp = 2;
  if (!(this->last_trade_timestamp() <= 0 && this->last_trade_timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_main_contract = 3;
  if (this->is_main_contract() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureStaticExData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.FutureStaticExData)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureStaticExData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FutureStaticExData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.FutureStaticExData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.FutureStaticExData)
    MergeFrom(*source);
  }
}

void FutureStaticExData::MergeFrom(const FutureStaticExData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.FutureStaticExData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_trade_time().size() > 0) {
    _internal_set_last_trade_time(from._internal_last_trade_time());
  }
  if (!(from.last_trade_timestamp() <= 0 && from.last_trade_timestamp() >= 0)) {
    _internal_set_last_trade_timestamp(from._internal_last_trade_timestamp());
  }
  if (from.is_main_contract() != 0) {
    _internal_set_is_main_contract(from._internal_is_main_contract());
  }
}

void FutureStaticExData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.FutureStaticExData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureStaticExData::CopyFrom(const FutureStaticExData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.FutureStaticExData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureStaticExData::IsInitialized() const {
  return true;
}

void FutureStaticExData::InternalSwap(FutureStaticExData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  last_trade_time_.Swap(&other->last_trade_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FutureStaticExData, is_main_contract_)
      + sizeof(FutureStaticExData::is_main_contract_)
      - PROTOBUF_FIELD_OFFSET(FutureStaticExData, last_trade_timestamp_)>(
          reinterpret_cast<char*>(&last_trade_timestamp_),
          reinterpret_cast<char*>(&other->last_trade_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FutureStaticExData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SecurityStaticInfo::_Internal {
 public:
  static const ::Common::Basic::SecurityStaticBasic& basic(const SecurityStaticInfo* msg);
  static const ::Common::Basic::FutureStaticExData& future_exdata(const SecurityStaticInfo* msg);
  static const ::Common::Basic::HKSecurityStaticBasic& hk_basic(const SecurityStaticInfo* msg);
};

const ::Common::Basic::SecurityStaticBasic&
SecurityStaticInfo::_Internal::basic(const SecurityStaticInfo* msg) {
  return *msg->basic_;
}
const ::Common::Basic::FutureStaticExData&
SecurityStaticInfo::_Internal::future_exdata(const SecurityStaticInfo* msg) {
  return *msg->future_exdata_;
}
const ::Common::Basic::HKSecurityStaticBasic&
SecurityStaticInfo::_Internal::hk_basic(const SecurityStaticInfo* msg) {
  return *msg->hk_basic_;
}
SecurityStaticInfo::SecurityStaticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.SecurityStaticInfo)
}
SecurityStaticInfo::SecurityStaticInfo(const SecurityStaticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::Common::Basic::SecurityStaticBasic(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  if (from._internal_has_future_exdata()) {
    future_exdata_ = new ::Common::Basic::FutureStaticExData(*from.future_exdata_);
  } else {
    future_exdata_ = nullptr;
  }
  if (from._internal_has_hk_basic()) {
    hk_basic_ = new ::Common::Basic::HKSecurityStaticBasic(*from.hk_basic_);
  } else {
    hk_basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Common.Basic.SecurityStaticInfo)
}

void SecurityStaticInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&basic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hk_basic_) -
    reinterpret_cast<char*>(&basic_)) + sizeof(hk_basic_));
}

SecurityStaticInfo::~SecurityStaticInfo() {
  // @@protoc_insertion_point(destructor:Common.Basic.SecurityStaticInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityStaticInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basic_;
  if (this != internal_default_instance()) delete future_exdata_;
  if (this != internal_default_instance()) delete hk_basic_;
}

void SecurityStaticInfo::ArenaDtor(void* object) {
  SecurityStaticInfo* _this = reinterpret_cast< SecurityStaticInfo* >(object);
  (void)_this;
}
void SecurityStaticInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityStaticInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityStaticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.SecurityStaticInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  if (GetArena() == nullptr && future_exdata_ != nullptr) {
    delete future_exdata_;
  }
  future_exdata_ = nullptr;
  if (GetArena() == nullptr && hk_basic_ != nullptr) {
    delete hk_basic_;
  }
  hk_basic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityStaticInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common.Basic.SecurityStaticBasic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Common.Basic.FutureStaticExData future_exdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_future_exdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Common.Basic.HKSecurityStaticBasic hk_basic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hk_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityStaticInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.SecurityStaticInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Basic.SecurityStaticBasic basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // .Common.Basic.FutureStaticExData future_exdata = 2;
  if (this->has_future_exdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::future_exdata(this), target, stream);
  }

  // .Common.Basic.HKSecurityStaticBasic hk_basic = 3;
  if (this->has_hk_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hk_basic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.SecurityStaticInfo)
  return target;
}

size_t SecurityStaticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.SecurityStaticInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common.Basic.SecurityStaticBasic basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  // .Common.Basic.FutureStaticExData future_exdata = 2;
  if (this->has_future_exdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *future_exdata_);
  }

  // .Common.Basic.HKSecurityStaticBasic hk_basic = 3;
  if (this->has_hk_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hk_basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityStaticInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.SecurityStaticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityStaticInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityStaticInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.SecurityStaticInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.SecurityStaticInfo)
    MergeFrom(*source);
  }
}

void SecurityStaticInfo::MergeFrom(const SecurityStaticInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.SecurityStaticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basic()) {
    _internal_mutable_basic()->::Common::Basic::SecurityStaticBasic::MergeFrom(from._internal_basic());
  }
  if (from.has_future_exdata()) {
    _internal_mutable_future_exdata()->::Common::Basic::FutureStaticExData::MergeFrom(from._internal_future_exdata());
  }
  if (from.has_hk_basic()) {
    _internal_mutable_hk_basic()->::Common::Basic::HKSecurityStaticBasic::MergeFrom(from._internal_hk_basic());
  }
}

void SecurityStaticInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.SecurityStaticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityStaticInfo::CopyFrom(const SecurityStaticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.SecurityStaticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityStaticInfo::IsInitialized() const {
  return true;
}

void SecurityStaticInfo::InternalSwap(SecurityStaticInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityStaticInfo, hk_basic_)
      + sizeof(SecurityStaticInfo::hk_basic_)
      - PROTOBUF_FIELD_OFFSET(SecurityStaticInfo, basic_)>(
          reinterpret_cast<char*>(&basic_),
          reinterpret_cast<char*>(&other->basic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityStaticInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VCMTrigger::_Internal {
 public:
  static const ::Common::Basic::Security& security(const VCMTrigger* msg);
};

const ::Common::Basic::Security&
VCMTrigger::_Internal::security(const VCMTrigger* msg) {
  return *msg->security_;
}
VCMTrigger::VCMTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.VCMTrigger)
}
VCMTrigger::VCMTrigger(const VCMTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_security()) {
    security_ = new ::Common::Basic::Security(*from.security_);
  } else {
    security_ = nullptr;
  }
  ::memcpy(&coolingoff_starttime_, &from.coolingoff_starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcm_upper_price_) -
    reinterpret_cast<char*>(&coolingoff_starttime_)) + sizeof(vcm_upper_price_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.VCMTrigger)
}

void VCMTrigger::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vcm_upper_price_) -
    reinterpret_cast<char*>(&security_)) + sizeof(vcm_upper_price_));
}

VCMTrigger::~VCMTrigger() {
  // @@protoc_insertion_point(destructor:Common.Basic.VCMTrigger)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VCMTrigger::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete security_;
}

void VCMTrigger::ArenaDtor(void* object) {
  VCMTrigger* _this = reinterpret_cast< VCMTrigger* >(object);
  (void)_this;
}
void VCMTrigger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VCMTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VCMTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.VCMTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  ::memset(&coolingoff_starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vcm_upper_price_) -
      reinterpret_cast<char*>(&coolingoff_starttime_)) + sizeof(vcm_upper_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VCMTrigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common.Basic.Security security = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coolingoff_starttime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coolingoff_starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coolingoff_endtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coolingoff_endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vcm_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vcm_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vcm_lower_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vcm_lower_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vcm_upper_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          vcm_upper_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VCMTrigger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.VCMTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::security(this), target, stream);
  }

  // uint64 coolingoff_starttime = 2;
  if (this->coolingoff_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_coolingoff_starttime(), target);
  }

  // uint64 coolingoff_endtime = 3;
  if (this->coolingoff_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coolingoff_endtime(), target);
  }

  // uint32 vcm_price = 4;
  if (this->vcm_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vcm_price(), target);
  }

  // uint32 vcm_lower_price = 5;
  if (this->vcm_lower_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_vcm_lower_price(), target);
  }

  // uint32 vcm_upper_price = 6;
  if (this->vcm_upper_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_vcm_upper_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.VCMTrigger)
  return target;
}

size_t VCMTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.VCMTrigger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  // uint64 coolingoff_starttime = 2;
  if (this->coolingoff_starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coolingoff_starttime());
  }

  // uint64 coolingoff_endtime = 3;
  if (this->coolingoff_endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coolingoff_endtime());
  }

  // uint32 vcm_price = 4;
  if (this->vcm_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vcm_price());
  }

  // uint32 vcm_lower_price = 5;
  if (this->vcm_lower_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vcm_lower_price());
  }

  // uint32 vcm_upper_price = 6;
  if (this->vcm_upper_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vcm_upper_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VCMTrigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.VCMTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  const VCMTrigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VCMTrigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.VCMTrigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.VCMTrigger)
    MergeFrom(*source);
  }
}

void VCMTrigger::MergeFrom(const VCMTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.VCMTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_security()) {
    _internal_mutable_security()->::Common::Basic::Security::MergeFrom(from._internal_security());
  }
  if (from.coolingoff_starttime() != 0) {
    _internal_set_coolingoff_starttime(from._internal_coolingoff_starttime());
  }
  if (from.coolingoff_endtime() != 0) {
    _internal_set_coolingoff_endtime(from._internal_coolingoff_endtime());
  }
  if (from.vcm_price() != 0) {
    _internal_set_vcm_price(from._internal_vcm_price());
  }
  if (from.vcm_lower_price() != 0) {
    _internal_set_vcm_lower_price(from._internal_vcm_lower_price());
  }
  if (from.vcm_upper_price() != 0) {
    _internal_set_vcm_upper_price(from._internal_vcm_upper_price());
  }
}

void VCMTrigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.VCMTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VCMTrigger::CopyFrom(const VCMTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.VCMTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VCMTrigger::IsInitialized() const {
  return true;
}

void VCMTrigger::InternalSwap(VCMTrigger* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VCMTrigger, vcm_upper_price_)
      + sizeof(VCMTrigger::vcm_upper_price_)
      - PROTOBUF_FIELD_OFFSET(VCMTrigger, security_)>(
          reinterpret_cast<char*>(&security_),
          reinterpret_cast<char*>(&other->security_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VCMTrigger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RefPrice::_Internal {
 public:
  static const ::Common::Basic::Security& security(const RefPrice* msg);
};

const ::Common::Basic::Security&
RefPrice::_Internal::security(const RefPrice* msg) {
  return *msg->security_;
}
RefPrice::RefPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.RefPrice)
}
RefPrice::RefPrice(const RefPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_security()) {
    security_ = new ::Common::Basic::Security(*from.security_);
  } else {
    security_ = nullptr;
  }
  ::memcpy(&ref_price_, &from.ref_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_price_) -
    reinterpret_cast<char*>(&ref_price_)) + sizeof(upper_price_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.RefPrice)
}

void RefPrice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upper_price_) -
    reinterpret_cast<char*>(&security_)) + sizeof(upper_price_));
}

RefPrice::~RefPrice() {
  // @@protoc_insertion_point(destructor:Common.Basic.RefPrice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete security_;
}

void RefPrice::ArenaDtor(void* object) {
  RefPrice* _this = reinterpret_cast< RefPrice* >(object);
  (void)_this;
}
void RefPrice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RefPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.RefPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  ::memset(&ref_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_price_) -
      reinterpret_cast<char*>(&ref_price_)) + sizeof(upper_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefPrice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common.Basic.Security security = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ref_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ref_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lower_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lower_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 upper_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          upper_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefPrice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.RefPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::security(this), target, stream);
  }

  // uint32 ref_price = 2;
  if (this->ref_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ref_price(), target);
  }

  // uint32 lower_price = 3;
  if (this->lower_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lower_price(), target);
  }

  // uint32 upper_price = 4;
  if (this->upper_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_upper_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.RefPrice)
  return target;
}

size_t RefPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.RefPrice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  // uint32 ref_price = 2;
  if (this->ref_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ref_price());
  }

  // uint32 lower_price = 3;
  if (this->lower_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lower_price());
  }

  // uint32 upper_price = 4;
  if (this->upper_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_upper_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefPrice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.RefPrice)
  GOOGLE_DCHECK_NE(&from, this);
  const RefPrice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefPrice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.RefPrice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.RefPrice)
    MergeFrom(*source);
  }
}

void RefPrice::MergeFrom(const RefPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.RefPrice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_security()) {
    _internal_mutable_security()->::Common::Basic::Security::MergeFrom(from._internal_security());
  }
  if (from.ref_price() != 0) {
    _internal_set_ref_price(from._internal_ref_price());
  }
  if (from.lower_price() != 0) {
    _internal_set_lower_price(from._internal_lower_price());
  }
  if (from.upper_price() != 0) {
    _internal_set_upper_price(from._internal_upper_price());
  }
}

void RefPrice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.RefPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefPrice::CopyFrom(const RefPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.RefPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefPrice::IsInitialized() const {
  return true;
}

void RefPrice::InternalSwap(RefPrice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefPrice, upper_price_)
      + sizeof(RefPrice::upper_price_)
      - PROTOBUF_FIELD_OFFSET(RefPrice, security_)>(
          reinterpret_cast<char*>(&security_),
          reinterpret_cast<char*>(&other->security_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefPrice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradingSessionStatus::_Internal {
 public:
};

TradingSessionStatus::TradingSessionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.TradingSessionStatus)
}
TradingSessionStatus::TradingSessionStatus(const TradingSessionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(), 
      GetArena());
  }
  ::memcpy(&marketcode_, &from.marketcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&trading_session_status_) -
    reinterpret_cast<char*>(&marketcode_)) + sizeof(trading_session_status_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.TradingSessionStatus)
}

void TradingSessionStatus::SharedCtor() {
market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&marketcode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trading_session_status_) -
    reinterpret_cast<char*>(&marketcode_)) + sizeof(trading_session_status_));
}

TradingSessionStatus::~TradingSessionStatus() {
  // @@protoc_insertion_point(destructor:Common.Basic.TradingSessionStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradingSessionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradingSessionStatus::ArenaDtor(void* object) {
  TradingSessionStatus* _this = reinterpret_cast< TradingSessionStatus* >(object);
  (void)_this;
}
void TradingSessionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradingSessionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TradingSessionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.TradingSessionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmpty();
  ::memset(&marketcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_session_status_) -
      reinterpret_cast<char*>(&marketcode_)) + sizeof(trading_session_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingSessionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.TradingSessionStatus.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 marketcode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          marketcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 trading_session_subid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trading_session_subid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 trading_session_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trading_session_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_datetime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          start_datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_datetime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          end_datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradingSessionStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.TradingSessionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.TradingSessionStatus.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // uint32 marketcode = 2;
  if (this->marketcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_marketcode(), target);
  }

  // uint32 trading_session_subid = 3;
  if (this->trading_session_subid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_trading_session_subid(), target);
  }

  // uint32 trading_session_status = 4;
  if (this->trading_session_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_trading_session_status(), target);
  }

  // uint64 start_datetime = 5;
  if (this->start_datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_start_datetime(), target);
  }

  // uint64 end_datetime = 6;
  if (this->end_datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_end_datetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.TradingSessionStatus)
  return target;
}

size_t TradingSessionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.TradingSessionStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // uint32 marketcode = 2;
  if (this->marketcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_marketcode());
  }

  // uint32 trading_session_subid = 3;
  if (this->trading_session_subid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trading_session_subid());
  }

  // uint64 start_datetime = 5;
  if (this->start_datetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_datetime());
  }

  // uint64 end_datetime = 6;
  if (this->end_datetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_datetime());
  }

  // uint32 trading_session_status = 4;
  if (this->trading_session_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trading_session_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingSessionStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.TradingSessionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingSessionStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradingSessionStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.TradingSessionStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.TradingSessionStatus)
    MergeFrom(*source);
  }
}

void TradingSessionStatus::MergeFrom(const TradingSessionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.TradingSessionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (from.marketcode() != 0) {
    _internal_set_marketcode(from._internal_marketcode());
  }
  if (from.trading_session_subid() != 0) {
    _internal_set_trading_session_subid(from._internal_trading_session_subid());
  }
  if (from.start_datetime() != 0) {
    _internal_set_start_datetime(from._internal_start_datetime());
  }
  if (from.end_datetime() != 0) {
    _internal_set_end_datetime(from._internal_end_datetime());
  }
  if (from.trading_session_status() != 0) {
    _internal_set_trading_session_status(from._internal_trading_session_status());
  }
}

void TradingSessionStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.TradingSessionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingSessionStatus::CopyFrom(const TradingSessionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.TradingSessionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSessionStatus::IsInitialized() const {
  return true;
}

void TradingSessionStatus::InternalSwap(TradingSessionStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingSessionStatus, trading_session_status_)
      + sizeof(TradingSessionStatus::trading_session_status_)
      - PROTOBUF_FIELD_OFFSET(TradingSessionStatus, marketcode_)>(
          reinterpret_cast<char*>(&marketcode_),
          reinterpret_cast<char*>(&other->marketcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingSessionStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ticker::_Internal {
 public:
};

Ticker::Ticker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.Ticker)
}
Ticker::Ticker(const Ticker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_sign_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(type_sign_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.Ticker)
}

void Ticker::SharedCtor() {
time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequence_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_sign_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(type_sign_));
}

Ticker::~Ticker() {
  // @@protoc_insertion_point(destructor:Common.Basic.Ticker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ticker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ticker::ArenaDtor(void* object) {
  Ticker* _this = reinterpret_cast< Ticker* >(object);
  (void)_this;
}
void Ticker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ticker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ticker::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.Ticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmpty();
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_sign_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(type_sign_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ticker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.Ticker.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double recvTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          recvtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type_sign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          type_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ticker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.Ticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.Ticker.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // int64 sequence = 2;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sequence(), target);
  }

  // int32 dir = 3;
  if (this->dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dir(), target);
  }

  // double price = 4;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_price(), target);
  }

  // int64 volume = 5;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_volume(), target);
  }

  // double turnover = 6;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_turnover(), target);
  }

  // double recvTime = 7;
  if (!(this->recvtime() <= 0 && this->recvtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_recvtime(), target);
  }

  // int32 type = 8;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_type(), target);
  }

  // int32 type_sign = 9;
  if (this->type_sign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_type_sign(), target);
  }

  // double timestamp = 10;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.Ticker)
  return target;
}

size_t Ticker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.Ticker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // int64 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // double price = 4;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 volume = 5;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // int32 dir = 3;
  if (this->dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dir());
  }

  // int32 type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // double turnover = 6;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double recvTime = 7;
  if (!(this->recvtime() <= 0 && this->recvtime() >= 0)) {
    total_size += 1 + 8;
  }

  // double timestamp = 10;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 type_sign = 9;
  if (this->type_sign() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_sign());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ticker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.Ticker)
  GOOGLE_DCHECK_NE(&from, this);
  const Ticker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ticker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.Ticker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.Ticker)
    MergeFrom(*source);
  }
}

void Ticker::MergeFrom(const Ticker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.Ticker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.dir() != 0) {
    _internal_set_dir(from._internal_dir());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.recvtime() <= 0 && from.recvtime() >= 0)) {
    _internal_set_recvtime(from._internal_recvtime());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.type_sign() != 0) {
    _internal_set_type_sign(from._internal_type_sign());
  }
}

void Ticker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.Ticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ticker::CopyFrom(const Ticker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.Ticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ticker::IsInitialized() const {
  return true;
}

void Ticker::InternalSwap(Ticker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ticker, type_sign_)
      + sizeof(Ticker::type_sign_)
      - PROTOBUF_FIELD_OFFSET(Ticker, sequence_)>(
          reinterpret_cast<char*>(&sequence_),
          reinterpret_cast<char*>(&other->sequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ticker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Broker::_Internal {
 public:
};

Broker::Broker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.Broker)
}
Broker::Broker(const Broker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.Broker)
}

void Broker::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pos_));
}

Broker::~Broker() {
  // @@protoc_insertion_point(destructor:Common.Basic.Broker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Broker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Broker::ArenaDtor(void* object) {
  Broker* _this = reinterpret_cast< Broker* >(object);
  (void)_this;
}
void Broker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Broker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Broker::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.Broker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Broker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.Broker.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Broker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.Broker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.Broker.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.Broker)
  return target;
}

size_t Broker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.Broker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Broker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.Broker)
  GOOGLE_DCHECK_NE(&from, this);
  const Broker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Broker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.Broker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.Broker)
    MergeFrom(*source);
  }
}

void Broker::MergeFrom(const Broker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.Broker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
}

void Broker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.Broker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broker::CopyFrom(const Broker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.Broker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broker::IsInitialized() const {
  return true;
}

void Broker::InternalSwap(Broker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Broker, pos_)
      + sizeof(Broker::pos_)
      - PROTOBUF_FIELD_OFFSET(Broker, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Broker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Brokerlist::_Internal {
 public:
  static const ::Common::Basic::Security& security(const Brokerlist* msg);
};

const ::Common::Basic::Security&
Brokerlist::_Internal::security(const Brokerlist* msg) {
  return *msg->security_;
}
Brokerlist::Brokerlist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  broker_ask_list_(arena),
  broker_bid_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.Brokerlist)
}
Brokerlist::Brokerlist(const Brokerlist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      broker_ask_list_(from.broker_ask_list_),
      broker_bid_list_(from.broker_bid_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_security()) {
    security_ = new ::Common::Basic::Security(*from.security_);
  } else {
    security_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Common.Basic.Brokerlist)
}

void Brokerlist::SharedCtor() {
security_ = nullptr;
}

Brokerlist::~Brokerlist() {
  // @@protoc_insertion_point(destructor:Common.Basic.Brokerlist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Brokerlist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete security_;
}

void Brokerlist::ArenaDtor(void* object) {
  Brokerlist* _this = reinterpret_cast< Brokerlist* >(object);
  (void)_this;
}
void Brokerlist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Brokerlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Brokerlist::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.Brokerlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broker_ask_list_.Clear();
  broker_bid_list_.Clear();
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brokerlist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common.Basic.Security security = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Common.Basic.Broker broker_ask_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broker_ask_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Common.Basic.Broker broker_bid_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broker_bid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brokerlist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.Brokerlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::security(this), target, stream);
  }

  // repeated .Common.Basic.Broker broker_ask_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broker_ask_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_broker_ask_list(i), target, stream);
  }

  // repeated .Common.Basic.Broker broker_bid_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broker_bid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_broker_bid_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.Brokerlist)
  return target;
}

size_t Brokerlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.Brokerlist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.Basic.Broker broker_ask_list = 2;
  total_size += 1UL * this->_internal_broker_ask_list_size();
  for (const auto& msg : this->broker_ask_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Common.Basic.Broker broker_bid_list = 3;
  total_size += 1UL * this->_internal_broker_bid_list_size();
  for (const auto& msg : this->broker_bid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brokerlist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.Brokerlist)
  GOOGLE_DCHECK_NE(&from, this);
  const Brokerlist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brokerlist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.Brokerlist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.Brokerlist)
    MergeFrom(*source);
  }
}

void Brokerlist::MergeFrom(const Brokerlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.Brokerlist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broker_ask_list_.MergeFrom(from.broker_ask_list_);
  broker_bid_list_.MergeFrom(from.broker_bid_list_);
  if (from.has_security()) {
    _internal_mutable_security()->::Common::Basic::Security::MergeFrom(from._internal_security());
  }
}

void Brokerlist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.Brokerlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brokerlist::CopyFrom(const Brokerlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.Brokerlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brokerlist::IsInitialized() const {
  return true;
}

void Brokerlist::InternalSwap(Brokerlist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  broker_ask_list_.InternalSwap(&other->broker_ask_list_);
  broker_bid_list_.InternalSwap(&other->broker_bid_list_);
  swap(security_, other->security_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brokerlist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderBookDetail::_Internal {
 public:
};

OrderBookDetail::OrderBookDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.OrderBookDetail)
}
OrderBookDetail::OrderBookDetail(const OrderBookDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ask_price_, &from.ask_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&bid_volume_) -
    reinterpret_cast<char*>(&ask_price_)) + sizeof(bid_volume_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.OrderBookDetail)
}

void OrderBookDetail::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ask_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bid_volume_) -
    reinterpret_cast<char*>(&ask_price_)) + sizeof(bid_volume_));
}

OrderBookDetail::~OrderBookDetail() {
  // @@protoc_insertion_point(destructor:Common.Basic.OrderBookDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderBookDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderBookDetail::ArenaDtor(void* object) {
  OrderBookDetail* _this = reinterpret_cast< OrderBookDetail* >(object);
  (void)_this;
}
void OrderBookDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderBookDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderBookDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.OrderBookDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ask_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bid_volume_) -
      reinterpret_cast<char*>(&ask_price_)) + sizeof(bid_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderBookDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double ask_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 ask_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ask_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ask_order_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ask_order_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 bid_volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bid_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bid_order_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bid_order_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderBookDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.OrderBookDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ask_price = 1;
  if (!(this->ask_price() <= 0 && this->ask_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ask_price(), target);
  }

  // int64 ask_volume = 2;
  if (this->ask_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ask_volume(), target);
  }

  // int32 ask_order_count = 3;
  if (this->ask_order_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ask_order_count(), target);
  }

  // double bid_price = 4;
  if (!(this->bid_price() <= 0 && this->bid_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_bid_price(), target);
  }

  // int64 bid_volume = 5;
  if (this->bid_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_bid_volume(), target);
  }

  // int32 bid_order_count = 6;
  if (this->bid_order_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bid_order_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.OrderBookDetail)
  return target;
}

size_t OrderBookDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.OrderBookDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ask_price = 1;
  if (!(this->ask_price() <= 0 && this->ask_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 ask_volume = 2;
  if (this->ask_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ask_volume());
  }

  // double bid_price = 4;
  if (!(this->bid_price() <= 0 && this->bid_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 ask_order_count = 3;
  if (this->ask_order_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_order_count());
  }

  // int32 bid_order_count = 6;
  if (this->bid_order_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_order_count());
  }

  // int64 bid_volume = 5;
  if (this->bid_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bid_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBookDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.OrderBookDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBookDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderBookDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.OrderBookDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.OrderBookDetail)
    MergeFrom(*source);
  }
}

void OrderBookDetail::MergeFrom(const OrderBookDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.OrderBookDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ask_price() <= 0 && from.ask_price() >= 0)) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from.ask_volume() != 0) {
    _internal_set_ask_volume(from._internal_ask_volume());
  }
  if (!(from.bid_price() <= 0 && from.bid_price() >= 0)) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (from.ask_order_count() != 0) {
    _internal_set_ask_order_count(from._internal_ask_order_count());
  }
  if (from.bid_order_count() != 0) {
    _internal_set_bid_order_count(from._internal_bid_order_count());
  }
  if (from.bid_volume() != 0) {
    _internal_set_bid_volume(from._internal_bid_volume());
  }
}

void OrderBookDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.OrderBookDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBookDetail::CopyFrom(const OrderBookDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.OrderBookDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBookDetail::IsInitialized() const {
  return true;
}

void OrderBookDetail::InternalSwap(OrderBookDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBookDetail, bid_volume_)
      + sizeof(OrderBookDetail::bid_volume_)
      - PROTOBUF_FIELD_OFFSET(OrderBookDetail, ask_price_)>(
          reinterpret_cast<char*>(&ask_price_),
          reinterpret_cast<char*>(&other->ask_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBookDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderBook::_Internal {
 public:
  static const ::Common::Basic::Security& security(const OrderBook* msg);
};

const ::Common::Basic::Security&
OrderBook::_Internal::security(const OrderBook* msg) {
  return *msg->security_;
}
OrderBook::OrderBook(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detail_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.OrderBook)
}
OrderBook::OrderBook(const OrderBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detail_list_(from.detail_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_security()) {
    security_ = new ::Common::Basic::Security(*from.security_);
  } else {
    security_ = nullptr;
  }
  ::memcpy(&update_time_, &from.update_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_level_count_) -
    reinterpret_cast<char*>(&update_time_)) + sizeof(order_level_count_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.OrderBook)
}

void OrderBook::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_level_count_) -
    reinterpret_cast<char*>(&security_)) + sizeof(order_level_count_));
}

OrderBook::~OrderBook() {
  // @@protoc_insertion_point(destructor:Common.Basic.OrderBook)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderBook::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete security_;
}

void OrderBook::ArenaDtor(void* object) {
  OrderBook* _this = reinterpret_cast< OrderBook* >(object);
  (void)_this;
}
void OrderBook::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderBook::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.OrderBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_list_.Clear();
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  ::memset(&update_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_level_count_) -
      reinterpret_cast<char*>(&update_time_)) + sizeof(order_level_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common.Basic.Security security = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 order_level_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          order_level_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 update_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Common.Basic.OrderBookDetail detail_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detail_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderBook::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.OrderBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::security(this), target, stream);
  }

  // int32 order_level_count = 2;
  if (this->order_level_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_order_level_count(), target);
  }

  // uint64 update_time = 3;
  if (this->update_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_update_time(), target);
  }

  // repeated .Common.Basic.OrderBookDetail detail_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detail_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_detail_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.OrderBook)
  return target;
}

size_t OrderBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.OrderBook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.Basic.OrderBookDetail detail_list = 4;
  total_size += 1UL * this->_internal_detail_list_size();
  for (const auto& msg : this->detail_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Common.Basic.Security security = 1;
  if (this->has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  // uint64 update_time = 3;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_update_time());
  }

  // int32 order_level_count = 2;
  if (this->order_level_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order_level_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.OrderBook)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderBook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.OrderBook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.OrderBook)
    MergeFrom(*source);
  }
}

void OrderBook::MergeFrom(const OrderBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.OrderBook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_list_.MergeFrom(from.detail_list_);
  if (from.has_security()) {
    _internal_mutable_security()->::Common::Basic::Security::MergeFrom(from._internal_security());
  }
  if (from.update_time() != 0) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (from.order_level_count() != 0) {
    _internal_set_order_level_count(from._internal_order_level_count());
  }
}

void OrderBook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.OrderBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBook::CopyFrom(const OrderBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.OrderBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBook::IsInitialized() const {
  return true;
}

void OrderBook::InternalSwap(OrderBook* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detail_list_.InternalSwap(&other->detail_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBook, order_level_count_)
      + sizeof(OrderBook::order_level_count_)
      - PROTOBUF_FIELD_OFFSET(OrderBook, security_)>(
          reinterpret_cast<char*>(&security_),
          reinterpret_cast<char*>(&other->security_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBook::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlateInfo::_Internal {
 public:
  static const ::Common::Basic::Security& plate(const PlateInfo* msg);
};

const ::Common::Basic::Security&
PlateInfo::_Internal::plate(const PlateInfo* msg) {
  return *msg->plate_;
}
PlateInfo::PlateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.PlateInfo)
}
PlateInfo::PlateInfo(const PlateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_plate()) {
    plate_ = new ::Common::Basic::Security(*from.plate_);
  } else {
    plate_ = nullptr;
  }
  plate_type_ = from.plate_type_;
  // @@protoc_insertion_point(copy_constructor:Common.Basic.PlateInfo)
}

void PlateInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&plate_type_) -
    reinterpret_cast<char*>(&plate_)) + sizeof(plate_type_));
}

PlateInfo::~PlateInfo() {
  // @@protoc_insertion_point(destructor:Common.Basic.PlateInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plate_;
}

void PlateInfo::ArenaDtor(void* object) {
  PlateInfo* _this = reinterpret_cast< PlateInfo* >(object);
  (void)_this;
}
void PlateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.PlateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && plate_ != nullptr) {
    delete plate_;
  }
  plate_ = nullptr;
  plate_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common.Basic.Security plate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.PlateInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 plate_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          plate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.PlateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Basic.Security plate = 1;
  if (this->has_plate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plate(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.PlateInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 plate_type = 3;
  if (this->plate_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_plate_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.PlateInfo)
  return target;
}

size_t PlateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.PlateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Common.Basic.Security plate = 1;
  if (this->has_plate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plate_);
  }

  // int32 plate_type = 3;
  if (this->plate_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plate_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.PlateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.PlateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.PlateInfo)
    MergeFrom(*source);
  }
}

void PlateInfo::MergeFrom(const PlateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.PlateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_plate()) {
    _internal_mutable_plate()->::Common::Basic::Security::MergeFrom(from._internal_plate());
  }
  if (from.plate_type() != 0) {
    _internal_set_plate_type(from._internal_plate_type());
  }
}

void PlateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.PlateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateInfo::CopyFrom(const PlateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.PlateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateInfo::IsInitialized() const {
  return true;
}

void PlateInfo::InternalSwap(PlateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlateInfo, plate_type_)
      + sizeof(PlateInfo::plate_type_)
      - PROTOBUF_FIELD_OFFSET(PlateInfo, plate_)>(
          reinterpret_cast<char*>(&plate_),
          reinterpret_cast<char*>(&other->plate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Rehab::_Internal {
 public:
};

Rehab::Rehab(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.Rehab)
}
Rehab::Rehab(const Rehab& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  ::memcpy(&company_act_flag_, &from.company_act_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&company_act_flag_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.Rehab)
}

void Rehab::SharedCtor() {
time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&company_act_flag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&company_act_flag_)) + sizeof(timestamp_));
}

Rehab::~Rehab() {
  // @@protoc_insertion_point(destructor:Common.Basic.Rehab)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rehab::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rehab::ArenaDtor(void* object) {
  Rehab* _this = reinterpret_cast< Rehab* >(object);
  (void)_this;
}
void Rehab::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rehab::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rehab::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.Rehab)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmpty();
  ::memset(&company_act_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&company_act_flag_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rehab::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.Rehab.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 company_act_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          company_act_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fwd_factor_A = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          fwd_factor_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fwd_factor_B = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fwd_factor_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bwd_factor_A = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          bwd_factor_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bwd_factor_B = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          bwd_factor_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 split_base = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          split_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 split = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          split_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 join_base = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          join_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 join = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bonus_base = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          bonus_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bonus = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transfer_base = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          transfer_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transfer = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          transfer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 allot_base = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          allot_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 allot = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          allot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double allot_price = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          allot_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 add_base = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          add_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double add_price = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          add_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dividend = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          dividend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double special_dividend = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          special_dividend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double timestamp = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rehab::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.Rehab)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.Rehab.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // int64 company_act_flag = 2;
  if (this->company_act_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_company_act_flag(), target);
  }

  // double fwd_factor_A = 3;
  if (!(this->fwd_factor_a() <= 0 && this->fwd_factor_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fwd_factor_a(), target);
  }

  // double fwd_factor_B = 4;
  if (!(this->fwd_factor_b() <= 0 && this->fwd_factor_b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fwd_factor_b(), target);
  }

  // double bwd_factor_A = 5;
  if (!(this->bwd_factor_a() <= 0 && this->bwd_factor_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_bwd_factor_a(), target);
  }

  // double bwd_factor_B = 6;
  if (!(this->bwd_factor_b() <= 0 && this->bwd_factor_b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_bwd_factor_b(), target);
  }

  // int32 split_base = 7;
  if (this->split_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_split_base(), target);
  }

  // int32 split = 8;
  if (this->split() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_split(), target);
  }

  // int32 join_base = 9;
  if (this->join_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_join_base(), target);
  }

  // int32 join = 10;
  if (this->join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_join(), target);
  }

  // int32 bonus_base = 11;
  if (this->bonus_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_bonus_base(), target);
  }

  // int32 bonus = 12;
  if (this->bonus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_bonus(), target);
  }

  // int32 transfer_base = 13;
  if (this->transfer_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_transfer_base(), target);
  }

  // int32 transfer = 14;
  if (this->transfer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_transfer(), target);
  }

  // int32 allot_base = 15;
  if (this->allot_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_allot_base(), target);
  }

  // int32 allot = 16;
  if (this->allot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_allot(), target);
  }

  // double allot_price = 17;
  if (!(this->allot_price() <= 0 && this->allot_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_allot_price(), target);
  }

  // int32 add_base = 18;
  if (this->add_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_add_base(), target);
  }

  // int32 add = 19;
  if (this->add() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_add(), target);
  }

  // double add_price = 20;
  if (!(this->add_price() <= 0 && this->add_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_add_price(), target);
  }

  // double dividend = 21;
  if (!(this->dividend() <= 0 && this->dividend() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_dividend(), target);
  }

  // double special_dividend = 22;
  if (!(this->special_dividend() <= 0 && this->special_dividend() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_special_dividend(), target);
  }

  // double timestamp = 23;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.Rehab)
  return target;
}

size_t Rehab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.Rehab)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // int64 company_act_flag = 2;
  if (this->company_act_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_company_act_flag());
  }

  // double fwd_factor_A = 3;
  if (!(this->fwd_factor_a() <= 0 && this->fwd_factor_a() >= 0)) {
    total_size += 1 + 8;
  }

  // double fwd_factor_B = 4;
  if (!(this->fwd_factor_b() <= 0 && this->fwd_factor_b() >= 0)) {
    total_size += 1 + 8;
  }

  // double bwd_factor_A = 5;
  if (!(this->bwd_factor_a() <= 0 && this->bwd_factor_a() >= 0)) {
    total_size += 1 + 8;
  }

  // double bwd_factor_B = 6;
  if (!(this->bwd_factor_b() <= 0 && this->bwd_factor_b() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 split_base = 7;
  if (this->split_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_base());
  }

  // int32 split = 8;
  if (this->split() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split());
  }

  // int32 join_base = 9;
  if (this->join_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_join_base());
  }

  // int32 join = 10;
  if (this->join() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_join());
  }

  // int32 bonus_base = 11;
  if (this->bonus_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bonus_base());
  }

  // int32 bonus = 12;
  if (this->bonus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bonus());
  }

  // int32 transfer_base = 13;
  if (this->transfer_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transfer_base());
  }

  // int32 transfer = 14;
  if (this->transfer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transfer());
  }

  // int32 allot_base = 15;
  if (this->allot_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_allot_base());
  }

  // int32 allot = 16;
  if (this->allot() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_allot());
  }

  // double allot_price = 17;
  if (!(this->allot_price() <= 0 && this->allot_price() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 add_base = 18;
  if (this->add_base() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_base());
  }

  // int32 add = 19;
  if (this->add() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add());
  }

  // double add_price = 20;
  if (!(this->add_price() <= 0 && this->add_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double dividend = 21;
  if (!(this->dividend() <= 0 && this->dividend() >= 0)) {
    total_size += 2 + 8;
  }

  // double special_dividend = 22;
  if (!(this->special_dividend() <= 0 && this->special_dividend() >= 0)) {
    total_size += 2 + 8;
  }

  // double timestamp = 23;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rehab::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.Rehab)
  GOOGLE_DCHECK_NE(&from, this);
  const Rehab* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rehab>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.Rehab)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.Rehab)
    MergeFrom(*source);
  }
}

void Rehab::MergeFrom(const Rehab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.Rehab)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.company_act_flag() != 0) {
    _internal_set_company_act_flag(from._internal_company_act_flag());
  }
  if (!(from.fwd_factor_a() <= 0 && from.fwd_factor_a() >= 0)) {
    _internal_set_fwd_factor_a(from._internal_fwd_factor_a());
  }
  if (!(from.fwd_factor_b() <= 0 && from.fwd_factor_b() >= 0)) {
    _internal_set_fwd_factor_b(from._internal_fwd_factor_b());
  }
  if (!(from.bwd_factor_a() <= 0 && from.bwd_factor_a() >= 0)) {
    _internal_set_bwd_factor_a(from._internal_bwd_factor_a());
  }
  if (!(from.bwd_factor_b() <= 0 && from.bwd_factor_b() >= 0)) {
    _internal_set_bwd_factor_b(from._internal_bwd_factor_b());
  }
  if (from.split_base() != 0) {
    _internal_set_split_base(from._internal_split_base());
  }
  if (from.split() != 0) {
    _internal_set_split(from._internal_split());
  }
  if (from.join_base() != 0) {
    _internal_set_join_base(from._internal_join_base());
  }
  if (from.join() != 0) {
    _internal_set_join(from._internal_join());
  }
  if (from.bonus_base() != 0) {
    _internal_set_bonus_base(from._internal_bonus_base());
  }
  if (from.bonus() != 0) {
    _internal_set_bonus(from._internal_bonus());
  }
  if (from.transfer_base() != 0) {
    _internal_set_transfer_base(from._internal_transfer_base());
  }
  if (from.transfer() != 0) {
    _internal_set_transfer(from._internal_transfer());
  }
  if (from.allot_base() != 0) {
    _internal_set_allot_base(from._internal_allot_base());
  }
  if (from.allot() != 0) {
    _internal_set_allot(from._internal_allot());
  }
  if (!(from.allot_price() <= 0 && from.allot_price() >= 0)) {
    _internal_set_allot_price(from._internal_allot_price());
  }
  if (from.add_base() != 0) {
    _internal_set_add_base(from._internal_add_base());
  }
  if (from.add() != 0) {
    _internal_set_add(from._internal_add());
  }
  if (!(from.add_price() <= 0 && from.add_price() >= 0)) {
    _internal_set_add_price(from._internal_add_price());
  }
  if (!(from.dividend() <= 0 && from.dividend() >= 0)) {
    _internal_set_dividend(from._internal_dividend());
  }
  if (!(from.special_dividend() <= 0 && from.special_dividend() >= 0)) {
    _internal_set_special_dividend(from._internal_special_dividend());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Rehab::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.Rehab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rehab::CopyFrom(const Rehab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.Rehab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rehab::IsInitialized() const {
  return true;
}

void Rehab::InternalSwap(Rehab* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rehab, timestamp_)
      + sizeof(Rehab::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Rehab, company_act_flag_)>(
          reinterpret_cast<char*>(&company_act_flag_),
          reinterpret_cast<char*>(&other->company_act_flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rehab::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CapitalFlow::_Internal {
 public:
};

CapitalFlow::CapitalFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.CapitalFlow)
}
CapitalFlow::CapitalFlow(const CapitalFlow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_update_time().empty()) {
    update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update_time(), 
      GetArena());
  }
  ::memcpy(&capital_in_big_, &from.capital_in_big_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_timestamp_) -
    reinterpret_cast<char*>(&capital_in_big_)) + sizeof(update_timestamp_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.CapitalFlow)
}

void CapitalFlow::SharedCtor() {
update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capital_in_big_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_timestamp_) -
    reinterpret_cast<char*>(&capital_in_big_)) + sizeof(update_timestamp_));
}

CapitalFlow::~CapitalFlow() {
  // @@protoc_insertion_point(destructor:Common.Basic.CapitalFlow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapitalFlow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  update_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CapitalFlow::ArenaDtor(void* object) {
  CapitalFlow* _this = reinterpret_cast< CapitalFlow* >(object);
  (void)_this;
}
void CapitalFlow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapitalFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CapitalFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.CapitalFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_time_.ClearToEmpty();
  ::memset(&capital_in_big_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_timestamp_) -
      reinterpret_cast<char*>(&capital_in_big_)) + sizeof(update_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapitalFlow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double capital_in_big = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          capital_in_big_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double capital_in_mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          capital_in_mid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double capital_in_small = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          capital_in_small_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double capital_out_big = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          capital_out_big_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double capital_out_mid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          capital_out_mid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double capital_out_small = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          capital_out_small_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string update_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_update_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.CapitalFlow.update_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double update_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          update_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapitalFlow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.CapitalFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double capital_in_big = 1;
  if (!(this->capital_in_big() <= 0 && this->capital_in_big() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_capital_in_big(), target);
  }

  // double capital_in_mid = 2;
  if (!(this->capital_in_mid() <= 0 && this->capital_in_mid() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_capital_in_mid(), target);
  }

  // double capital_in_small = 3;
  if (!(this->capital_in_small() <= 0 && this->capital_in_small() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_capital_in_small(), target);
  }

  // double capital_out_big = 4;
  if (!(this->capital_out_big() <= 0 && this->capital_out_big() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_capital_out_big(), target);
  }

  // double capital_out_mid = 5;
  if (!(this->capital_out_mid() <= 0 && this->capital_out_mid() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_capital_out_mid(), target);
  }

  // double capital_out_small = 6;
  if (!(this->capital_out_small() <= 0 && this->capital_out_small() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_capital_out_small(), target);
  }

  // string update_time = 7;
  if (this->update_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.CapitalFlow.update_time");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_update_time(), target);
  }

  // double update_timestamp = 8;
  if (!(this->update_timestamp() <= 0 && this->update_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_update_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.CapitalFlow)
  return target;
}

size_t CapitalFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.CapitalFlow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string update_time = 7;
  if (this->update_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // double capital_in_big = 1;
  if (!(this->capital_in_big() <= 0 && this->capital_in_big() >= 0)) {
    total_size += 1 + 8;
  }

  // double capital_in_mid = 2;
  if (!(this->capital_in_mid() <= 0 && this->capital_in_mid() >= 0)) {
    total_size += 1 + 8;
  }

  // double capital_in_small = 3;
  if (!(this->capital_in_small() <= 0 && this->capital_in_small() >= 0)) {
    total_size += 1 + 8;
  }

  // double capital_out_big = 4;
  if (!(this->capital_out_big() <= 0 && this->capital_out_big() >= 0)) {
    total_size += 1 + 8;
  }

  // double capital_out_mid = 5;
  if (!(this->capital_out_mid() <= 0 && this->capital_out_mid() >= 0)) {
    total_size += 1 + 8;
  }

  // double capital_out_small = 6;
  if (!(this->capital_out_small() <= 0 && this->capital_out_small() >= 0)) {
    total_size += 1 + 8;
  }

  // double update_timestamp = 8;
  if (!(this->update_timestamp() <= 0 && this->update_timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapitalFlow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.CapitalFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const CapitalFlow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapitalFlow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.CapitalFlow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.CapitalFlow)
    MergeFrom(*source);
  }
}

void CapitalFlow::MergeFrom(const CapitalFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.CapitalFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_time().size() > 0) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (!(from.capital_in_big() <= 0 && from.capital_in_big() >= 0)) {
    _internal_set_capital_in_big(from._internal_capital_in_big());
  }
  if (!(from.capital_in_mid() <= 0 && from.capital_in_mid() >= 0)) {
    _internal_set_capital_in_mid(from._internal_capital_in_mid());
  }
  if (!(from.capital_in_small() <= 0 && from.capital_in_small() >= 0)) {
    _internal_set_capital_in_small(from._internal_capital_in_small());
  }
  if (!(from.capital_out_big() <= 0 && from.capital_out_big() >= 0)) {
    _internal_set_capital_out_big(from._internal_capital_out_big());
  }
  if (!(from.capital_out_mid() <= 0 && from.capital_out_mid() >= 0)) {
    _internal_set_capital_out_mid(from._internal_capital_out_mid());
  }
  if (!(from.capital_out_small() <= 0 && from.capital_out_small() >= 0)) {
    _internal_set_capital_out_small(from._internal_capital_out_small());
  }
  if (!(from.update_timestamp() <= 0 && from.update_timestamp() >= 0)) {
    _internal_set_update_timestamp(from._internal_update_timestamp());
  }
}

void CapitalFlow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.CapitalFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapitalFlow::CopyFrom(const CapitalFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.CapitalFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapitalFlow::IsInitialized() const {
  return true;
}

void CapitalFlow::InternalSwap(CapitalFlow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  update_time_.Swap(&other->update_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapitalFlow, update_timestamp_)
      + sizeof(CapitalFlow::update_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CapitalFlow, capital_in_big_)>(
          reinterpret_cast<char*>(&capital_in_big_),
          reinterpret_cast<char*>(&other->capital_in_big_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapitalFlow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KLine::_Internal {
 public:
};

KLine::KLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.KLine)
}
KLine::KLine(const KLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  ::memcpy(&high_price_, &from.high_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_blank_) -
    reinterpret_cast<char*>(&high_price_)) + sizeof(is_blank_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.KLine)
}

void KLine::SharedCtor() {
time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_blank_) -
    reinterpret_cast<char*>(&high_price_)) + sizeof(is_blank_));
}

KLine::~KLine() {
  // @@protoc_insertion_point(destructor:Common.Basic.KLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KLine::ArenaDtor(void* object) {
  KLine* _this = reinterpret_cast< KLine* >(object);
  (void)_this;
}
void KLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KLine::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.KLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmpty();
  ::memset(&high_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_blank_) -
      reinterpret_cast<char*>(&high_price_)) + sizeof(is_blank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.KLine.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_blank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_blank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double high_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          high_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double open_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          open_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          low_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double last_close_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          last_close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double turnover_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          turnover_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pe = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          pe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double change_rate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          change_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.KLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.KLine.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // bool is_blank = 2;
  if (this->is_blank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_blank(), target);
  }

  // double high_price = 3;
  if (!(this->high_price() <= 0 && this->high_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_high_price(), target);
  }

  // double open_price = 4;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_open_price(), target);
  }

  // double low_price = 5;
  if (!(this->low_price() <= 0 && this->low_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_low_price(), target);
  }

  // double close_price = 6;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_close_price(), target);
  }

  // double last_close_price = 7;
  if (!(this->last_close_price() <= 0 && this->last_close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_last_close_price(), target);
  }

  // int64 volume = 8;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_volume(), target);
  }

  // double turnover = 9;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_turnover(), target);
  }

  // double turnover_rate = 10;
  if (!(this->turnover_rate() <= 0 && this->turnover_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_turnover_rate(), target);
  }

  // double pe = 11;
  if (!(this->pe() <= 0 && this->pe() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_pe(), target);
  }

  // double change_rate = 12;
  if (!(this->change_rate() <= 0 && this->change_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_change_rate(), target);
  }

  // double timestamp = 13;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.KLine)
  return target;
}

size_t KLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.KLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // double high_price = 3;
  if (!(this->high_price() <= 0 && this->high_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double open_price = 4;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double low_price = 5;
  if (!(this->low_price() <= 0 && this->low_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_price = 6;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_close_price = 7;
  if (!(this->last_close_price() <= 0 && this->last_close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 volume = 8;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // double turnover = 9;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double turnover_rate = 10;
  if (!(this->turnover_rate() <= 0 && this->turnover_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double pe = 11;
  if (!(this->pe() <= 0 && this->pe() >= 0)) {
    total_size += 1 + 8;
  }

  // double change_rate = 12;
  if (!(this->change_rate() <= 0 && this->change_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double timestamp = 13;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_blank = 2;
  if (this->is_blank() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.KLine)
  GOOGLE_DCHECK_NE(&from, this);
  const KLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.KLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.KLine)
    MergeFrom(*source);
  }
}

void KLine::MergeFrom(const KLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.KLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.high_price() <= 0 && from.high_price() >= 0)) {
    _internal_set_high_price(from._internal_high_price());
  }
  if (!(from.open_price() <= 0 && from.open_price() >= 0)) {
    _internal_set_open_price(from._internal_open_price());
  }
  if (!(from.low_price() <= 0 && from.low_price() >= 0)) {
    _internal_set_low_price(from._internal_low_price());
  }
  if (!(from.close_price() <= 0 && from.close_price() >= 0)) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (!(from.last_close_price() <= 0 && from.last_close_price() >= 0)) {
    _internal_set_last_close_price(from._internal_last_close_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.turnover_rate() <= 0 && from.turnover_rate() >= 0)) {
    _internal_set_turnover_rate(from._internal_turnover_rate());
  }
  if (!(from.pe() <= 0 && from.pe() >= 0)) {
    _internal_set_pe(from._internal_pe());
  }
  if (!(from.change_rate() <= 0 && from.change_rate() >= 0)) {
    _internal_set_change_rate(from._internal_change_rate());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.is_blank() != 0) {
    _internal_set_is_blank(from._internal_is_blank());
  }
}

void KLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.KLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KLine::CopyFrom(const KLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.KLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KLine::IsInitialized() const {
  return true;
}

void KLine::InternalSwap(KLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KLine, is_blank_)
      + sizeof(KLine::is_blank_)
      - PROTOBUF_FIELD_OFFSET(KLine, high_price_)>(
          reinterpret_cast<char*>(&high_price_),
          reinterpret_cast<char*>(&other->high_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeShare::_Internal {
 public:
};

TimeShare::TimeShare(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.Basic.TimeShare)
}
TimeShare::TimeShare(const TimeShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:Common.Basic.TimeShare)
}

void TimeShare::SharedCtor() {
time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
}

TimeShare::~TimeShare() {
  // @@protoc_insertion_point(destructor:Common.Basic.TimeShare)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeShare::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimeShare::ArenaDtor(void* object) {
  TimeShare* _this = reinterpret_cast< TimeShare* >(object);
  (void)_this;
}
void TimeShare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeShare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeShare::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Basic.TimeShare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmpty();
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeShare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.Basic.TimeShare.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_blank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_blank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double last_close_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          last_close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double avg_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          avg_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double timestamp = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeShare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Basic.TimeShare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.Basic.TimeShare.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // bool is_blank = 2;
  if (this->is_blank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_blank(), target);
  }

  // double price = 3;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_price(), target);
  }

  // double last_close_price = 4;
  if (!(this->last_close_price() <= 0 && this->last_close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_last_close_price(), target);
  }

  // double avg_price = 5;
  if (!(this->avg_price() <= 0 && this->avg_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_avg_price(), target);
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_volume(), target);
  }

  // double turnover = 7;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_turnover(), target);
  }

  // double timestamp = 98;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(98, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Basic.TimeShare)
  return target;
}

size_t TimeShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Basic.TimeShare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // double price = 3;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_close_price = 4;
  if (!(this->last_close_price() <= 0 && this->last_close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double avg_price = 5;
  if (!(this->avg_price() <= 0 && this->avg_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // double turnover = 7;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_blank = 2;
  if (this->is_blank() != 0) {
    total_size += 1 + 1;
  }

  // double timestamp = 98;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeShare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.Basic.TimeShare)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeShare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeShare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.Basic.TimeShare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.Basic.TimeShare)
    MergeFrom(*source);
  }
}

void TimeShare::MergeFrom(const TimeShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.Basic.TimeShare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.last_close_price() <= 0 && from.last_close_price() >= 0)) {
    _internal_set_last_close_price(from._internal_last_close_price());
  }
  if (!(from.avg_price() <= 0 && from.avg_price() >= 0)) {
    _internal_set_avg_price(from._internal_avg_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (from.is_blank() != 0) {
    _internal_set_is_blank(from._internal_is_blank());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void TimeShare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.Basic.TimeShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeShare::CopyFrom(const TimeShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Basic.TimeShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeShare::IsInitialized() const {
  return true;
}

void TimeShare::InternalSwap(TimeShare* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeShare, timestamp_)
      + sizeof(TimeShare::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TimeShare, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeShare::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Common::Basic::Security* Arena::CreateMaybeMessage< ::Common::Basic::Security >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::Security >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::PreAfterMarketData* Arena::CreateMaybeMessage< ::Common::Basic::PreAfterMarketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::PreAfterMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::FutureBasicQotExData* Arena::CreateMaybeMessage< ::Common::Basic::FutureBasicQotExData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::FutureBasicQotExData >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::BasicQot* Arena::CreateMaybeMessage< ::Common::Basic::BasicQot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::BasicQot >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::HKSecurityStaticBasic* Arena::CreateMaybeMessage< ::Common::Basic::HKSecurityStaticBasic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::HKSecurityStaticBasic >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::SecurityStaticBasic* Arena::CreateMaybeMessage< ::Common::Basic::SecurityStaticBasic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::SecurityStaticBasic >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::FutureStaticExData* Arena::CreateMaybeMessage< ::Common::Basic::FutureStaticExData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::FutureStaticExData >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::SecurityStaticInfo* Arena::CreateMaybeMessage< ::Common::Basic::SecurityStaticInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::SecurityStaticInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::VCMTrigger* Arena::CreateMaybeMessage< ::Common::Basic::VCMTrigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::VCMTrigger >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::RefPrice* Arena::CreateMaybeMessage< ::Common::Basic::RefPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::RefPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::TradingSessionStatus* Arena::CreateMaybeMessage< ::Common::Basic::TradingSessionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::TradingSessionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::Ticker* Arena::CreateMaybeMessage< ::Common::Basic::Ticker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::Ticker >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::Broker* Arena::CreateMaybeMessage< ::Common::Basic::Broker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::Broker >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::Brokerlist* Arena::CreateMaybeMessage< ::Common::Basic::Brokerlist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::Brokerlist >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::OrderBookDetail* Arena::CreateMaybeMessage< ::Common::Basic::OrderBookDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::OrderBookDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::OrderBook* Arena::CreateMaybeMessage< ::Common::Basic::OrderBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::OrderBook >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::PlateInfo* Arena::CreateMaybeMessage< ::Common::Basic::PlateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::PlateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::Rehab* Arena::CreateMaybeMessage< ::Common::Basic::Rehab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::Rehab >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::CapitalFlow* Arena::CreateMaybeMessage< ::Common::Basic::CapitalFlow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::CapitalFlow >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::KLine* Arena::CreateMaybeMessage< ::Common::Basic::KLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::KLine >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Basic::TimeShare* Arena::CreateMaybeMessage< ::Common::Basic::TimeShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Basic::TimeShare >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
