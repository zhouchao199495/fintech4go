// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuoteRPC.proto

#include "QuoteRPC.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Common {
namespace RPC {
constexpr QuoteRequest::QuoteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_()
  , _types_cached_byte_size_(){}
struct QuoteRequestDefaultTypeInternal {
  constexpr QuoteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuoteRequestDefaultTypeInternal() {}
  union {
    QuoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuoteRequestDefaultTypeInternal _QuoteRequest_default_instance_;
constexpr StreamMessage::StreamMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u){}
struct StreamMessageDefaultTypeInternal {
  constexpr StreamMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessageDefaultTypeInternal() {}
  union {
    StreamMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessageDefaultTypeInternal _StreamMessage_default_instance_;
constexpr QuoteResponse::QuoteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u){}
struct QuoteResponseDefaultTypeInternal {
  constexpr QuoteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuoteResponseDefaultTypeInternal() {}
  union {
    QuoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuoteResponseDefaultTypeInternal _QuoteResponse_default_instance_;
constexpr ArrayQuoteResponse::ArrayQuoteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_(){}
struct ArrayQuoteResponseDefaultTypeInternal {
  constexpr ArrayQuoteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayQuoteResponseDefaultTypeInternal() {}
  union {
    ArrayQuoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayQuoteResponseDefaultTypeInternal _ArrayQuoteResponse_default_instance_;
}  // namespace RPC
}  // namespace Common
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_QuoteRPC_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_QuoteRPC_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_QuoteRPC_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_QuoteRPC_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::RPC::QuoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::RPC::QuoteRequest, types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::RPC::StreamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::RPC::StreamMessage, type_),
  PROTOBUF_FIELD_OFFSET(::Common::RPC::StreamMessage, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::RPC::QuoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::RPC::QuoteResponse, type_),
  PROTOBUF_FIELD_OFFSET(::Common::RPC::QuoteResponse, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::RPC::ArrayQuoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common::RPC::ArrayQuoteResponse, record_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Common::RPC::QuoteRequest)},
  { 6, -1, sizeof(::Common::RPC::StreamMessage)},
  { 13, -1, sizeof(::Common::RPC::QuoteResponse)},
  { 20, -1, sizeof(::Common::RPC::ArrayQuoteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::RPC::_QuoteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::RPC::_StreamMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::RPC::_QuoteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Common::RPC::_ArrayQuoteResponse_default_instance_),
};

const char descriptor_table_protodef_QuoteRPC_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016QuoteRPC.proto\022\nCommon.RPC\"6\n\014QuoteReq"
  "uest\022&\n\005types\030\001 \003(\0162\027.Common.RPC.Request"
  "Type\".\n\rStreamMessage\022\014\n\004type\030\001 \001(\r\022\017\n\007p"
  "ayload\030\002 \001(\014\".\n\rQuoteResponse\022\014\n\004type\030\001 "
  "\001(\r\022\017\n\007payload\030\002 \001(\014\"\?\n\022ArrayQuoteRespon"
  "se\022)\n\006record\030\001 \003(\0132\031.Common.RPC.QuoteRes"
  "ponse*\352\002\n\013RequestType\022\013\n\007Unknown\020\000\022\026\n\022Se"
  "curityDefinition\020\001\022\030\n\024TradingSessionStat"
  "us\020\002\022\022\n\016SecurityStatus\020\003\022\016\n\nVCMTrigger\020\004"
  "\022\014\n\010RefPrice\020\005\022\014\n\010Snapshot\020\006\022\t\n\005Order\020\007\022"
  "\n\n\006Ticker\020\010\022\006\n\002RT\020\t\022\n\n\006Broker\020\n\022\013\n\007Capit"
  "al\020\013\022\n\n\006KL_Day\0202\022\013\n\007KL_5Min\0203\022\014\n\010KL_15Mi"
  "n\0204\022\014\n\010KL_30Min\0205\022\014\n\010KL_60Min\0206\022\013\n\007KL_1M"
  "in\0207\022\013\n\007KL_Week\0208\022\014\n\010KL_Month\0209\022\016\n\nKL_Qu"
  "rater\020:\022\013\n\007KL_Year\020;\022\017\n\nHeart_Beat\020\371\001\022\013\n"
  "\006Finish\020\372\0012\241\001\n\014QuoteService\022I\n\tSubscribe"
  "\022\030.Common.RPC.QuoteRequest\032\036.Common.RPC."
  "ArrayQuoteResponse(\0010\001\022F\n\010Reqeuest\022\030.Com"
  "mon.RPC.QuoteRequest\032\036.Common.RPC.ArrayQ"
  "uoteResponse0\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_QuoteRPC_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_QuoteRPC_2eproto = {
  false, false, 782, descriptor_table_protodef_QuoteRPC_2eproto, "QuoteRPC.proto", 
  &descriptor_table_QuoteRPC_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_QuoteRPC_2eproto::offsets,
  file_level_metadata_QuoteRPC_2eproto, file_level_enum_descriptors_QuoteRPC_2eproto, file_level_service_descriptors_QuoteRPC_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_QuoteRPC_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_QuoteRPC_2eproto);
  return descriptor_table_QuoteRPC_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_QuoteRPC_2eproto(&descriptor_table_QuoteRPC_2eproto);
namespace Common {
namespace RPC {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_QuoteRPC_2eproto);
  return file_level_enum_descriptors_QuoteRPC_2eproto[0];
}
bool RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 249:
    case 250:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class QuoteRequest::_Internal {
 public:
};

QuoteRequest::QuoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.RPC.QuoteRequest)
}
QuoteRequest::QuoteRequest(const QuoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Common.RPC.QuoteRequest)
}

void QuoteRequest::SharedCtor() {
}

QuoteRequest::~QuoteRequest() {
  // @@protoc_insertion_point(destructor:Common.RPC.QuoteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QuoteRequest::ArenaDtor(void* object) {
  QuoteRequest* _this = reinterpret_cast< QuoteRequest* >(object);
  (void)_this;
}
void QuoteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.RPC.QuoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Common.RPC.RequestType types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::Common::RPC::RequestType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuoteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.RPC.QuoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Common.RPC.RequestType types = 1;
  {
    int byte_size = _types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.RPC.QuoteRequest)
  return target;
}

size_t QuoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.RPC.QuoteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.RPC.RequestType types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuoteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.RPC.QuoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QuoteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuoteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.RPC.QuoteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.RPC.QuoteRequest)
    MergeFrom(*source);
  }
}

void QuoteRequest::MergeFrom(const QuoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.RPC.QuoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
}

void QuoteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.RPC.QuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteRequest::CopyFrom(const QuoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.RPC.QuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteRequest::IsInitialized() const {
  return true;
}

void QuoteRequest::InternalSwap(QuoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuoteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StreamMessage::_Internal {
 public:
};

StreamMessage::StreamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.RPC.StreamMessage)
}
StreamMessage::StreamMessage(const StreamMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Common.RPC.StreamMessage)
}

void StreamMessage::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0u;
}

StreamMessage::~StreamMessage() {
  // @@protoc_insertion_point(destructor:Common.RPC.StreamMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamMessage::ArenaDtor(void* object) {
  StreamMessage* _this = reinterpret_cast< StreamMessage* >(object);
  (void)_this;
}
void StreamMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.RPC.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.RPC.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.RPC.StreamMessage)
  return target;
}

size_t StreamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.RPC.StreamMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.RPC.StreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.RPC.StreamMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.RPC.StreamMessage)
    MergeFrom(*source);
  }
}

void StreamMessage::MergeFrom(const StreamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.RPC.StreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void StreamMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.RPC.StreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessage::CopyFrom(const StreamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.RPC.StreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage::IsInitialized() const {
  return true;
}

void StreamMessage::InternalSwap(StreamMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QuoteResponse::_Internal {
 public:
};

QuoteResponse::QuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.RPC.QuoteResponse)
}
QuoteResponse::QuoteResponse(const QuoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Common.RPC.QuoteResponse)
}

void QuoteResponse::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0u;
}

QuoteResponse::~QuoteResponse() {
  // @@protoc_insertion_point(destructor:Common.RPC.QuoteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuoteResponse::ArenaDtor(void* object) {
  QuoteResponse* _this = reinterpret_cast< QuoteResponse* >(object);
  (void)_this;
}
void QuoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.RPC.QuoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuoteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.RPC.QuoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.RPC.QuoteResponse)
  return target;
}

size_t QuoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.RPC.QuoteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuoteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.RPC.QuoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QuoteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuoteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.RPC.QuoteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.RPC.QuoteResponse)
    MergeFrom(*source);
  }
}

void QuoteResponse::MergeFrom(const QuoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.RPC.QuoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void QuoteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.RPC.QuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteResponse::CopyFrom(const QuoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.RPC.QuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteResponse::IsInitialized() const {
  return true;
}

void QuoteResponse::InternalSwap(QuoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuoteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArrayQuoteResponse::_Internal {
 public:
};

ArrayQuoteResponse::ArrayQuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Common.RPC.ArrayQuoteResponse)
}
ArrayQuoteResponse::ArrayQuoteResponse(const ArrayQuoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_(from.record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Common.RPC.ArrayQuoteResponse)
}

void ArrayQuoteResponse::SharedCtor() {
}

ArrayQuoteResponse::~ArrayQuoteResponse() {
  // @@protoc_insertion_point(destructor:Common.RPC.ArrayQuoteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayQuoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArrayQuoteResponse::ArenaDtor(void* object) {
  ArrayQuoteResponse* _this = reinterpret_cast< ArrayQuoteResponse* >(object);
  (void)_this;
}
void ArrayQuoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayQuoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArrayQuoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.RPC.ArrayQuoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayQuoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Common.RPC.QuoteResponse record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayQuoteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.RPC.ArrayQuoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Common.RPC.QuoteResponse record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.RPC.ArrayQuoteResponse)
  return target;
}

size_t ArrayQuoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.RPC.ArrayQuoteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.RPC.QuoteResponse record = 1;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayQuoteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common.RPC.ArrayQuoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayQuoteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayQuoteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common.RPC.ArrayQuoteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common.RPC.ArrayQuoteResponse)
    MergeFrom(*source);
  }
}

void ArrayQuoteResponse::MergeFrom(const ArrayQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common.RPC.ArrayQuoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_.MergeFrom(from.record_);
}

void ArrayQuoteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common.RPC.ArrayQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayQuoteResponse::CopyFrom(const ArrayQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.RPC.ArrayQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayQuoteResponse::IsInitialized() const {
  return true;
}

void ArrayQuoteResponse::InternalSwap(ArrayQuoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_.InternalSwap(&other->record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayQuoteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RPC
}  // namespace Common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Common::RPC::QuoteRequest* Arena::CreateMaybeMessage< ::Common::RPC::QuoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::RPC::QuoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::RPC::StreamMessage* Arena::CreateMaybeMessage< ::Common::RPC::StreamMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::RPC::StreamMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::RPC::QuoteResponse* Arena::CreateMaybeMessage< ::Common::RPC::QuoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::RPC::QuoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::RPC::ArrayQuoteResponse* Arena::CreateMaybeMessage< ::Common::RPC::ArrayQuoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::RPC::ArrayQuoteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
