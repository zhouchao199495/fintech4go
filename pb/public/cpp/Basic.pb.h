// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Basic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Basic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Basic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Basic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Basic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Basic_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Basic_2eproto_metadata_getter(int index);
namespace Common {
namespace Basic {
class BasicQot;
struct BasicQotDefaultTypeInternal;
extern BasicQotDefaultTypeInternal _BasicQot_default_instance_;
class Broker;
struct BrokerDefaultTypeInternal;
extern BrokerDefaultTypeInternal _Broker_default_instance_;
class Brokerlist;
struct BrokerlistDefaultTypeInternal;
extern BrokerlistDefaultTypeInternal _Brokerlist_default_instance_;
class CapitalFlow;
struct CapitalFlowDefaultTypeInternal;
extern CapitalFlowDefaultTypeInternal _CapitalFlow_default_instance_;
class FutureBasicQotExData;
struct FutureBasicQotExDataDefaultTypeInternal;
extern FutureBasicQotExDataDefaultTypeInternal _FutureBasicQotExData_default_instance_;
class FutureStaticExData;
struct FutureStaticExDataDefaultTypeInternal;
extern FutureStaticExDataDefaultTypeInternal _FutureStaticExData_default_instance_;
class HKSecurityStaticBasic;
struct HKSecurityStaticBasicDefaultTypeInternal;
extern HKSecurityStaticBasicDefaultTypeInternal _HKSecurityStaticBasic_default_instance_;
class KLine;
struct KLineDefaultTypeInternal;
extern KLineDefaultTypeInternal _KLine_default_instance_;
class OrderBook;
struct OrderBookDefaultTypeInternal;
extern OrderBookDefaultTypeInternal _OrderBook_default_instance_;
class OrderBookDetail;
struct OrderBookDetailDefaultTypeInternal;
extern OrderBookDetailDefaultTypeInternal _OrderBookDetail_default_instance_;
class PlateInfo;
struct PlateInfoDefaultTypeInternal;
extern PlateInfoDefaultTypeInternal _PlateInfo_default_instance_;
class PreAfterMarketData;
struct PreAfterMarketDataDefaultTypeInternal;
extern PreAfterMarketDataDefaultTypeInternal _PreAfterMarketData_default_instance_;
class RefPrice;
struct RefPriceDefaultTypeInternal;
extern RefPriceDefaultTypeInternal _RefPrice_default_instance_;
class Rehab;
struct RehabDefaultTypeInternal;
extern RehabDefaultTypeInternal _Rehab_default_instance_;
class Security;
struct SecurityDefaultTypeInternal;
extern SecurityDefaultTypeInternal _Security_default_instance_;
class SecurityStaticBasic;
struct SecurityStaticBasicDefaultTypeInternal;
extern SecurityStaticBasicDefaultTypeInternal _SecurityStaticBasic_default_instance_;
class SecurityStaticInfo;
struct SecurityStaticInfoDefaultTypeInternal;
extern SecurityStaticInfoDefaultTypeInternal _SecurityStaticInfo_default_instance_;
class Ticker;
struct TickerDefaultTypeInternal;
extern TickerDefaultTypeInternal _Ticker_default_instance_;
class TimeShare;
struct TimeShareDefaultTypeInternal;
extern TimeShareDefaultTypeInternal _TimeShare_default_instance_;
class TradingSessionStatus;
struct TradingSessionStatusDefaultTypeInternal;
extern TradingSessionStatusDefaultTypeInternal _TradingSessionStatus_default_instance_;
class VCMTrigger;
struct VCMTriggerDefaultTypeInternal;
extern VCMTriggerDefaultTypeInternal _VCMTrigger_default_instance_;
}  // namespace Basic
}  // namespace Common
PROTOBUF_NAMESPACE_OPEN
template<> ::Common::Basic::BasicQot* Arena::CreateMaybeMessage<::Common::Basic::BasicQot>(Arena*);
template<> ::Common::Basic::Broker* Arena::CreateMaybeMessage<::Common::Basic::Broker>(Arena*);
template<> ::Common::Basic::Brokerlist* Arena::CreateMaybeMessage<::Common::Basic::Brokerlist>(Arena*);
template<> ::Common::Basic::CapitalFlow* Arena::CreateMaybeMessage<::Common::Basic::CapitalFlow>(Arena*);
template<> ::Common::Basic::FutureBasicQotExData* Arena::CreateMaybeMessage<::Common::Basic::FutureBasicQotExData>(Arena*);
template<> ::Common::Basic::FutureStaticExData* Arena::CreateMaybeMessage<::Common::Basic::FutureStaticExData>(Arena*);
template<> ::Common::Basic::HKSecurityStaticBasic* Arena::CreateMaybeMessage<::Common::Basic::HKSecurityStaticBasic>(Arena*);
template<> ::Common::Basic::KLine* Arena::CreateMaybeMessage<::Common::Basic::KLine>(Arena*);
template<> ::Common::Basic::OrderBook* Arena::CreateMaybeMessage<::Common::Basic::OrderBook>(Arena*);
template<> ::Common::Basic::OrderBookDetail* Arena::CreateMaybeMessage<::Common::Basic::OrderBookDetail>(Arena*);
template<> ::Common::Basic::PlateInfo* Arena::CreateMaybeMessage<::Common::Basic::PlateInfo>(Arena*);
template<> ::Common::Basic::PreAfterMarketData* Arena::CreateMaybeMessage<::Common::Basic::PreAfterMarketData>(Arena*);
template<> ::Common::Basic::RefPrice* Arena::CreateMaybeMessage<::Common::Basic::RefPrice>(Arena*);
template<> ::Common::Basic::Rehab* Arena::CreateMaybeMessage<::Common::Basic::Rehab>(Arena*);
template<> ::Common::Basic::Security* Arena::CreateMaybeMessage<::Common::Basic::Security>(Arena*);
template<> ::Common::Basic::SecurityStaticBasic* Arena::CreateMaybeMessage<::Common::Basic::SecurityStaticBasic>(Arena*);
template<> ::Common::Basic::SecurityStaticInfo* Arena::CreateMaybeMessage<::Common::Basic::SecurityStaticInfo>(Arena*);
template<> ::Common::Basic::Ticker* Arena::CreateMaybeMessage<::Common::Basic::Ticker>(Arena*);
template<> ::Common::Basic::TimeShare* Arena::CreateMaybeMessage<::Common::Basic::TimeShare>(Arena*);
template<> ::Common::Basic::TradingSessionStatus* Arena::CreateMaybeMessage<::Common::Basic::TradingSessionStatus>(Arena*);
template<> ::Common::Basic::VCMTrigger* Arena::CreateMaybeMessage<::Common::Basic::VCMTrigger>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Common {
namespace Basic {

enum QotMarket : int {
  QotMarket_Unknown = 0,
  QotMarket_HK_Security = 1,
  QotMarket_US_Security = 11,
  QotMarket_CNSH_Security = 21,
  QotMarket_CNSZ_Security = 22,
  QotMarket_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QotMarket_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QotMarket_IsValid(int value);
constexpr QotMarket QotMarket_MIN = QotMarket_Unknown;
constexpr QotMarket QotMarket_MAX = QotMarket_CNSZ_Security;
constexpr int QotMarket_ARRAYSIZE = QotMarket_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QotMarket_descriptor();
template<typename T>
inline const std::string& QotMarket_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QotMarket>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QotMarket_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QotMarket_descriptor(), enum_t_value);
}
inline bool QotMarket_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QotMarket* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QotMarket>(
    QotMarket_descriptor(), name, value);
}
enum AssetClass : int {
  AssetClass_Unknow = 0,
  AssetClass_Stock = 1,
  AssetClass_Bond = 2,
  AssetClass_Future = 3,
  AssetClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AssetClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AssetClass_IsValid(int value);
constexpr AssetClass AssetClass_MIN = AssetClass_Unknow;
constexpr AssetClass AssetClass_MAX = AssetClass_Future;
constexpr int AssetClass_ARRAYSIZE = AssetClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AssetClass_descriptor();
template<typename T>
inline const std::string& AssetClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AssetClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AssetClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AssetClass_descriptor(), enum_t_value);
}
inline bool AssetClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AssetClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AssetClass>(
    AssetClass_descriptor(), name, value);
}
enum SecurityType : int {
  SecurityType_Unknown = 0,
  SecurityType_Bond = 1,
  SecurityType_Eqty = 2,
  SecurityType_Trust = 3,
  SecurityType_Warrant = 4,
  SecurityType_Index = 5,
  SecurityType_Plate = 6,
  SecurityType_Option = 7,
  SecurityType_Future = 8,
  SecurityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecurityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SecurityType_IsValid(int value);
constexpr SecurityType SecurityType_MIN = SecurityType_Unknown;
constexpr SecurityType SecurityType_MAX = SecurityType_Future;
constexpr int SecurityType_ARRAYSIZE = SecurityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityType_descriptor();
template<typename T>
inline const std::string& SecurityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityType_descriptor(), enum_t_value);
}
inline bool SecurityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityType>(
    SecurityType_descriptor(), name, value);
}
enum CompanyAct : int {
  CompanyAct_None = 0,
  CompanyAct_Split = 1,
  CompanyAct_Join = 2,
  CompanyAct_Bonus = 4,
  CompanyAct_Transfer = 8,
  CompanyAct_Allot = 16,
  CompanyAct_Add = 32,
  CompanyAct_Dividend = 64,
  CompanyAct_SPDividend = 128,
  CompanyAct_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompanyAct_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompanyAct_IsValid(int value);
constexpr CompanyAct CompanyAct_MIN = CompanyAct_None;
constexpr CompanyAct CompanyAct_MAX = CompanyAct_SPDividend;
constexpr int CompanyAct_ARRAYSIZE = CompanyAct_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompanyAct_descriptor();
template<typename T>
inline const std::string& CompanyAct_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompanyAct>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompanyAct_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompanyAct_descriptor(), enum_t_value);
}
inline bool CompanyAct_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompanyAct* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompanyAct>(
    CompanyAct_descriptor(), name, value);
}
enum RehabType : int {
  RehabType_None = 0,
  RehabType_Forward = 1,
  RehabType_Backward = 2,
  RehabType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RehabType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RehabType_IsValid(int value);
constexpr RehabType RehabType_MIN = RehabType_None;
constexpr RehabType RehabType_MAX = RehabType_Backward;
constexpr int RehabType_ARRAYSIZE = RehabType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RehabType_descriptor();
template<typename T>
inline const std::string& RehabType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RehabType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RehabType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RehabType_descriptor(), enum_t_value);
}
inline bool RehabType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RehabType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RehabType>(
    RehabType_descriptor(), name, value);
}
enum SecurityStatus : int {
  SecurityStatus_Unknown = 0,
  SecurityStatus_Normal = 1,
  SecurityStatus_Listing = 2,
  SecurityStatus_Purchasing = 3,
  SecurityStatus_Subscribing = 4,
  SecurityStatus_BeforeDrakTradeOpening = 5,
  SecurityStatus_DrakTrading = 6,
  SecurityStatus_DrakTradeEnd = 7,
  SecurityStatus_ToBeOpen = 8,
  SecurityStatus_Suspended = 9,
  SecurityStatus_Called = 10,
  SecurityStatus_ExpiredLastTradingDate = 11,
  SecurityStatus_Expired = 12,
  SecurityStatus_Delisted = 13,
  SecurityStatus_ChangeToTemporaryCode = 14,
  SecurityStatus_TemporaryCodeTradeEnd = 15,
  SecurityStatus_ChangedPlateTradeEnd = 16,
  SecurityStatus_ChangedCodeTradeEnd = 17,
  SecurityStatus_RecoverableCircuitBreaker = 18,
  SecurityStatus_UnRecoverableCircuitBreaker = 19,
  SecurityStatus_AfterCombination = 20,
  SecurityStatus_AfterTransation = 21,
  SecurityStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecurityStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SecurityStatus_IsValid(int value);
constexpr SecurityStatus SecurityStatus_MIN = SecurityStatus_Unknown;
constexpr SecurityStatus SecurityStatus_MAX = SecurityStatus_AfterTransation;
constexpr int SecurityStatus_ARRAYSIZE = SecurityStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityStatus_descriptor();
template<typename T>
inline const std::string& SecurityStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityStatus_descriptor(), enum_t_value);
}
inline bool SecurityStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityStatus>(
    SecurityStatus_descriptor(), name, value);
}
enum QotMarketState : int {
  QotMarketState_None = 0,
  QotMarketState_Auction = 1,
  QotMarketState_WaitingOpen = 2,
  QotMarketState_Morning = 3,
  QotMarketState_Rest = 4,
  QotMarketState_Afternoon = 5,
  QotMarketState_Closed = 6,
  QotMarketState_PreMarketBegin = 8,
  QotMarketState_PreMarketEnd = 9,
  QotMarketState_AfterHoursBegin = 10,
  QotMarketState_AfterHoursEnd = 11,
  QotMarketState_StibAfterHoursWait = 27,
  QotMarketState_StibAfterHoursBegin = 28,
  QotMarketState_StibAfterHoursEnd = 29,
  QotMarketState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QotMarketState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QotMarketState_IsValid(int value);
constexpr QotMarketState QotMarketState_MIN = QotMarketState_None;
constexpr QotMarketState QotMarketState_MAX = QotMarketState_StibAfterHoursEnd;
constexpr int QotMarketState_ARRAYSIZE = QotMarketState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QotMarketState_descriptor();
template<typename T>
inline const std::string& QotMarketState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QotMarketState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QotMarketState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QotMarketState_descriptor(), enum_t_value);
}
inline bool QotMarketState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QotMarketState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QotMarketState>(
    QotMarketState_descriptor(), name, value);
}
enum TickerDirection : int {
  TickerDirection_Unknown = 0,
  TickerDirection_Bid = 1,
  TickerDirection_Ask = 2,
  TickerDirection_Neutral = 3,
  TickerDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TickerDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TickerDirection_IsValid(int value);
constexpr TickerDirection TickerDirection_MIN = TickerDirection_Unknown;
constexpr TickerDirection TickerDirection_MAX = TickerDirection_Neutral;
constexpr int TickerDirection_ARRAYSIZE = TickerDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TickerDirection_descriptor();
template<typename T>
inline const std::string& TickerDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TickerDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TickerDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TickerDirection_descriptor(), enum_t_value);
}
inline bool TickerDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TickerDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TickerDirection>(
    TickerDirection_descriptor(), name, value);
}
enum TradingSessionSubID : int {
  TradingSessionSubID_DayClose = 0,
  TradingSessionSubID_NotYetOpen = 100,
  TradingSessionSubID_POSOrderInput = 1,
  TradingSessionSubID_POSNoCancellation = 101,
  TradingSessionSubID_POSRandomMatching = 108,
  TradingSessionSubID_POSOrderMatching = 2,
  TradingSessionSubID_Blocking = 7,
  TradingSessionSubID_ContinuousTrading = 3,
  TradingSessionSubID_CASReferencePriceFixing = 105,
  TradingSessionSubID_CASOrderInput = 5,
  TradingSessionSubID_CASNoCancellation = 106,
  TradingSessionSubID_CASRandomClose = 107,
  TradingSessionSubID_CASOrderMatching = 4,
  TradingSessionSubID_ExchangeIntervention = 102,
  TradingSessionSubID_Close = 103,
  TradingSessionSubID_OrderCancel = 104,
  TradingSessionSubID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TradingSessionSubID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TradingSessionSubID_IsValid(int value);
constexpr TradingSessionSubID TradingSessionSubID_MIN = TradingSessionSubID_DayClose;
constexpr TradingSessionSubID TradingSessionSubID_MAX = TradingSessionSubID_POSRandomMatching;
constexpr int TradingSessionSubID_ARRAYSIZE = TradingSessionSubID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradingSessionSubID_descriptor();
template<typename T>
inline const std::string& TradingSessionSubID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradingSessionSubID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradingSessionSubID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradingSessionSubID_descriptor(), enum_t_value);
}
inline bool TradingSessionSubID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TradingSessionSubID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradingSessionSubID>(
    TradingSessionSubID_descriptor(), name, value);
}
// ===================================================================

class Security PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.Security) */ {
 public:
  inline Security() : Security(nullptr) {}
  virtual ~Security();
  explicit constexpr Security(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Security(const Security& from);
  Security(Security&& from) noexcept
    : Security() {
    *this = ::std::move(from);
  }

  inline Security& operator=(const Security& from) {
    CopyFrom(from);
    return *this;
  }
  inline Security& operator=(Security&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Security& default_instance() {
    return *internal_default_instance();
  }
  static inline const Security* internal_default_instance() {
    return reinterpret_cast<const Security*>(
               &_Security_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Security& a, Security& b) {
    a.Swap(&b);
  }
  inline void Swap(Security* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Security* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Security* New() const final {
    return CreateMaybeMessage<Security>(nullptr);
  }

  Security* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Security>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Security& from);
  void MergeFrom(const Security& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Security* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.Security";
  }
  protected:
  explicit Security(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kMarketFieldNumber = 1,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // int32 market = 1;
  void clear_market();
  ::PROTOBUF_NAMESPACE_ID::int32 market() const;
  void set_market(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_market() const;
  void _internal_set_market(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.Security)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::int32 market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class PreAfterMarketData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.PreAfterMarketData) */ {
 public:
  inline PreAfterMarketData() : PreAfterMarketData(nullptr) {}
  virtual ~PreAfterMarketData();
  explicit constexpr PreAfterMarketData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreAfterMarketData(const PreAfterMarketData& from);
  PreAfterMarketData(PreAfterMarketData&& from) noexcept
    : PreAfterMarketData() {
    *this = ::std::move(from);
  }

  inline PreAfterMarketData& operator=(const PreAfterMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreAfterMarketData& operator=(PreAfterMarketData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreAfterMarketData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreAfterMarketData* internal_default_instance() {
    return reinterpret_cast<const PreAfterMarketData*>(
               &_PreAfterMarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PreAfterMarketData& a, PreAfterMarketData& b) {
    a.Swap(&b);
  }
  inline void Swap(PreAfterMarketData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreAfterMarketData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreAfterMarketData* New() const final {
    return CreateMaybeMessage<PreAfterMarketData>(nullptr);
  }

  PreAfterMarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreAfterMarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreAfterMarketData& from);
  void MergeFrom(const PreAfterMarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreAfterMarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.PreAfterMarketData";
  }
  protected:
  explicit PreAfterMarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kHighPriceFieldNumber = 2,
    kLowPriceFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kTurnoverFieldNumber = 5,
    kChangeValueFieldNumber = 6,
    kChangeRateFieldNumber = 7,
    kAmplitudeFieldNumber = 8,
  };
  // double price = 1;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double high_price = 2;
  void clear_high_price();
  double high_price() const;
  void set_high_price(double value);
  private:
  double _internal_high_price() const;
  void _internal_set_high_price(double value);
  public:

  // double low_price = 3;
  void clear_low_price();
  double low_price() const;
  void set_low_price(double value);
  private:
  double _internal_low_price() const;
  void _internal_set_low_price(double value);
  public:

  // int64 volume = 4;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double turnover = 5;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double change_value = 6;
  void clear_change_value();
  double change_value() const;
  void set_change_value(double value);
  private:
  double _internal_change_value() const;
  void _internal_set_change_value(double value);
  public:

  // double change_rate = 7;
  void clear_change_rate();
  double change_rate() const;
  void set_change_rate(double value);
  private:
  double _internal_change_rate() const;
  void _internal_set_change_rate(double value);
  public:

  // double amplitude = 8;
  void clear_amplitude();
  double amplitude() const;
  void set_amplitude(double value);
  private:
  double _internal_amplitude() const;
  void _internal_set_amplitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.PreAfterMarketData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double price_;
  double high_price_;
  double low_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  double turnover_;
  double change_value_;
  double change_rate_;
  double amplitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class FutureBasicQotExData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.FutureBasicQotExData) */ {
 public:
  inline FutureBasicQotExData() : FutureBasicQotExData(nullptr) {}
  virtual ~FutureBasicQotExData();
  explicit constexpr FutureBasicQotExData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FutureBasicQotExData(const FutureBasicQotExData& from);
  FutureBasicQotExData(FutureBasicQotExData&& from) noexcept
    : FutureBasicQotExData() {
    *this = ::std::move(from);
  }

  inline FutureBasicQotExData& operator=(const FutureBasicQotExData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FutureBasicQotExData& operator=(FutureBasicQotExData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FutureBasicQotExData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FutureBasicQotExData* internal_default_instance() {
    return reinterpret_cast<const FutureBasicQotExData*>(
               &_FutureBasicQotExData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FutureBasicQotExData& a, FutureBasicQotExData& b) {
    a.Swap(&b);
  }
  inline void Swap(FutureBasicQotExData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FutureBasicQotExData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FutureBasicQotExData* New() const final {
    return CreateMaybeMessage<FutureBasicQotExData>(nullptr);
  }

  FutureBasicQotExData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FutureBasicQotExData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FutureBasicQotExData& from);
  void MergeFrom(const FutureBasicQotExData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureBasicQotExData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.FutureBasicQotExData";
  }
  protected:
  explicit FutureBasicQotExData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastSettlePriceFieldNumber = 1,
    kPositionFieldNumber = 2,
    kPreOpenInterestFieldNumber = 3,
    kUpperLimitPriceFieldNumber = 4,
    kLowerLimitPriceFieldNumber = 5,
    kClosePriceFieldNumber = 6,
    kPreDeltaFieldNumber = 7,
    kCurrDeltaFieldNumber = 8,
  };
  // double last_settle_price = 1;
  void clear_last_settle_price();
  double last_settle_price() const;
  void set_last_settle_price(double value);
  private:
  double _internal_last_settle_price() const;
  void _internal_set_last_settle_price(double value);
  public:

  // int32 position = 2;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pre_open_interest = 3;
  void clear_pre_open_interest();
  ::PROTOBUF_NAMESPACE_ID::int32 pre_open_interest() const;
  void set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pre_open_interest() const;
  void _internal_set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double upper_limit_price = 4;
  void clear_upper_limit_price();
  double upper_limit_price() const;
  void set_upper_limit_price(double value);
  private:
  double _internal_upper_limit_price() const;
  void _internal_set_upper_limit_price(double value);
  public:

  // double lower_limit_price = 5;
  void clear_lower_limit_price();
  double lower_limit_price() const;
  void set_lower_limit_price(double value);
  private:
  double _internal_lower_limit_price() const;
  void _internal_set_lower_limit_price(double value);
  public:

  // double close_price = 6;
  void clear_close_price();
  double close_price() const;
  void set_close_price(double value);
  private:
  double _internal_close_price() const;
  void _internal_set_close_price(double value);
  public:

  // double pre_delta = 7;
  void clear_pre_delta();
  double pre_delta() const;
  void set_pre_delta(double value);
  private:
  double _internal_pre_delta() const;
  void _internal_set_pre_delta(double value);
  public:

  // double curr_delta = 8;
  void clear_curr_delta();
  double curr_delta() const;
  void set_curr_delta(double value);
  private:
  double _internal_curr_delta() const;
  void _internal_set_curr_delta(double value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.FutureBasicQotExData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double last_settle_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 pre_open_interest_;
  double upper_limit_price_;
  double lower_limit_price_;
  double close_price_;
  double pre_delta_;
  double curr_delta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class BasicQot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.BasicQot) */ {
 public:
  inline BasicQot() : BasicQot(nullptr) {}
  virtual ~BasicQot();
  explicit constexpr BasicQot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicQot(const BasicQot& from);
  BasicQot(BasicQot&& from) noexcept
    : BasicQot() {
    *this = ::std::move(from);
  }

  inline BasicQot& operator=(const BasicQot& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicQot& operator=(BasicQot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicQot& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicQot* internal_default_instance() {
    return reinterpret_cast<const BasicQot*>(
               &_BasicQot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BasicQot& a, BasicQot& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicQot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicQot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicQot* New() const final {
    return CreateMaybeMessage<BasicQot>(nullptr);
  }

  BasicQot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicQot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicQot& from);
  void MergeFrom(const BasicQot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicQot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.BasicQot";
  }
  protected:
  explicit BasicQot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityFieldNumber = 1,
    kPreMarketFieldNumber = 50,
    kAfterMarketFieldNumber = 51,
    kFutureDataFieldNumber = 52,
    kUpdateTimeFieldNumber = 2,
    kHighPriceFieldNumber = 3,
    kOpenPriceFieldNumber = 4,
    kLowPriceFieldNumber = 5,
    kCurPriceFieldNumber = 6,
    kPrevClosePriceFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kTurnoverFieldNumber = 9,
    kTurnoverRateFieldNumber = 10,
    kSecurityStatusFieldNumber = 11,
  };
  // .Common.Basic.Security security = 1;
  bool has_security() const;
  private:
  bool _internal_has_security() const;
  public:
  void clear_security();
  const ::Common::Basic::Security& security() const;
  ::Common::Basic::Security* release_security();
  ::Common::Basic::Security* mutable_security();
  void set_allocated_security(::Common::Basic::Security* security);
  private:
  const ::Common::Basic::Security& _internal_security() const;
  ::Common::Basic::Security* _internal_mutable_security();
  public:
  void unsafe_arena_set_allocated_security(
      ::Common::Basic::Security* security);
  ::Common::Basic::Security* unsafe_arena_release_security();

  // .Common.Basic.PreAfterMarketData pre_market = 50;
  bool has_pre_market() const;
  private:
  bool _internal_has_pre_market() const;
  public:
  void clear_pre_market();
  const ::Common::Basic::PreAfterMarketData& pre_market() const;
  ::Common::Basic::PreAfterMarketData* release_pre_market();
  ::Common::Basic::PreAfterMarketData* mutable_pre_market();
  void set_allocated_pre_market(::Common::Basic::PreAfterMarketData* pre_market);
  private:
  const ::Common::Basic::PreAfterMarketData& _internal_pre_market() const;
  ::Common::Basic::PreAfterMarketData* _internal_mutable_pre_market();
  public:
  void unsafe_arena_set_allocated_pre_market(
      ::Common::Basic::PreAfterMarketData* pre_market);
  ::Common::Basic::PreAfterMarketData* unsafe_arena_release_pre_market();

  // .Common.Basic.PreAfterMarketData after_market = 51;
  bool has_after_market() const;
  private:
  bool _internal_has_after_market() const;
  public:
  void clear_after_market();
  const ::Common::Basic::PreAfterMarketData& after_market() const;
  ::Common::Basic::PreAfterMarketData* release_after_market();
  ::Common::Basic::PreAfterMarketData* mutable_after_market();
  void set_allocated_after_market(::Common::Basic::PreAfterMarketData* after_market);
  private:
  const ::Common::Basic::PreAfterMarketData& _internal_after_market() const;
  ::Common::Basic::PreAfterMarketData* _internal_mutable_after_market();
  public:
  void unsafe_arena_set_allocated_after_market(
      ::Common::Basic::PreAfterMarketData* after_market);
  ::Common::Basic::PreAfterMarketData* unsafe_arena_release_after_market();

  // .Common.Basic.FutureBasicQotExData future_data = 52;
  bool has_future_data() const;
  private:
  bool _internal_has_future_data() const;
  public:
  void clear_future_data();
  const ::Common::Basic::FutureBasicQotExData& future_data() const;
  ::Common::Basic::FutureBasicQotExData* release_future_data();
  ::Common::Basic::FutureBasicQotExData* mutable_future_data();
  void set_allocated_future_data(::Common::Basic::FutureBasicQotExData* future_data);
  private:
  const ::Common::Basic::FutureBasicQotExData& _internal_future_data() const;
  ::Common::Basic::FutureBasicQotExData* _internal_mutable_future_data();
  public:
  void unsafe_arena_set_allocated_future_data(
      ::Common::Basic::FutureBasicQotExData* future_data);
  ::Common::Basic::FutureBasicQotExData* unsafe_arena_release_future_data();

  // uint64 update_time = 2;
  void clear_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 update_time() const;
  void set_update_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_update_time() const;
  void _internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double high_price = 3;
  void clear_high_price();
  double high_price() const;
  void set_high_price(double value);
  private:
  double _internal_high_price() const;
  void _internal_set_high_price(double value);
  public:

  // double open_price = 4;
  void clear_open_price();
  double open_price() const;
  void set_open_price(double value);
  private:
  double _internal_open_price() const;
  void _internal_set_open_price(double value);
  public:

  // double low_price = 5;
  void clear_low_price();
  double low_price() const;
  void set_low_price(double value);
  private:
  double _internal_low_price() const;
  void _internal_set_low_price(double value);
  public:

  // double cur_price = 6;
  void clear_cur_price();
  double cur_price() const;
  void set_cur_price(double value);
  private:
  double _internal_cur_price() const;
  void _internal_set_cur_price(double value);
  public:

  // double prev_close_price = 7;
  void clear_prev_close_price();
  double prev_close_price() const;
  void set_prev_close_price(double value);
  private:
  double _internal_prev_close_price() const;
  void _internal_set_prev_close_price(double value);
  public:

  // int64 volume = 8;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double turnover = 9;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double turnover_rate = 10;
  void clear_turnover_rate();
  double turnover_rate() const;
  void set_turnover_rate(double value);
  private:
  double _internal_turnover_rate() const;
  void _internal_set_turnover_rate(double value);
  public:

  // int32 security_status = 11;
  void clear_security_status();
  ::PROTOBUF_NAMESPACE_ID::int32 security_status() const;
  void set_security_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_security_status() const;
  void _internal_set_security_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.BasicQot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Common::Basic::Security* security_;
  ::Common::Basic::PreAfterMarketData* pre_market_;
  ::Common::Basic::PreAfterMarketData* after_market_;
  ::Common::Basic::FutureBasicQotExData* future_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 update_time_;
  double high_price_;
  double open_price_;
  double low_price_;
  double cur_price_;
  double prev_close_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  double turnover_;
  double turnover_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 security_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class HKSecurityStaticBasic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.HKSecurityStaticBasic) */ {
 public:
  inline HKSecurityStaticBasic() : HKSecurityStaticBasic(nullptr) {}
  virtual ~HKSecurityStaticBasic();
  explicit constexpr HKSecurityStaticBasic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HKSecurityStaticBasic(const HKSecurityStaticBasic& from);
  HKSecurityStaticBasic(HKSecurityStaticBasic&& from) noexcept
    : HKSecurityStaticBasic() {
    *this = ::std::move(from);
  }

  inline HKSecurityStaticBasic& operator=(const HKSecurityStaticBasic& from) {
    CopyFrom(from);
    return *this;
  }
  inline HKSecurityStaticBasic& operator=(HKSecurityStaticBasic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HKSecurityStaticBasic& default_instance() {
    return *internal_default_instance();
  }
  static inline const HKSecurityStaticBasic* internal_default_instance() {
    return reinterpret_cast<const HKSecurityStaticBasic*>(
               &_HKSecurityStaticBasic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HKSecurityStaticBasic& a, HKSecurityStaticBasic& b) {
    a.Swap(&b);
  }
  inline void Swap(HKSecurityStaticBasic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HKSecurityStaticBasic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HKSecurityStaticBasic* New() const final {
    return CreateMaybeMessage<HKSecurityStaticBasic>(nullptr);
  }

  HKSecurityStaticBasic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HKSecurityStaticBasic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HKSecurityStaticBasic& from);
  void MergeFrom(const HKSecurityStaticBasic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HKSecurityStaticBasic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.HKSecurityStaticBasic";
  }
  protected:
  explicit HKSecurityStaticBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVCMFlagFieldNumber = 2,
    kShortsellFlagFieldNumber = 3,
    kCASFlagFieldNumber = 4,
    kCCASSFlagFieldNumber = 5,
    kStampDutyFlagFieldNumber = 6,
    kPOSFlagFieldNumber = 7,
    kPOSUpperLimitFieldNumber = 8,
    kPOSLowerLimitFieldNumber = 9,
  };
  // bool VCM_flag = 2;
  void clear_vcm_flag();
  bool vcm_flag() const;
  void set_vcm_flag(bool value);
  private:
  bool _internal_vcm_flag() const;
  void _internal_set_vcm_flag(bool value);
  public:

  // bool shortsell_flag = 3;
  void clear_shortsell_flag();
  bool shortsell_flag() const;
  void set_shortsell_flag(bool value);
  private:
  bool _internal_shortsell_flag() const;
  void _internal_set_shortsell_flag(bool value);
  public:

  // bool CAS_flag = 4;
  void clear_cas_flag();
  bool cas_flag() const;
  void set_cas_flag(bool value);
  private:
  bool _internal_cas_flag() const;
  void _internal_set_cas_flag(bool value);
  public:

  // bool CCASS_flag = 5;
  void clear_ccass_flag();
  bool ccass_flag() const;
  void set_ccass_flag(bool value);
  private:
  bool _internal_ccass_flag() const;
  void _internal_set_ccass_flag(bool value);
  public:

  // bool stamp_duty_flag = 6;
  void clear_stamp_duty_flag();
  bool stamp_duty_flag() const;
  void set_stamp_duty_flag(bool value);
  private:
  bool _internal_stamp_duty_flag() const;
  void _internal_set_stamp_duty_flag(bool value);
  public:

  // bool POS_flag = 7;
  void clear_pos_flag();
  bool pos_flag() const;
  void set_pos_flag(bool value);
  private:
  bool _internal_pos_flag() const;
  void _internal_set_pos_flag(bool value);
  public:

  // uint32 POS_upper_limit = 8;
  void clear_pos_upper_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_upper_limit() const;
  void set_pos_upper_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_upper_limit() const;
  void _internal_set_pos_upper_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 POS_lower_limit = 9;
  void clear_pos_lower_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_lower_limit() const;
  void set_pos_lower_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_lower_limit() const;
  void _internal_set_pos_lower_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.HKSecurityStaticBasic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool vcm_flag_;
  bool shortsell_flag_;
  bool cas_flag_;
  bool ccass_flag_;
  bool stamp_duty_flag_;
  bool pos_flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_upper_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_lower_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class SecurityStaticBasic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.SecurityStaticBasic) */ {
 public:
  inline SecurityStaticBasic() : SecurityStaticBasic(nullptr) {}
  virtual ~SecurityStaticBasic();
  explicit constexpr SecurityStaticBasic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityStaticBasic(const SecurityStaticBasic& from);
  SecurityStaticBasic(SecurityStaticBasic&& from) noexcept
    : SecurityStaticBasic() {
    *this = ::std::move(from);
  }

  inline SecurityStaticBasic& operator=(const SecurityStaticBasic& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityStaticBasic& operator=(SecurityStaticBasic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityStaticBasic& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityStaticBasic* internal_default_instance() {
    return reinterpret_cast<const SecurityStaticBasic*>(
               &_SecurityStaticBasic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SecurityStaticBasic& a, SecurityStaticBasic& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityStaticBasic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityStaticBasic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityStaticBasic* New() const final {
    return CreateMaybeMessage<SecurityStaticBasic>(nullptr);
  }

  SecurityStaticBasic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityStaticBasic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityStaticBasic& from);
  void MergeFrom(const SecurityStaticBasic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityStaticBasic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.SecurityStaticBasic";
  }
  protected:
  explicit SecurityStaticBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kListTimeFieldNumber = 6,
    kSecurityFieldNumber = 1,
    kIdFieldNumber = 2,
    kLotSizeFieldNumber = 3,
    kSecurityTypeFieldNumber = 4,
    kListTimestampFieldNumber = 8,
    kDelistingFieldNumber = 7,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string list_time = 6;
  void clear_list_time();
  const std::string& list_time() const;
  void set_list_time(const std::string& value);
  void set_list_time(std::string&& value);
  void set_list_time(const char* value);
  void set_list_time(const char* value, size_t size);
  std::string* mutable_list_time();
  std::string* release_list_time();
  void set_allocated_list_time(std::string* list_time);
  private:
  const std::string& _internal_list_time() const;
  void _internal_set_list_time(const std::string& value);
  std::string* _internal_mutable_list_time();
  public:

  // .Common.Basic.Security security = 1;
  bool has_security() const;
  private:
  bool _internal_has_security() const;
  public:
  void clear_security();
  const ::Common::Basic::Security& security() const;
  ::Common::Basic::Security* release_security();
  ::Common::Basic::Security* mutable_security();
  void set_allocated_security(::Common::Basic::Security* security);
  private:
  const ::Common::Basic::Security& _internal_security() const;
  ::Common::Basic::Security* _internal_mutable_security();
  public:
  void unsafe_arena_set_allocated_security(
      ::Common::Basic::Security* security);
  ::Common::Basic::Security* unsafe_arena_release_security();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 lot_size = 3;
  void clear_lot_size();
  ::PROTOBUF_NAMESPACE_ID::int32 lot_size() const;
  void set_lot_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lot_size() const;
  void _internal_set_lot_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 security_type = 4;
  void clear_security_type();
  ::PROTOBUF_NAMESPACE_ID::int32 security_type() const;
  void set_security_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_security_type() const;
  void _internal_set_security_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double list_timestamp = 8;
  void clear_list_timestamp();
  double list_timestamp() const;
  void set_list_timestamp(double value);
  private:
  double _internal_list_timestamp() const;
  void _internal_set_list_timestamp(double value);
  public:

  // bool delisting = 7;
  void clear_delisting();
  bool delisting() const;
  void set_delisting(bool value);
  private:
  bool _internal_delisting() const;
  void _internal_set_delisting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.SecurityStaticBasic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr list_time_;
  ::Common::Basic::Security* security_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lot_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 security_type_;
  double list_timestamp_;
  bool delisting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class FutureStaticExData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.FutureStaticExData) */ {
 public:
  inline FutureStaticExData() : FutureStaticExData(nullptr) {}
  virtual ~FutureStaticExData();
  explicit constexpr FutureStaticExData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FutureStaticExData(const FutureStaticExData& from);
  FutureStaticExData(FutureStaticExData&& from) noexcept
    : FutureStaticExData() {
    *this = ::std::move(from);
  }

  inline FutureStaticExData& operator=(const FutureStaticExData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FutureStaticExData& operator=(FutureStaticExData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FutureStaticExData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FutureStaticExData* internal_default_instance() {
    return reinterpret_cast<const FutureStaticExData*>(
               &_FutureStaticExData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FutureStaticExData& a, FutureStaticExData& b) {
    a.Swap(&b);
  }
  inline void Swap(FutureStaticExData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FutureStaticExData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FutureStaticExData* New() const final {
    return CreateMaybeMessage<FutureStaticExData>(nullptr);
  }

  FutureStaticExData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FutureStaticExData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FutureStaticExData& from);
  void MergeFrom(const FutureStaticExData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureStaticExData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.FutureStaticExData";
  }
  protected:
  explicit FutureStaticExData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastTradeTimeFieldNumber = 1,
    kLastTradeTimestampFieldNumber = 2,
    kIsMainContractFieldNumber = 3,
  };
  // string last_trade_time = 1;
  void clear_last_trade_time();
  const std::string& last_trade_time() const;
  void set_last_trade_time(const std::string& value);
  void set_last_trade_time(std::string&& value);
  void set_last_trade_time(const char* value);
  void set_last_trade_time(const char* value, size_t size);
  std::string* mutable_last_trade_time();
  std::string* release_last_trade_time();
  void set_allocated_last_trade_time(std::string* last_trade_time);
  private:
  const std::string& _internal_last_trade_time() const;
  void _internal_set_last_trade_time(const std::string& value);
  std::string* _internal_mutable_last_trade_time();
  public:

  // double last_trade_timestamp = 2;
  void clear_last_trade_timestamp();
  double last_trade_timestamp() const;
  void set_last_trade_timestamp(double value);
  private:
  double _internal_last_trade_timestamp() const;
  void _internal_set_last_trade_timestamp(double value);
  public:

  // bool is_main_contract = 3;
  void clear_is_main_contract();
  bool is_main_contract() const;
  void set_is_main_contract(bool value);
  private:
  bool _internal_is_main_contract() const;
  void _internal_set_is_main_contract(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.FutureStaticExData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_trade_time_;
  double last_trade_timestamp_;
  bool is_main_contract_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class SecurityStaticInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.SecurityStaticInfo) */ {
 public:
  inline SecurityStaticInfo() : SecurityStaticInfo(nullptr) {}
  virtual ~SecurityStaticInfo();
  explicit constexpr SecurityStaticInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityStaticInfo(const SecurityStaticInfo& from);
  SecurityStaticInfo(SecurityStaticInfo&& from) noexcept
    : SecurityStaticInfo() {
    *this = ::std::move(from);
  }

  inline SecurityStaticInfo& operator=(const SecurityStaticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityStaticInfo& operator=(SecurityStaticInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityStaticInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityStaticInfo* internal_default_instance() {
    return reinterpret_cast<const SecurityStaticInfo*>(
               &_SecurityStaticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SecurityStaticInfo& a, SecurityStaticInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityStaticInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityStaticInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityStaticInfo* New() const final {
    return CreateMaybeMessage<SecurityStaticInfo>(nullptr);
  }

  SecurityStaticInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityStaticInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityStaticInfo& from);
  void MergeFrom(const SecurityStaticInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityStaticInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.SecurityStaticInfo";
  }
  protected:
  explicit SecurityStaticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicFieldNumber = 1,
    kFutureExdataFieldNumber = 2,
    kHkBasicFieldNumber = 3,
  };
  // .Common.Basic.SecurityStaticBasic basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::Common::Basic::SecurityStaticBasic& basic() const;
  ::Common::Basic::SecurityStaticBasic* release_basic();
  ::Common::Basic::SecurityStaticBasic* mutable_basic();
  void set_allocated_basic(::Common::Basic::SecurityStaticBasic* basic);
  private:
  const ::Common::Basic::SecurityStaticBasic& _internal_basic() const;
  ::Common::Basic::SecurityStaticBasic* _internal_mutable_basic();
  public:
  void unsafe_arena_set_allocated_basic(
      ::Common::Basic::SecurityStaticBasic* basic);
  ::Common::Basic::SecurityStaticBasic* unsafe_arena_release_basic();

  // .Common.Basic.FutureStaticExData future_exdata = 2;
  bool has_future_exdata() const;
  private:
  bool _internal_has_future_exdata() const;
  public:
  void clear_future_exdata();
  const ::Common::Basic::FutureStaticExData& future_exdata() const;
  ::Common::Basic::FutureStaticExData* release_future_exdata();
  ::Common::Basic::FutureStaticExData* mutable_future_exdata();
  void set_allocated_future_exdata(::Common::Basic::FutureStaticExData* future_exdata);
  private:
  const ::Common::Basic::FutureStaticExData& _internal_future_exdata() const;
  ::Common::Basic::FutureStaticExData* _internal_mutable_future_exdata();
  public:
  void unsafe_arena_set_allocated_future_exdata(
      ::Common::Basic::FutureStaticExData* future_exdata);
  ::Common::Basic::FutureStaticExData* unsafe_arena_release_future_exdata();

  // .Common.Basic.HKSecurityStaticBasic hk_basic = 3;
  bool has_hk_basic() const;
  private:
  bool _internal_has_hk_basic() const;
  public:
  void clear_hk_basic();
  const ::Common::Basic::HKSecurityStaticBasic& hk_basic() const;
  ::Common::Basic::HKSecurityStaticBasic* release_hk_basic();
  ::Common::Basic::HKSecurityStaticBasic* mutable_hk_basic();
  void set_allocated_hk_basic(::Common::Basic::HKSecurityStaticBasic* hk_basic);
  private:
  const ::Common::Basic::HKSecurityStaticBasic& _internal_hk_basic() const;
  ::Common::Basic::HKSecurityStaticBasic* _internal_mutable_hk_basic();
  public:
  void unsafe_arena_set_allocated_hk_basic(
      ::Common::Basic::HKSecurityStaticBasic* hk_basic);
  ::Common::Basic::HKSecurityStaticBasic* unsafe_arena_release_hk_basic();

  // @@protoc_insertion_point(class_scope:Common.Basic.SecurityStaticInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Common::Basic::SecurityStaticBasic* basic_;
  ::Common::Basic::FutureStaticExData* future_exdata_;
  ::Common::Basic::HKSecurityStaticBasic* hk_basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class VCMTrigger PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.VCMTrigger) */ {
 public:
  inline VCMTrigger() : VCMTrigger(nullptr) {}
  virtual ~VCMTrigger();
  explicit constexpr VCMTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VCMTrigger(const VCMTrigger& from);
  VCMTrigger(VCMTrigger&& from) noexcept
    : VCMTrigger() {
    *this = ::std::move(from);
  }

  inline VCMTrigger& operator=(const VCMTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline VCMTrigger& operator=(VCMTrigger&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VCMTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const VCMTrigger* internal_default_instance() {
    return reinterpret_cast<const VCMTrigger*>(
               &_VCMTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VCMTrigger& a, VCMTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(VCMTrigger* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VCMTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VCMTrigger* New() const final {
    return CreateMaybeMessage<VCMTrigger>(nullptr);
  }

  VCMTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VCMTrigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VCMTrigger& from);
  void MergeFrom(const VCMTrigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VCMTrigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.VCMTrigger";
  }
  protected:
  explicit VCMTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityFieldNumber = 1,
    kCoolingoffStarttimeFieldNumber = 2,
    kCoolingoffEndtimeFieldNumber = 3,
    kVcmPriceFieldNumber = 4,
    kVcmLowerPriceFieldNumber = 5,
    kVcmUpperPriceFieldNumber = 6,
  };
  // .Common.Basic.Security security = 1;
  bool has_security() const;
  private:
  bool _internal_has_security() const;
  public:
  void clear_security();
  const ::Common::Basic::Security& security() const;
  ::Common::Basic::Security* release_security();
  ::Common::Basic::Security* mutable_security();
  void set_allocated_security(::Common::Basic::Security* security);
  private:
  const ::Common::Basic::Security& _internal_security() const;
  ::Common::Basic::Security* _internal_mutable_security();
  public:
  void unsafe_arena_set_allocated_security(
      ::Common::Basic::Security* security);
  ::Common::Basic::Security* unsafe_arena_release_security();

  // uint64 coolingoff_starttime = 2;
  void clear_coolingoff_starttime();
  ::PROTOBUF_NAMESPACE_ID::uint64 coolingoff_starttime() const;
  void set_coolingoff_starttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coolingoff_starttime() const;
  void _internal_set_coolingoff_starttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 coolingoff_endtime = 3;
  void clear_coolingoff_endtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 coolingoff_endtime() const;
  void set_coolingoff_endtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coolingoff_endtime() const;
  void _internal_set_coolingoff_endtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 vcm_price = 4;
  void clear_vcm_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 vcm_price() const;
  void set_vcm_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vcm_price() const;
  void _internal_set_vcm_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 vcm_lower_price = 5;
  void clear_vcm_lower_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 vcm_lower_price() const;
  void set_vcm_lower_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vcm_lower_price() const;
  void _internal_set_vcm_lower_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 vcm_upper_price = 6;
  void clear_vcm_upper_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 vcm_upper_price() const;
  void set_vcm_upper_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vcm_upper_price() const;
  void _internal_set_vcm_upper_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.VCMTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Common::Basic::Security* security_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coolingoff_starttime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coolingoff_endtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vcm_price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vcm_lower_price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vcm_upper_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class RefPrice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.RefPrice) */ {
 public:
  inline RefPrice() : RefPrice(nullptr) {}
  virtual ~RefPrice();
  explicit constexpr RefPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RefPrice(const RefPrice& from);
  RefPrice(RefPrice&& from) noexcept
    : RefPrice() {
    *this = ::std::move(from);
  }

  inline RefPrice& operator=(const RefPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefPrice& operator=(RefPrice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefPrice* internal_default_instance() {
    return reinterpret_cast<const RefPrice*>(
               &_RefPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RefPrice& a, RefPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(RefPrice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefPrice* New() const final {
    return CreateMaybeMessage<RefPrice>(nullptr);
  }

  RefPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefPrice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefPrice& from);
  void MergeFrom(const RefPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefPrice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.RefPrice";
  }
  protected:
  explicit RefPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityFieldNumber = 1,
    kRefPriceFieldNumber = 2,
    kLowerPriceFieldNumber = 3,
    kUpperPriceFieldNumber = 4,
  };
  // .Common.Basic.Security security = 1;
  bool has_security() const;
  private:
  bool _internal_has_security() const;
  public:
  void clear_security();
  const ::Common::Basic::Security& security() const;
  ::Common::Basic::Security* release_security();
  ::Common::Basic::Security* mutable_security();
  void set_allocated_security(::Common::Basic::Security* security);
  private:
  const ::Common::Basic::Security& _internal_security() const;
  ::Common::Basic::Security* _internal_mutable_security();
  public:
  void unsafe_arena_set_allocated_security(
      ::Common::Basic::Security* security);
  ::Common::Basic::Security* unsafe_arena_release_security();

  // uint32 ref_price = 2;
  void clear_ref_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 ref_price() const;
  void set_ref_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ref_price() const;
  void _internal_set_ref_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lower_price = 3;
  void clear_lower_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 lower_price() const;
  void set_lower_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lower_price() const;
  void _internal_set_lower_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 upper_price = 4;
  void clear_upper_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 upper_price() const;
  void set_upper_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_upper_price() const;
  void _internal_set_upper_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.RefPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Common::Basic::Security* security_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ref_price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lower_price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upper_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class TradingSessionStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.TradingSessionStatus) */ {
 public:
  inline TradingSessionStatus() : TradingSessionStatus(nullptr) {}
  virtual ~TradingSessionStatus();
  explicit constexpr TradingSessionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradingSessionStatus(const TradingSessionStatus& from);
  TradingSessionStatus(TradingSessionStatus&& from) noexcept
    : TradingSessionStatus() {
    *this = ::std::move(from);
  }

  inline TradingSessionStatus& operator=(const TradingSessionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingSessionStatus& operator=(TradingSessionStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradingSessionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingSessionStatus* internal_default_instance() {
    return reinterpret_cast<const TradingSessionStatus*>(
               &_TradingSessionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TradingSessionStatus& a, TradingSessionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingSessionStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingSessionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradingSessionStatus* New() const final {
    return CreateMaybeMessage<TradingSessionStatus>(nullptr);
  }

  TradingSessionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradingSessionStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradingSessionStatus& from);
  void MergeFrom(const TradingSessionStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingSessionStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.TradingSessionStatus";
  }
  protected:
  explicit TradingSessionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kMarketcodeFieldNumber = 2,
    kTradingSessionSubidFieldNumber = 3,
    kStartDatetimeFieldNumber = 5,
    kEndDatetimeFieldNumber = 6,
    kTradingSessionStatusFieldNumber = 4,
  };
  // string market = 1;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // uint32 marketcode = 2;
  void clear_marketcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 marketcode() const;
  void set_marketcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_marketcode() const;
  void _internal_set_marketcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 trading_session_subid = 3;
  void clear_trading_session_subid();
  ::PROTOBUF_NAMESPACE_ID::uint32 trading_session_subid() const;
  void set_trading_session_subid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trading_session_subid() const;
  void _internal_set_trading_session_subid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 start_datetime = 5;
  void clear_start_datetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_datetime() const;
  void set_start_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_datetime() const;
  void _internal_set_start_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_datetime = 6;
  void clear_end_datetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_datetime() const;
  void set_end_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_datetime() const;
  void _internal_set_end_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 trading_session_status = 4;
  void clear_trading_session_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 trading_session_status() const;
  void set_trading_session_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trading_session_status() const;
  void _internal_set_trading_session_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.TradingSessionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::uint32 marketcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trading_session_subid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_datetime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_datetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trading_session_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class Ticker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.Ticker) */ {
 public:
  inline Ticker() : Ticker(nullptr) {}
  virtual ~Ticker();
  explicit constexpr Ticker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ticker(const Ticker& from);
  Ticker(Ticker&& from) noexcept
    : Ticker() {
    *this = ::std::move(from);
  }

  inline Ticker& operator=(const Ticker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ticker& operator=(Ticker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ticker& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ticker* internal_default_instance() {
    return reinterpret_cast<const Ticker*>(
               &_Ticker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Ticker& a, Ticker& b) {
    a.Swap(&b);
  }
  inline void Swap(Ticker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ticker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ticker* New() const final {
    return CreateMaybeMessage<Ticker>(nullptr);
  }

  Ticker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ticker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ticker& from);
  void MergeFrom(const Ticker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ticker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.Ticker";
  }
  protected:
  explicit Ticker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kSequenceFieldNumber = 2,
    kPriceFieldNumber = 4,
    kVolumeFieldNumber = 5,
    kDirFieldNumber = 3,
    kTypeFieldNumber = 8,
    kTurnoverFieldNumber = 6,
    kRecvTimeFieldNumber = 7,
    kTimestampFieldNumber = 10,
    kTypeSignFieldNumber = 9,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // int64 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double price = 4;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int64 volume = 5;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 dir = 3;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::int32 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dir() const;
  void _internal_set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 8;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double turnover = 6;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double recvTime = 7;
  void clear_recvtime();
  double recvtime() const;
  void set_recvtime(double value);
  private:
  double _internal_recvtime() const;
  void _internal_set_recvtime(double value);
  public:

  // double timestamp = 10;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // int32 type_sign = 9;
  void clear_type_sign();
  ::PROTOBUF_NAMESPACE_ID::int32 type_sign() const;
  void set_type_sign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_sign() const;
  void _internal_set_type_sign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.Ticker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double turnover_;
  double recvtime_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_sign_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class Broker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.Broker) */ {
 public:
  inline Broker() : Broker(nullptr) {}
  virtual ~Broker();
  explicit constexpr Broker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Broker(const Broker& from);
  Broker(Broker&& from) noexcept
    : Broker() {
    *this = ::std::move(from);
  }

  inline Broker& operator=(const Broker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Broker& operator=(Broker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Broker& default_instance() {
    return *internal_default_instance();
  }
  static inline const Broker* internal_default_instance() {
    return reinterpret_cast<const Broker*>(
               &_Broker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Broker& a, Broker& b) {
    a.Swap(&b);
  }
  inline void Swap(Broker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Broker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Broker* New() const final {
    return CreateMaybeMessage<Broker>(nullptr);
  }

  Broker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Broker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Broker& from);
  void MergeFrom(const Broker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Broker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.Broker";
  }
  protected:
  explicit Broker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPosFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 pos = 3;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.Broker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class Brokerlist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.Brokerlist) */ {
 public:
  inline Brokerlist() : Brokerlist(nullptr) {}
  virtual ~Brokerlist();
  explicit constexpr Brokerlist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Brokerlist(const Brokerlist& from);
  Brokerlist(Brokerlist&& from) noexcept
    : Brokerlist() {
    *this = ::std::move(from);
  }

  inline Brokerlist& operator=(const Brokerlist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brokerlist& operator=(Brokerlist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brokerlist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Brokerlist* internal_default_instance() {
    return reinterpret_cast<const Brokerlist*>(
               &_Brokerlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Brokerlist& a, Brokerlist& b) {
    a.Swap(&b);
  }
  inline void Swap(Brokerlist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brokerlist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brokerlist* New() const final {
    return CreateMaybeMessage<Brokerlist>(nullptr);
  }

  Brokerlist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brokerlist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brokerlist& from);
  void MergeFrom(const Brokerlist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brokerlist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.Brokerlist";
  }
  protected:
  explicit Brokerlist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerAskListFieldNumber = 2,
    kBrokerBidListFieldNumber = 3,
    kSecurityFieldNumber = 1,
  };
  // repeated .Common.Basic.Broker broker_ask_list = 2;
  int broker_ask_list_size() const;
  private:
  int _internal_broker_ask_list_size() const;
  public:
  void clear_broker_ask_list();
  ::Common::Basic::Broker* mutable_broker_ask_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker >*
      mutable_broker_ask_list();
  private:
  const ::Common::Basic::Broker& _internal_broker_ask_list(int index) const;
  ::Common::Basic::Broker* _internal_add_broker_ask_list();
  public:
  const ::Common::Basic::Broker& broker_ask_list(int index) const;
  ::Common::Basic::Broker* add_broker_ask_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker >&
      broker_ask_list() const;

  // repeated .Common.Basic.Broker broker_bid_list = 3;
  int broker_bid_list_size() const;
  private:
  int _internal_broker_bid_list_size() const;
  public:
  void clear_broker_bid_list();
  ::Common::Basic::Broker* mutable_broker_bid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker >*
      mutable_broker_bid_list();
  private:
  const ::Common::Basic::Broker& _internal_broker_bid_list(int index) const;
  ::Common::Basic::Broker* _internal_add_broker_bid_list();
  public:
  const ::Common::Basic::Broker& broker_bid_list(int index) const;
  ::Common::Basic::Broker* add_broker_bid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker >&
      broker_bid_list() const;

  // .Common.Basic.Security security = 1;
  bool has_security() const;
  private:
  bool _internal_has_security() const;
  public:
  void clear_security();
  const ::Common::Basic::Security& security() const;
  ::Common::Basic::Security* release_security();
  ::Common::Basic::Security* mutable_security();
  void set_allocated_security(::Common::Basic::Security* security);
  private:
  const ::Common::Basic::Security& _internal_security() const;
  ::Common::Basic::Security* _internal_mutable_security();
  public:
  void unsafe_arena_set_allocated_security(
      ::Common::Basic::Security* security);
  ::Common::Basic::Security* unsafe_arena_release_security();

  // @@protoc_insertion_point(class_scope:Common.Basic.Brokerlist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker > broker_ask_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker > broker_bid_list_;
  ::Common::Basic::Security* security_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class OrderBookDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.OrderBookDetail) */ {
 public:
  inline OrderBookDetail() : OrderBookDetail(nullptr) {}
  virtual ~OrderBookDetail();
  explicit constexpr OrderBookDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderBookDetail(const OrderBookDetail& from);
  OrderBookDetail(OrderBookDetail&& from) noexcept
    : OrderBookDetail() {
    *this = ::std::move(from);
  }

  inline OrderBookDetail& operator=(const OrderBookDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderBookDetail& operator=(OrderBookDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderBookDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderBookDetail* internal_default_instance() {
    return reinterpret_cast<const OrderBookDetail*>(
               &_OrderBookDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OrderBookDetail& a, OrderBookDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderBookDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderBookDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderBookDetail* New() const final {
    return CreateMaybeMessage<OrderBookDetail>(nullptr);
  }

  OrderBookDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderBookDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderBookDetail& from);
  void MergeFrom(const OrderBookDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBookDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.OrderBookDetail";
  }
  protected:
  explicit OrderBookDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskPriceFieldNumber = 1,
    kAskVolumeFieldNumber = 2,
    kBidPriceFieldNumber = 4,
    kAskOrderCountFieldNumber = 3,
    kBidOrderCountFieldNumber = 6,
    kBidVolumeFieldNumber = 5,
  };
  // double ask_price = 1;
  void clear_ask_price();
  double ask_price() const;
  void set_ask_price(double value);
  private:
  double _internal_ask_price() const;
  void _internal_set_ask_price(double value);
  public:

  // int64 ask_volume = 2;
  void clear_ask_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 ask_volume() const;
  void set_ask_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ask_volume() const;
  void _internal_set_ask_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double bid_price = 4;
  void clear_bid_price();
  double bid_price() const;
  void set_bid_price(double value);
  private:
  double _internal_bid_price() const;
  void _internal_set_bid_price(double value);
  public:

  // int32 ask_order_count = 3;
  void clear_ask_order_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ask_order_count() const;
  void set_ask_order_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ask_order_count() const;
  void _internal_set_ask_order_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bid_order_count = 6;
  void clear_bid_order_count();
  ::PROTOBUF_NAMESPACE_ID::int32 bid_order_count() const;
  void set_bid_order_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid_order_count() const;
  void _internal_set_bid_order_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 bid_volume = 5;
  void clear_bid_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 bid_volume() const;
  void set_bid_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bid_volume() const;
  void _internal_set_bid_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.OrderBookDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double ask_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 ask_volume_;
  double bid_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 ask_order_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_order_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 bid_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class OrderBook PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.OrderBook) */ {
 public:
  inline OrderBook() : OrderBook(nullptr) {}
  virtual ~OrderBook();
  explicit constexpr OrderBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderBook(const OrderBook& from);
  OrderBook(OrderBook&& from) noexcept
    : OrderBook() {
    *this = ::std::move(from);
  }

  inline OrderBook& operator=(const OrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderBook& operator=(OrderBook&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderBook* internal_default_instance() {
    return reinterpret_cast<const OrderBook*>(
               &_OrderBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(OrderBook& a, OrderBook& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderBook* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderBook* New() const final {
    return CreateMaybeMessage<OrderBook>(nullptr);
  }

  OrderBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderBook& from);
  void MergeFrom(const OrderBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.OrderBook";
  }
  protected:
  explicit OrderBook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailListFieldNumber = 4,
    kSecurityFieldNumber = 1,
    kUpdateTimeFieldNumber = 3,
    kOrderLevelCountFieldNumber = 2,
  };
  // repeated .Common.Basic.OrderBookDetail detail_list = 4;
  int detail_list_size() const;
  private:
  int _internal_detail_list_size() const;
  public:
  void clear_detail_list();
  ::Common::Basic::OrderBookDetail* mutable_detail_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::OrderBookDetail >*
      mutable_detail_list();
  private:
  const ::Common::Basic::OrderBookDetail& _internal_detail_list(int index) const;
  ::Common::Basic::OrderBookDetail* _internal_add_detail_list();
  public:
  const ::Common::Basic::OrderBookDetail& detail_list(int index) const;
  ::Common::Basic::OrderBookDetail* add_detail_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::OrderBookDetail >&
      detail_list() const;

  // .Common.Basic.Security security = 1;
  bool has_security() const;
  private:
  bool _internal_has_security() const;
  public:
  void clear_security();
  const ::Common::Basic::Security& security() const;
  ::Common::Basic::Security* release_security();
  ::Common::Basic::Security* mutable_security();
  void set_allocated_security(::Common::Basic::Security* security);
  private:
  const ::Common::Basic::Security& _internal_security() const;
  ::Common::Basic::Security* _internal_mutable_security();
  public:
  void unsafe_arena_set_allocated_security(
      ::Common::Basic::Security* security);
  ::Common::Basic::Security* unsafe_arena_release_security();

  // uint64 update_time = 3;
  void clear_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 update_time() const;
  void set_update_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_update_time() const;
  void _internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 order_level_count = 2;
  void clear_order_level_count();
  ::PROTOBUF_NAMESPACE_ID::int32 order_level_count() const;
  void set_order_level_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_level_count() const;
  void _internal_set_order_level_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.OrderBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::OrderBookDetail > detail_list_;
  ::Common::Basic::Security* security_;
  ::PROTOBUF_NAMESPACE_ID::uint64 update_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_level_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class PlateInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.PlateInfo) */ {
 public:
  inline PlateInfo() : PlateInfo(nullptr) {}
  virtual ~PlateInfo();
  explicit constexpr PlateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlateInfo(const PlateInfo& from);
  PlateInfo(PlateInfo&& from) noexcept
    : PlateInfo() {
    *this = ::std::move(from);
  }

  inline PlateInfo& operator=(const PlateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlateInfo& operator=(PlateInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlateInfo* internal_default_instance() {
    return reinterpret_cast<const PlateInfo*>(
               &_PlateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PlateInfo& a, PlateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlateInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlateInfo* New() const final {
    return CreateMaybeMessage<PlateInfo>(nullptr);
  }

  PlateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlateInfo& from);
  void MergeFrom(const PlateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.PlateInfo";
  }
  protected:
  explicit PlateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPlateFieldNumber = 1,
    kPlateTypeFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Common.Basic.Security plate = 1;
  bool has_plate() const;
  private:
  bool _internal_has_plate() const;
  public:
  void clear_plate();
  const ::Common::Basic::Security& plate() const;
  ::Common::Basic::Security* release_plate();
  ::Common::Basic::Security* mutable_plate();
  void set_allocated_plate(::Common::Basic::Security* plate);
  private:
  const ::Common::Basic::Security& _internal_plate() const;
  ::Common::Basic::Security* _internal_mutable_plate();
  public:
  void unsafe_arena_set_allocated_plate(
      ::Common::Basic::Security* plate);
  ::Common::Basic::Security* unsafe_arena_release_plate();

  // int32 plate_type = 3;
  void clear_plate_type();
  ::PROTOBUF_NAMESPACE_ID::int32 plate_type() const;
  void set_plate_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plate_type() const;
  void _internal_set_plate_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.PlateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Common::Basic::Security* plate_;
  ::PROTOBUF_NAMESPACE_ID::int32 plate_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class Rehab PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.Rehab) */ {
 public:
  inline Rehab() : Rehab(nullptr) {}
  virtual ~Rehab();
  explicit constexpr Rehab(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rehab(const Rehab& from);
  Rehab(Rehab&& from) noexcept
    : Rehab() {
    *this = ::std::move(from);
  }

  inline Rehab& operator=(const Rehab& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rehab& operator=(Rehab&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rehab& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rehab* internal_default_instance() {
    return reinterpret_cast<const Rehab*>(
               &_Rehab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Rehab& a, Rehab& b) {
    a.Swap(&b);
  }
  inline void Swap(Rehab* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rehab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rehab* New() const final {
    return CreateMaybeMessage<Rehab>(nullptr);
  }

  Rehab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rehab>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rehab& from);
  void MergeFrom(const Rehab& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rehab* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.Rehab";
  }
  protected:
  explicit Rehab(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kCompanyActFlagFieldNumber = 2,
    kFwdFactorAFieldNumber = 3,
    kFwdFactorBFieldNumber = 4,
    kBwdFactorAFieldNumber = 5,
    kBwdFactorBFieldNumber = 6,
    kSplitBaseFieldNumber = 7,
    kSplitFieldNumber = 8,
    kJoinBaseFieldNumber = 9,
    kJoinFieldNumber = 10,
    kBonusBaseFieldNumber = 11,
    kBonusFieldNumber = 12,
    kTransferBaseFieldNumber = 13,
    kTransferFieldNumber = 14,
    kAllotBaseFieldNumber = 15,
    kAllotFieldNumber = 16,
    kAllotPriceFieldNumber = 17,
    kAddBaseFieldNumber = 18,
    kAddFieldNumber = 19,
    kAddPriceFieldNumber = 20,
    kDividendFieldNumber = 21,
    kSpecialDividendFieldNumber = 22,
    kTimestampFieldNumber = 23,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // int64 company_act_flag = 2;
  void clear_company_act_flag();
  ::PROTOBUF_NAMESPACE_ID::int64 company_act_flag() const;
  void set_company_act_flag(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_company_act_flag() const;
  void _internal_set_company_act_flag(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double fwd_factor_A = 3;
  void clear_fwd_factor_a();
  double fwd_factor_a() const;
  void set_fwd_factor_a(double value);
  private:
  double _internal_fwd_factor_a() const;
  void _internal_set_fwd_factor_a(double value);
  public:

  // double fwd_factor_B = 4;
  void clear_fwd_factor_b();
  double fwd_factor_b() const;
  void set_fwd_factor_b(double value);
  private:
  double _internal_fwd_factor_b() const;
  void _internal_set_fwd_factor_b(double value);
  public:

  // double bwd_factor_A = 5;
  void clear_bwd_factor_a();
  double bwd_factor_a() const;
  void set_bwd_factor_a(double value);
  private:
  double _internal_bwd_factor_a() const;
  void _internal_set_bwd_factor_a(double value);
  public:

  // double bwd_factor_B = 6;
  void clear_bwd_factor_b();
  double bwd_factor_b() const;
  void set_bwd_factor_b(double value);
  private:
  double _internal_bwd_factor_b() const;
  void _internal_set_bwd_factor_b(double value);
  public:

  // int32 split_base = 7;
  void clear_split_base();
  ::PROTOBUF_NAMESPACE_ID::int32 split_base() const;
  void set_split_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_base() const;
  void _internal_set_split_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 split = 8;
  void clear_split();
  ::PROTOBUF_NAMESPACE_ID::int32 split() const;
  void set_split(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split() const;
  void _internal_set_split(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 join_base = 9;
  void clear_join_base();
  ::PROTOBUF_NAMESPACE_ID::int32 join_base() const;
  void set_join_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_join_base() const;
  void _internal_set_join_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 join = 10;
  void clear_join();
  ::PROTOBUF_NAMESPACE_ID::int32 join() const;
  void set_join(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_join() const;
  void _internal_set_join(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bonus_base = 11;
  void clear_bonus_base();
  ::PROTOBUF_NAMESPACE_ID::int32 bonus_base() const;
  void set_bonus_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bonus_base() const;
  void _internal_set_bonus_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bonus = 12;
  void clear_bonus();
  ::PROTOBUF_NAMESPACE_ID::int32 bonus() const;
  void set_bonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bonus() const;
  void _internal_set_bonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 transfer_base = 13;
  void clear_transfer_base();
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_base() const;
  void set_transfer_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transfer_base() const;
  void _internal_set_transfer_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 transfer = 14;
  void clear_transfer();
  ::PROTOBUF_NAMESPACE_ID::int32 transfer() const;
  void set_transfer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transfer() const;
  void _internal_set_transfer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 allot_base = 15;
  void clear_allot_base();
  ::PROTOBUF_NAMESPACE_ID::int32 allot_base() const;
  void set_allot_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allot_base() const;
  void _internal_set_allot_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 allot = 16;
  void clear_allot();
  ::PROTOBUF_NAMESPACE_ID::int32 allot() const;
  void set_allot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allot() const;
  void _internal_set_allot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double allot_price = 17;
  void clear_allot_price();
  double allot_price() const;
  void set_allot_price(double value);
  private:
  double _internal_allot_price() const;
  void _internal_set_allot_price(double value);
  public:

  // int32 add_base = 18;
  void clear_add_base();
  ::PROTOBUF_NAMESPACE_ID::int32 add_base() const;
  void set_add_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add_base() const;
  void _internal_set_add_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 add = 19;
  void clear_add();
  ::PROTOBUF_NAMESPACE_ID::int32 add() const;
  void set_add(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add() const;
  void _internal_set_add(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double add_price = 20;
  void clear_add_price();
  double add_price() const;
  void set_add_price(double value);
  private:
  double _internal_add_price() const;
  void _internal_set_add_price(double value);
  public:

  // double dividend = 21;
  void clear_dividend();
  double dividend() const;
  void set_dividend(double value);
  private:
  double _internal_dividend() const;
  void _internal_set_dividend(double value);
  public:

  // double special_dividend = 22;
  void clear_special_dividend();
  double special_dividend() const;
  void set_special_dividend(double value);
  private:
  double _internal_special_dividend() const;
  void _internal_set_special_dividend(double value);
  public:

  // double timestamp = 23;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.Rehab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int64 company_act_flag_;
  double fwd_factor_a_;
  double fwd_factor_b_;
  double bwd_factor_a_;
  double bwd_factor_b_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_base_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_;
  ::PROTOBUF_NAMESPACE_ID::int32 join_base_;
  ::PROTOBUF_NAMESPACE_ID::int32 join_;
  ::PROTOBUF_NAMESPACE_ID::int32 bonus_base_;
  ::PROTOBUF_NAMESPACE_ID::int32 bonus_;
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_base_;
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_;
  ::PROTOBUF_NAMESPACE_ID::int32 allot_base_;
  ::PROTOBUF_NAMESPACE_ID::int32 allot_;
  double allot_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_base_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_;
  double add_price_;
  double dividend_;
  double special_dividend_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class CapitalFlow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.CapitalFlow) */ {
 public:
  inline CapitalFlow() : CapitalFlow(nullptr) {}
  virtual ~CapitalFlow();
  explicit constexpr CapitalFlow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapitalFlow(const CapitalFlow& from);
  CapitalFlow(CapitalFlow&& from) noexcept
    : CapitalFlow() {
    *this = ::std::move(from);
  }

  inline CapitalFlow& operator=(const CapitalFlow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapitalFlow& operator=(CapitalFlow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapitalFlow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapitalFlow* internal_default_instance() {
    return reinterpret_cast<const CapitalFlow*>(
               &_CapitalFlow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CapitalFlow& a, CapitalFlow& b) {
    a.Swap(&b);
  }
  inline void Swap(CapitalFlow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapitalFlow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapitalFlow* New() const final {
    return CreateMaybeMessage<CapitalFlow>(nullptr);
  }

  CapitalFlow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapitalFlow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapitalFlow& from);
  void MergeFrom(const CapitalFlow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapitalFlow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.CapitalFlow";
  }
  protected:
  explicit CapitalFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateTimeFieldNumber = 7,
    kCapitalInBigFieldNumber = 1,
    kCapitalInMidFieldNumber = 2,
    kCapitalInSmallFieldNumber = 3,
    kCapitalOutBigFieldNumber = 4,
    kCapitalOutMidFieldNumber = 5,
    kCapitalOutSmallFieldNumber = 6,
    kUpdateTimestampFieldNumber = 8,
  };
  // string update_time = 7;
  void clear_update_time();
  const std::string& update_time() const;
  void set_update_time(const std::string& value);
  void set_update_time(std::string&& value);
  void set_update_time(const char* value);
  void set_update_time(const char* value, size_t size);
  std::string* mutable_update_time();
  std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // double capital_in_big = 1;
  void clear_capital_in_big();
  double capital_in_big() const;
  void set_capital_in_big(double value);
  private:
  double _internal_capital_in_big() const;
  void _internal_set_capital_in_big(double value);
  public:

  // double capital_in_mid = 2;
  void clear_capital_in_mid();
  double capital_in_mid() const;
  void set_capital_in_mid(double value);
  private:
  double _internal_capital_in_mid() const;
  void _internal_set_capital_in_mid(double value);
  public:

  // double capital_in_small = 3;
  void clear_capital_in_small();
  double capital_in_small() const;
  void set_capital_in_small(double value);
  private:
  double _internal_capital_in_small() const;
  void _internal_set_capital_in_small(double value);
  public:

  // double capital_out_big = 4;
  void clear_capital_out_big();
  double capital_out_big() const;
  void set_capital_out_big(double value);
  private:
  double _internal_capital_out_big() const;
  void _internal_set_capital_out_big(double value);
  public:

  // double capital_out_mid = 5;
  void clear_capital_out_mid();
  double capital_out_mid() const;
  void set_capital_out_mid(double value);
  private:
  double _internal_capital_out_mid() const;
  void _internal_set_capital_out_mid(double value);
  public:

  // double capital_out_small = 6;
  void clear_capital_out_small();
  double capital_out_small() const;
  void set_capital_out_small(double value);
  private:
  double _internal_capital_out_small() const;
  void _internal_set_capital_out_small(double value);
  public:

  // double update_timestamp = 8;
  void clear_update_timestamp();
  double update_timestamp() const;
  void set_update_timestamp(double value);
  private:
  double _internal_update_timestamp() const;
  void _internal_set_update_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.CapitalFlow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  double capital_in_big_;
  double capital_in_mid_;
  double capital_in_small_;
  double capital_out_big_;
  double capital_out_mid_;
  double capital_out_small_;
  double update_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class KLine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.KLine) */ {
 public:
  inline KLine() : KLine(nullptr) {}
  virtual ~KLine();
  explicit constexpr KLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KLine(const KLine& from);
  KLine(KLine&& from) noexcept
    : KLine() {
    *this = ::std::move(from);
  }

  inline KLine& operator=(const KLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline KLine& operator=(KLine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const KLine* internal_default_instance() {
    return reinterpret_cast<const KLine*>(
               &_KLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(KLine& a, KLine& b) {
    a.Swap(&b);
  }
  inline void Swap(KLine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KLine* New() const final {
    return CreateMaybeMessage<KLine>(nullptr);
  }

  KLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KLine& from);
  void MergeFrom(const KLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.KLine";
  }
  protected:
  explicit KLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kHighPriceFieldNumber = 3,
    kOpenPriceFieldNumber = 4,
    kLowPriceFieldNumber = 5,
    kClosePriceFieldNumber = 6,
    kLastClosePriceFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kTurnoverFieldNumber = 9,
    kTurnoverRateFieldNumber = 10,
    kPeFieldNumber = 11,
    kChangeRateFieldNumber = 12,
    kTimestampFieldNumber = 13,
    kIsBlankFieldNumber = 2,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // double high_price = 3;
  void clear_high_price();
  double high_price() const;
  void set_high_price(double value);
  private:
  double _internal_high_price() const;
  void _internal_set_high_price(double value);
  public:

  // double open_price = 4;
  void clear_open_price();
  double open_price() const;
  void set_open_price(double value);
  private:
  double _internal_open_price() const;
  void _internal_set_open_price(double value);
  public:

  // double low_price = 5;
  void clear_low_price();
  double low_price() const;
  void set_low_price(double value);
  private:
  double _internal_low_price() const;
  void _internal_set_low_price(double value);
  public:

  // double close_price = 6;
  void clear_close_price();
  double close_price() const;
  void set_close_price(double value);
  private:
  double _internal_close_price() const;
  void _internal_set_close_price(double value);
  public:

  // double last_close_price = 7;
  void clear_last_close_price();
  double last_close_price() const;
  void set_last_close_price(double value);
  private:
  double _internal_last_close_price() const;
  void _internal_set_last_close_price(double value);
  public:

  // int64 volume = 8;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double turnover = 9;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double turnover_rate = 10;
  void clear_turnover_rate();
  double turnover_rate() const;
  void set_turnover_rate(double value);
  private:
  double _internal_turnover_rate() const;
  void _internal_set_turnover_rate(double value);
  public:

  // double pe = 11;
  void clear_pe();
  double pe() const;
  void set_pe(double value);
  private:
  double _internal_pe() const;
  void _internal_set_pe(double value);
  public:

  // double change_rate = 12;
  void clear_change_rate();
  double change_rate() const;
  void set_change_rate(double value);
  private:
  double _internal_change_rate() const;
  void _internal_set_change_rate(double value);
  public:

  // double timestamp = 13;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // bool is_blank = 2;
  void clear_is_blank();
  bool is_blank() const;
  void set_is_blank(bool value);
  private:
  bool _internal_is_blank() const;
  void _internal_set_is_blank(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.KLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  double high_price_;
  double open_price_;
  double low_price_;
  double close_price_;
  double last_close_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  double turnover_;
  double turnover_rate_;
  double pe_;
  double change_rate_;
  double timestamp_;
  bool is_blank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class TimeShare PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.Basic.TimeShare) */ {
 public:
  inline TimeShare() : TimeShare(nullptr) {}
  virtual ~TimeShare();
  explicit constexpr TimeShare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeShare(const TimeShare& from);
  TimeShare(TimeShare&& from) noexcept
    : TimeShare() {
    *this = ::std::move(from);
  }

  inline TimeShare& operator=(const TimeShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeShare& operator=(TimeShare&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeShare& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeShare* internal_default_instance() {
    return reinterpret_cast<const TimeShare*>(
               &_TimeShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TimeShare& a, TimeShare& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeShare* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeShare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeShare* New() const final {
    return CreateMaybeMessage<TimeShare>(nullptr);
  }

  TimeShare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeShare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeShare& from);
  void MergeFrom(const TimeShare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeShare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.Basic.TimeShare";
  }
  protected:
  explicit TimeShare(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Basic_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kPriceFieldNumber = 3,
    kLastClosePriceFieldNumber = 4,
    kAvgPriceFieldNumber = 5,
    kVolumeFieldNumber = 6,
    kTurnoverFieldNumber = 7,
    kIsBlankFieldNumber = 2,
    kTimestampFieldNumber = 98,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // double price = 3;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double last_close_price = 4;
  void clear_last_close_price();
  double last_close_price() const;
  void set_last_close_price(double value);
  private:
  double _internal_last_close_price() const;
  void _internal_set_last_close_price(double value);
  public:

  // double avg_price = 5;
  void clear_avg_price();
  double avg_price() const;
  void set_avg_price(double value);
  private:
  double _internal_avg_price() const;
  void _internal_set_avg_price(double value);
  public:

  // int64 volume = 6;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double turnover = 7;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // bool is_blank = 2;
  void clear_is_blank();
  bool is_blank() const;
  void set_is_blank(bool value);
  private:
  bool _internal_is_blank() const;
  void _internal_set_is_blank(bool value);
  public:

  // double timestamp = 98;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:Common.Basic.TimeShare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  double price_;
  double last_close_price_;
  double avg_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  double turnover_;
  bool is_blank_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Security

// int32 market = 1;
inline void Security::clear_market() {
  market_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Security::_internal_market() const {
  return market_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Security::market() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Security.market)
  return _internal_market();
}
inline void Security::_internal_set_market(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  market_ = value;
}
inline void Security::set_market(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Security.market)
}

// string code = 2;
inline void Security::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& Security::code() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Security.code)
  return _internal_code();
}
inline void Security::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Security.code)
}
inline std::string* Security::mutable_code() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.Security.code)
  return _internal_mutable_code();
}
inline const std::string& Security::_internal_code() const {
  return code_.Get();
}
inline void Security::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Security::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.Security.code)
}
inline void Security::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.Security.code)
}
inline void Security::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.Security.code)
}
inline std::string* Security::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Security::release_code() {
  // @@protoc_insertion_point(field_release:Common.Basic.Security.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Security::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.Security.code)
}

// -------------------------------------------------------------------

// PreAfterMarketData

// double price = 1;
inline void PreAfterMarketData::clear_price() {
  price_ = 0;
}
inline double PreAfterMarketData::_internal_price() const {
  return price_;
}
inline double PreAfterMarketData::price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PreAfterMarketData.price)
  return _internal_price();
}
inline void PreAfterMarketData::_internal_set_price(double value) {
  
  price_ = value;
}
inline void PreAfterMarketData::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PreAfterMarketData.price)
}

// double high_price = 2;
inline void PreAfterMarketData::clear_high_price() {
  high_price_ = 0;
}
inline double PreAfterMarketData::_internal_high_price() const {
  return high_price_;
}
inline double PreAfterMarketData::high_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PreAfterMarketData.high_price)
  return _internal_high_price();
}
inline void PreAfterMarketData::_internal_set_high_price(double value) {
  
  high_price_ = value;
}
inline void PreAfterMarketData::set_high_price(double value) {
  _internal_set_high_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PreAfterMarketData.high_price)
}

// double low_price = 3;
inline void PreAfterMarketData::clear_low_price() {
  low_price_ = 0;
}
inline double PreAfterMarketData::_internal_low_price() const {
  return low_price_;
}
inline double PreAfterMarketData::low_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PreAfterMarketData.low_price)
  return _internal_low_price();
}
inline void PreAfterMarketData::_internal_set_low_price(double value) {
  
  low_price_ = value;
}
inline void PreAfterMarketData::set_low_price(double value) {
  _internal_set_low_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PreAfterMarketData.low_price)
}

// int64 volume = 4;
inline void PreAfterMarketData::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PreAfterMarketData::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PreAfterMarketData::volume() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PreAfterMarketData.volume)
  return _internal_volume();
}
inline void PreAfterMarketData::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void PreAfterMarketData::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PreAfterMarketData.volume)
}

// double turnover = 5;
inline void PreAfterMarketData::clear_turnover() {
  turnover_ = 0;
}
inline double PreAfterMarketData::_internal_turnover() const {
  return turnover_;
}
inline double PreAfterMarketData::turnover() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PreAfterMarketData.turnover)
  return _internal_turnover();
}
inline void PreAfterMarketData::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void PreAfterMarketData::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PreAfterMarketData.turnover)
}

// double change_value = 6;
inline void PreAfterMarketData::clear_change_value() {
  change_value_ = 0;
}
inline double PreAfterMarketData::_internal_change_value() const {
  return change_value_;
}
inline double PreAfterMarketData::change_value() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PreAfterMarketData.change_value)
  return _internal_change_value();
}
inline void PreAfterMarketData::_internal_set_change_value(double value) {
  
  change_value_ = value;
}
inline void PreAfterMarketData::set_change_value(double value) {
  _internal_set_change_value(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PreAfterMarketData.change_value)
}

// double change_rate = 7;
inline void PreAfterMarketData::clear_change_rate() {
  change_rate_ = 0;
}
inline double PreAfterMarketData::_internal_change_rate() const {
  return change_rate_;
}
inline double PreAfterMarketData::change_rate() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PreAfterMarketData.change_rate)
  return _internal_change_rate();
}
inline void PreAfterMarketData::_internal_set_change_rate(double value) {
  
  change_rate_ = value;
}
inline void PreAfterMarketData::set_change_rate(double value) {
  _internal_set_change_rate(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PreAfterMarketData.change_rate)
}

// double amplitude = 8;
inline void PreAfterMarketData::clear_amplitude() {
  amplitude_ = 0;
}
inline double PreAfterMarketData::_internal_amplitude() const {
  return amplitude_;
}
inline double PreAfterMarketData::amplitude() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PreAfterMarketData.amplitude)
  return _internal_amplitude();
}
inline void PreAfterMarketData::_internal_set_amplitude(double value) {
  
  amplitude_ = value;
}
inline void PreAfterMarketData::set_amplitude(double value) {
  _internal_set_amplitude(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PreAfterMarketData.amplitude)
}

// -------------------------------------------------------------------

// FutureBasicQotExData

// double last_settle_price = 1;
inline void FutureBasicQotExData::clear_last_settle_price() {
  last_settle_price_ = 0;
}
inline double FutureBasicQotExData::_internal_last_settle_price() const {
  return last_settle_price_;
}
inline double FutureBasicQotExData::last_settle_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureBasicQotExData.last_settle_price)
  return _internal_last_settle_price();
}
inline void FutureBasicQotExData::_internal_set_last_settle_price(double value) {
  
  last_settle_price_ = value;
}
inline void FutureBasicQotExData::set_last_settle_price(double value) {
  _internal_set_last_settle_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureBasicQotExData.last_settle_price)
}

// int32 position = 2;
inline void FutureBasicQotExData::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FutureBasicQotExData::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FutureBasicQotExData::position() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureBasicQotExData.position)
  return _internal_position();
}
inline void FutureBasicQotExData::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
}
inline void FutureBasicQotExData::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureBasicQotExData.position)
}

// int32 pre_open_interest = 3;
inline void FutureBasicQotExData::clear_pre_open_interest() {
  pre_open_interest_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FutureBasicQotExData::_internal_pre_open_interest() const {
  return pre_open_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FutureBasicQotExData::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureBasicQotExData.pre_open_interest)
  return _internal_pre_open_interest();
}
inline void FutureBasicQotExData::_internal_set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pre_open_interest_ = value;
}
inline void FutureBasicQotExData::set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pre_open_interest(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureBasicQotExData.pre_open_interest)
}

// double upper_limit_price = 4;
inline void FutureBasicQotExData::clear_upper_limit_price() {
  upper_limit_price_ = 0;
}
inline double FutureBasicQotExData::_internal_upper_limit_price() const {
  return upper_limit_price_;
}
inline double FutureBasicQotExData::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureBasicQotExData.upper_limit_price)
  return _internal_upper_limit_price();
}
inline void FutureBasicQotExData::_internal_set_upper_limit_price(double value) {
  
  upper_limit_price_ = value;
}
inline void FutureBasicQotExData::set_upper_limit_price(double value) {
  _internal_set_upper_limit_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureBasicQotExData.upper_limit_price)
}

// double lower_limit_price = 5;
inline void FutureBasicQotExData::clear_lower_limit_price() {
  lower_limit_price_ = 0;
}
inline double FutureBasicQotExData::_internal_lower_limit_price() const {
  return lower_limit_price_;
}
inline double FutureBasicQotExData::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureBasicQotExData.lower_limit_price)
  return _internal_lower_limit_price();
}
inline void FutureBasicQotExData::_internal_set_lower_limit_price(double value) {
  
  lower_limit_price_ = value;
}
inline void FutureBasicQotExData::set_lower_limit_price(double value) {
  _internal_set_lower_limit_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureBasicQotExData.lower_limit_price)
}

// double close_price = 6;
inline void FutureBasicQotExData::clear_close_price() {
  close_price_ = 0;
}
inline double FutureBasicQotExData::_internal_close_price() const {
  return close_price_;
}
inline double FutureBasicQotExData::close_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureBasicQotExData.close_price)
  return _internal_close_price();
}
inline void FutureBasicQotExData::_internal_set_close_price(double value) {
  
  close_price_ = value;
}
inline void FutureBasicQotExData::set_close_price(double value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureBasicQotExData.close_price)
}

// double pre_delta = 7;
inline void FutureBasicQotExData::clear_pre_delta() {
  pre_delta_ = 0;
}
inline double FutureBasicQotExData::_internal_pre_delta() const {
  return pre_delta_;
}
inline double FutureBasicQotExData::pre_delta() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureBasicQotExData.pre_delta)
  return _internal_pre_delta();
}
inline void FutureBasicQotExData::_internal_set_pre_delta(double value) {
  
  pre_delta_ = value;
}
inline void FutureBasicQotExData::set_pre_delta(double value) {
  _internal_set_pre_delta(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureBasicQotExData.pre_delta)
}

// double curr_delta = 8;
inline void FutureBasicQotExData::clear_curr_delta() {
  curr_delta_ = 0;
}
inline double FutureBasicQotExData::_internal_curr_delta() const {
  return curr_delta_;
}
inline double FutureBasicQotExData::curr_delta() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureBasicQotExData.curr_delta)
  return _internal_curr_delta();
}
inline void FutureBasicQotExData::_internal_set_curr_delta(double value) {
  
  curr_delta_ = value;
}
inline void FutureBasicQotExData::set_curr_delta(double value) {
  _internal_set_curr_delta(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureBasicQotExData.curr_delta)
}

// -------------------------------------------------------------------

// BasicQot

// .Common.Basic.Security security = 1;
inline bool BasicQot::_internal_has_security() const {
  return this != internal_default_instance() && security_ != nullptr;
}
inline bool BasicQot::has_security() const {
  return _internal_has_security();
}
inline void BasicQot::clear_security() {
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
}
inline const ::Common::Basic::Security& BasicQot::_internal_security() const {
  const ::Common::Basic::Security* p = security_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::Security&>(
      ::Common::Basic::_Security_default_instance_);
}
inline const ::Common::Basic::Security& BasicQot::security() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.security)
  return _internal_security();
}
inline void BasicQot::unsafe_arena_set_allocated_security(
    ::Common::Basic::Security* security) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_);
  }
  security_ = security;
  if (security) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.BasicQot.security)
}
inline ::Common::Basic::Security* BasicQot::release_security() {
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::Security* BasicQot::unsafe_arena_release_security() {
  // @@protoc_insertion_point(field_release:Common.Basic.BasicQot.security)
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  return temp;
}
inline ::Common::Basic::Security* BasicQot::_internal_mutable_security() {
  
  if (security_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::Security>(GetArena());
    security_ = p;
  }
  return security_;
}
inline ::Common::Basic::Security* BasicQot::mutable_security() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.BasicQot.security)
  return _internal_mutable_security();
}
inline void BasicQot::set_allocated_security(::Common::Basic::Security* security) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_;
  }
  if (security) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security);
    if (message_arena != submessage_arena) {
      security = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    
  } else {
    
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.BasicQot.security)
}

// uint64 update_time = 2;
inline void BasicQot::clear_update_time() {
  update_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicQot::_internal_update_time() const {
  return update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicQot::update_time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.update_time)
  return _internal_update_time();
}
inline void BasicQot::_internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  update_time_ = value;
}
inline void BasicQot::set_update_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.update_time)
}

// double high_price = 3;
inline void BasicQot::clear_high_price() {
  high_price_ = 0;
}
inline double BasicQot::_internal_high_price() const {
  return high_price_;
}
inline double BasicQot::high_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.high_price)
  return _internal_high_price();
}
inline void BasicQot::_internal_set_high_price(double value) {
  
  high_price_ = value;
}
inline void BasicQot::set_high_price(double value) {
  _internal_set_high_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.high_price)
}

// double open_price = 4;
inline void BasicQot::clear_open_price() {
  open_price_ = 0;
}
inline double BasicQot::_internal_open_price() const {
  return open_price_;
}
inline double BasicQot::open_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.open_price)
  return _internal_open_price();
}
inline void BasicQot::_internal_set_open_price(double value) {
  
  open_price_ = value;
}
inline void BasicQot::set_open_price(double value) {
  _internal_set_open_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.open_price)
}

// double low_price = 5;
inline void BasicQot::clear_low_price() {
  low_price_ = 0;
}
inline double BasicQot::_internal_low_price() const {
  return low_price_;
}
inline double BasicQot::low_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.low_price)
  return _internal_low_price();
}
inline void BasicQot::_internal_set_low_price(double value) {
  
  low_price_ = value;
}
inline void BasicQot::set_low_price(double value) {
  _internal_set_low_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.low_price)
}

// double cur_price = 6;
inline void BasicQot::clear_cur_price() {
  cur_price_ = 0;
}
inline double BasicQot::_internal_cur_price() const {
  return cur_price_;
}
inline double BasicQot::cur_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.cur_price)
  return _internal_cur_price();
}
inline void BasicQot::_internal_set_cur_price(double value) {
  
  cur_price_ = value;
}
inline void BasicQot::set_cur_price(double value) {
  _internal_set_cur_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.cur_price)
}

// double prev_close_price = 7;
inline void BasicQot::clear_prev_close_price() {
  prev_close_price_ = 0;
}
inline double BasicQot::_internal_prev_close_price() const {
  return prev_close_price_;
}
inline double BasicQot::prev_close_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.prev_close_price)
  return _internal_prev_close_price();
}
inline void BasicQot::_internal_set_prev_close_price(double value) {
  
  prev_close_price_ = value;
}
inline void BasicQot::set_prev_close_price(double value) {
  _internal_set_prev_close_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.prev_close_price)
}

// int64 volume = 8;
inline void BasicQot::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicQot::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicQot::volume() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.volume)
  return _internal_volume();
}
inline void BasicQot::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void BasicQot::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.volume)
}

// double turnover = 9;
inline void BasicQot::clear_turnover() {
  turnover_ = 0;
}
inline double BasicQot::_internal_turnover() const {
  return turnover_;
}
inline double BasicQot::turnover() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.turnover)
  return _internal_turnover();
}
inline void BasicQot::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void BasicQot::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.turnover)
}

// double turnover_rate = 10;
inline void BasicQot::clear_turnover_rate() {
  turnover_rate_ = 0;
}
inline double BasicQot::_internal_turnover_rate() const {
  return turnover_rate_;
}
inline double BasicQot::turnover_rate() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.turnover_rate)
  return _internal_turnover_rate();
}
inline void BasicQot::_internal_set_turnover_rate(double value) {
  
  turnover_rate_ = value;
}
inline void BasicQot::set_turnover_rate(double value) {
  _internal_set_turnover_rate(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.turnover_rate)
}

// int32 security_status = 11;
inline void BasicQot::clear_security_status() {
  security_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicQot::_internal_security_status() const {
  return security_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicQot::security_status() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.security_status)
  return _internal_security_status();
}
inline void BasicQot::_internal_set_security_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  security_status_ = value;
}
inline void BasicQot::set_security_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_security_status(value);
  // @@protoc_insertion_point(field_set:Common.Basic.BasicQot.security_status)
}

// .Common.Basic.PreAfterMarketData pre_market = 50;
inline bool BasicQot::_internal_has_pre_market() const {
  return this != internal_default_instance() && pre_market_ != nullptr;
}
inline bool BasicQot::has_pre_market() const {
  return _internal_has_pre_market();
}
inline void BasicQot::clear_pre_market() {
  if (GetArena() == nullptr && pre_market_ != nullptr) {
    delete pre_market_;
  }
  pre_market_ = nullptr;
}
inline const ::Common::Basic::PreAfterMarketData& BasicQot::_internal_pre_market() const {
  const ::Common::Basic::PreAfterMarketData* p = pre_market_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::PreAfterMarketData&>(
      ::Common::Basic::_PreAfterMarketData_default_instance_);
}
inline const ::Common::Basic::PreAfterMarketData& BasicQot::pre_market() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.pre_market)
  return _internal_pre_market();
}
inline void BasicQot::unsafe_arena_set_allocated_pre_market(
    ::Common::Basic::PreAfterMarketData* pre_market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_market_);
  }
  pre_market_ = pre_market;
  if (pre_market) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.BasicQot.pre_market)
}
inline ::Common::Basic::PreAfterMarketData* BasicQot::release_pre_market() {
  
  ::Common::Basic::PreAfterMarketData* temp = pre_market_;
  pre_market_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::PreAfterMarketData* BasicQot::unsafe_arena_release_pre_market() {
  // @@protoc_insertion_point(field_release:Common.Basic.BasicQot.pre_market)
  
  ::Common::Basic::PreAfterMarketData* temp = pre_market_;
  pre_market_ = nullptr;
  return temp;
}
inline ::Common::Basic::PreAfterMarketData* BasicQot::_internal_mutable_pre_market() {
  
  if (pre_market_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::PreAfterMarketData>(GetArena());
    pre_market_ = p;
  }
  return pre_market_;
}
inline ::Common::Basic::PreAfterMarketData* BasicQot::mutable_pre_market() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.BasicQot.pre_market)
  return _internal_mutable_pre_market();
}
inline void BasicQot::set_allocated_pre_market(::Common::Basic::PreAfterMarketData* pre_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pre_market_;
  }
  if (pre_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pre_market);
    if (message_arena != submessage_arena) {
      pre_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre_market, submessage_arena);
    }
    
  } else {
    
  }
  pre_market_ = pre_market;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.BasicQot.pre_market)
}

// .Common.Basic.PreAfterMarketData after_market = 51;
inline bool BasicQot::_internal_has_after_market() const {
  return this != internal_default_instance() && after_market_ != nullptr;
}
inline bool BasicQot::has_after_market() const {
  return _internal_has_after_market();
}
inline void BasicQot::clear_after_market() {
  if (GetArena() == nullptr && after_market_ != nullptr) {
    delete after_market_;
  }
  after_market_ = nullptr;
}
inline const ::Common::Basic::PreAfterMarketData& BasicQot::_internal_after_market() const {
  const ::Common::Basic::PreAfterMarketData* p = after_market_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::PreAfterMarketData&>(
      ::Common::Basic::_PreAfterMarketData_default_instance_);
}
inline const ::Common::Basic::PreAfterMarketData& BasicQot::after_market() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.after_market)
  return _internal_after_market();
}
inline void BasicQot::unsafe_arena_set_allocated_after_market(
    ::Common::Basic::PreAfterMarketData* after_market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_market_);
  }
  after_market_ = after_market;
  if (after_market) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.BasicQot.after_market)
}
inline ::Common::Basic::PreAfterMarketData* BasicQot::release_after_market() {
  
  ::Common::Basic::PreAfterMarketData* temp = after_market_;
  after_market_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::PreAfterMarketData* BasicQot::unsafe_arena_release_after_market() {
  // @@protoc_insertion_point(field_release:Common.Basic.BasicQot.after_market)
  
  ::Common::Basic::PreAfterMarketData* temp = after_market_;
  after_market_ = nullptr;
  return temp;
}
inline ::Common::Basic::PreAfterMarketData* BasicQot::_internal_mutable_after_market() {
  
  if (after_market_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::PreAfterMarketData>(GetArena());
    after_market_ = p;
  }
  return after_market_;
}
inline ::Common::Basic::PreAfterMarketData* BasicQot::mutable_after_market() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.BasicQot.after_market)
  return _internal_mutable_after_market();
}
inline void BasicQot::set_allocated_after_market(::Common::Basic::PreAfterMarketData* after_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete after_market_;
  }
  if (after_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(after_market);
    if (message_arena != submessage_arena) {
      after_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, after_market, submessage_arena);
    }
    
  } else {
    
  }
  after_market_ = after_market;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.BasicQot.after_market)
}

// .Common.Basic.FutureBasicQotExData future_data = 52;
inline bool BasicQot::_internal_has_future_data() const {
  return this != internal_default_instance() && future_data_ != nullptr;
}
inline bool BasicQot::has_future_data() const {
  return _internal_has_future_data();
}
inline void BasicQot::clear_future_data() {
  if (GetArena() == nullptr && future_data_ != nullptr) {
    delete future_data_;
  }
  future_data_ = nullptr;
}
inline const ::Common::Basic::FutureBasicQotExData& BasicQot::_internal_future_data() const {
  const ::Common::Basic::FutureBasicQotExData* p = future_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::FutureBasicQotExData&>(
      ::Common::Basic::_FutureBasicQotExData_default_instance_);
}
inline const ::Common::Basic::FutureBasicQotExData& BasicQot::future_data() const {
  // @@protoc_insertion_point(field_get:Common.Basic.BasicQot.future_data)
  return _internal_future_data();
}
inline void BasicQot::unsafe_arena_set_allocated_future_data(
    ::Common::Basic::FutureBasicQotExData* future_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(future_data_);
  }
  future_data_ = future_data;
  if (future_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.BasicQot.future_data)
}
inline ::Common::Basic::FutureBasicQotExData* BasicQot::release_future_data() {
  
  ::Common::Basic::FutureBasicQotExData* temp = future_data_;
  future_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::FutureBasicQotExData* BasicQot::unsafe_arena_release_future_data() {
  // @@protoc_insertion_point(field_release:Common.Basic.BasicQot.future_data)
  
  ::Common::Basic::FutureBasicQotExData* temp = future_data_;
  future_data_ = nullptr;
  return temp;
}
inline ::Common::Basic::FutureBasicQotExData* BasicQot::_internal_mutable_future_data() {
  
  if (future_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::FutureBasicQotExData>(GetArena());
    future_data_ = p;
  }
  return future_data_;
}
inline ::Common::Basic::FutureBasicQotExData* BasicQot::mutable_future_data() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.BasicQot.future_data)
  return _internal_mutable_future_data();
}
inline void BasicQot::set_allocated_future_data(::Common::Basic::FutureBasicQotExData* future_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete future_data_;
  }
  if (future_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(future_data);
    if (message_arena != submessage_arena) {
      future_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, future_data, submessage_arena);
    }
    
  } else {
    
  }
  future_data_ = future_data;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.BasicQot.future_data)
}

// -------------------------------------------------------------------

// HKSecurityStaticBasic

// bool VCM_flag = 2;
inline void HKSecurityStaticBasic::clear_vcm_flag() {
  vcm_flag_ = false;
}
inline bool HKSecurityStaticBasic::_internal_vcm_flag() const {
  return vcm_flag_;
}
inline bool HKSecurityStaticBasic::vcm_flag() const {
  // @@protoc_insertion_point(field_get:Common.Basic.HKSecurityStaticBasic.VCM_flag)
  return _internal_vcm_flag();
}
inline void HKSecurityStaticBasic::_internal_set_vcm_flag(bool value) {
  
  vcm_flag_ = value;
}
inline void HKSecurityStaticBasic::set_vcm_flag(bool value) {
  _internal_set_vcm_flag(value);
  // @@protoc_insertion_point(field_set:Common.Basic.HKSecurityStaticBasic.VCM_flag)
}

// bool shortsell_flag = 3;
inline void HKSecurityStaticBasic::clear_shortsell_flag() {
  shortsell_flag_ = false;
}
inline bool HKSecurityStaticBasic::_internal_shortsell_flag() const {
  return shortsell_flag_;
}
inline bool HKSecurityStaticBasic::shortsell_flag() const {
  // @@protoc_insertion_point(field_get:Common.Basic.HKSecurityStaticBasic.shortsell_flag)
  return _internal_shortsell_flag();
}
inline void HKSecurityStaticBasic::_internal_set_shortsell_flag(bool value) {
  
  shortsell_flag_ = value;
}
inline void HKSecurityStaticBasic::set_shortsell_flag(bool value) {
  _internal_set_shortsell_flag(value);
  // @@protoc_insertion_point(field_set:Common.Basic.HKSecurityStaticBasic.shortsell_flag)
}

// bool CAS_flag = 4;
inline void HKSecurityStaticBasic::clear_cas_flag() {
  cas_flag_ = false;
}
inline bool HKSecurityStaticBasic::_internal_cas_flag() const {
  return cas_flag_;
}
inline bool HKSecurityStaticBasic::cas_flag() const {
  // @@protoc_insertion_point(field_get:Common.Basic.HKSecurityStaticBasic.CAS_flag)
  return _internal_cas_flag();
}
inline void HKSecurityStaticBasic::_internal_set_cas_flag(bool value) {
  
  cas_flag_ = value;
}
inline void HKSecurityStaticBasic::set_cas_flag(bool value) {
  _internal_set_cas_flag(value);
  // @@protoc_insertion_point(field_set:Common.Basic.HKSecurityStaticBasic.CAS_flag)
}

// bool CCASS_flag = 5;
inline void HKSecurityStaticBasic::clear_ccass_flag() {
  ccass_flag_ = false;
}
inline bool HKSecurityStaticBasic::_internal_ccass_flag() const {
  return ccass_flag_;
}
inline bool HKSecurityStaticBasic::ccass_flag() const {
  // @@protoc_insertion_point(field_get:Common.Basic.HKSecurityStaticBasic.CCASS_flag)
  return _internal_ccass_flag();
}
inline void HKSecurityStaticBasic::_internal_set_ccass_flag(bool value) {
  
  ccass_flag_ = value;
}
inline void HKSecurityStaticBasic::set_ccass_flag(bool value) {
  _internal_set_ccass_flag(value);
  // @@protoc_insertion_point(field_set:Common.Basic.HKSecurityStaticBasic.CCASS_flag)
}

// bool stamp_duty_flag = 6;
inline void HKSecurityStaticBasic::clear_stamp_duty_flag() {
  stamp_duty_flag_ = false;
}
inline bool HKSecurityStaticBasic::_internal_stamp_duty_flag() const {
  return stamp_duty_flag_;
}
inline bool HKSecurityStaticBasic::stamp_duty_flag() const {
  // @@protoc_insertion_point(field_get:Common.Basic.HKSecurityStaticBasic.stamp_duty_flag)
  return _internal_stamp_duty_flag();
}
inline void HKSecurityStaticBasic::_internal_set_stamp_duty_flag(bool value) {
  
  stamp_duty_flag_ = value;
}
inline void HKSecurityStaticBasic::set_stamp_duty_flag(bool value) {
  _internal_set_stamp_duty_flag(value);
  // @@protoc_insertion_point(field_set:Common.Basic.HKSecurityStaticBasic.stamp_duty_flag)
}

// bool POS_flag = 7;
inline void HKSecurityStaticBasic::clear_pos_flag() {
  pos_flag_ = false;
}
inline bool HKSecurityStaticBasic::_internal_pos_flag() const {
  return pos_flag_;
}
inline bool HKSecurityStaticBasic::pos_flag() const {
  // @@protoc_insertion_point(field_get:Common.Basic.HKSecurityStaticBasic.POS_flag)
  return _internal_pos_flag();
}
inline void HKSecurityStaticBasic::_internal_set_pos_flag(bool value) {
  
  pos_flag_ = value;
}
inline void HKSecurityStaticBasic::set_pos_flag(bool value) {
  _internal_set_pos_flag(value);
  // @@protoc_insertion_point(field_set:Common.Basic.HKSecurityStaticBasic.POS_flag)
}

// uint32 POS_upper_limit = 8;
inline void HKSecurityStaticBasic::clear_pos_upper_limit() {
  pos_upper_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HKSecurityStaticBasic::_internal_pos_upper_limit() const {
  return pos_upper_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HKSecurityStaticBasic::pos_upper_limit() const {
  // @@protoc_insertion_point(field_get:Common.Basic.HKSecurityStaticBasic.POS_upper_limit)
  return _internal_pos_upper_limit();
}
inline void HKSecurityStaticBasic::_internal_set_pos_upper_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_upper_limit_ = value;
}
inline void HKSecurityStaticBasic::set_pos_upper_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_upper_limit(value);
  // @@protoc_insertion_point(field_set:Common.Basic.HKSecurityStaticBasic.POS_upper_limit)
}

// uint32 POS_lower_limit = 9;
inline void HKSecurityStaticBasic::clear_pos_lower_limit() {
  pos_lower_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HKSecurityStaticBasic::_internal_pos_lower_limit() const {
  return pos_lower_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HKSecurityStaticBasic::pos_lower_limit() const {
  // @@protoc_insertion_point(field_get:Common.Basic.HKSecurityStaticBasic.POS_lower_limit)
  return _internal_pos_lower_limit();
}
inline void HKSecurityStaticBasic::_internal_set_pos_lower_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_lower_limit_ = value;
}
inline void HKSecurityStaticBasic::set_pos_lower_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_lower_limit(value);
  // @@protoc_insertion_point(field_set:Common.Basic.HKSecurityStaticBasic.POS_lower_limit)
}

// -------------------------------------------------------------------

// SecurityStaticBasic

// .Common.Basic.Security security = 1;
inline bool SecurityStaticBasic::_internal_has_security() const {
  return this != internal_default_instance() && security_ != nullptr;
}
inline bool SecurityStaticBasic::has_security() const {
  return _internal_has_security();
}
inline void SecurityStaticBasic::clear_security() {
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
}
inline const ::Common::Basic::Security& SecurityStaticBasic::_internal_security() const {
  const ::Common::Basic::Security* p = security_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::Security&>(
      ::Common::Basic::_Security_default_instance_);
}
inline const ::Common::Basic::Security& SecurityStaticBasic::security() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticBasic.security)
  return _internal_security();
}
inline void SecurityStaticBasic::unsafe_arena_set_allocated_security(
    ::Common::Basic::Security* security) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_);
  }
  security_ = security;
  if (security) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.SecurityStaticBasic.security)
}
inline ::Common::Basic::Security* SecurityStaticBasic::release_security() {
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::Security* SecurityStaticBasic::unsafe_arena_release_security() {
  // @@protoc_insertion_point(field_release:Common.Basic.SecurityStaticBasic.security)
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  return temp;
}
inline ::Common::Basic::Security* SecurityStaticBasic::_internal_mutable_security() {
  
  if (security_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::Security>(GetArena());
    security_ = p;
  }
  return security_;
}
inline ::Common::Basic::Security* SecurityStaticBasic::mutable_security() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.SecurityStaticBasic.security)
  return _internal_mutable_security();
}
inline void SecurityStaticBasic::set_allocated_security(::Common::Basic::Security* security) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_;
  }
  if (security) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security);
    if (message_arena != submessage_arena) {
      security = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    
  } else {
    
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.SecurityStaticBasic.security)
}

// int64 id = 2;
inline void SecurityStaticBasic::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SecurityStaticBasic::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SecurityStaticBasic::id() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticBasic.id)
  return _internal_id();
}
inline void SecurityStaticBasic::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void SecurityStaticBasic::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Common.Basic.SecurityStaticBasic.id)
}

// int32 lot_size = 3;
inline void SecurityStaticBasic::clear_lot_size() {
  lot_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SecurityStaticBasic::_internal_lot_size() const {
  return lot_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SecurityStaticBasic::lot_size() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticBasic.lot_size)
  return _internal_lot_size();
}
inline void SecurityStaticBasic::_internal_set_lot_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lot_size_ = value;
}
inline void SecurityStaticBasic::set_lot_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lot_size(value);
  // @@protoc_insertion_point(field_set:Common.Basic.SecurityStaticBasic.lot_size)
}

// int32 security_type = 4;
inline void SecurityStaticBasic::clear_security_type() {
  security_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SecurityStaticBasic::_internal_security_type() const {
  return security_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SecurityStaticBasic::security_type() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticBasic.security_type)
  return _internal_security_type();
}
inline void SecurityStaticBasic::_internal_set_security_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  security_type_ = value;
}
inline void SecurityStaticBasic::set_security_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_security_type(value);
  // @@protoc_insertion_point(field_set:Common.Basic.SecurityStaticBasic.security_type)
}

// string name = 5;
inline void SecurityStaticBasic::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SecurityStaticBasic::name() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticBasic.name)
  return _internal_name();
}
inline void SecurityStaticBasic::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Common.Basic.SecurityStaticBasic.name)
}
inline std::string* SecurityStaticBasic::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.SecurityStaticBasic.name)
  return _internal_mutable_name();
}
inline const std::string& SecurityStaticBasic::_internal_name() const {
  return name_.Get();
}
inline void SecurityStaticBasic::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SecurityStaticBasic::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.SecurityStaticBasic.name)
}
inline void SecurityStaticBasic::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.SecurityStaticBasic.name)
}
inline void SecurityStaticBasic::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.SecurityStaticBasic.name)
}
inline std::string* SecurityStaticBasic::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SecurityStaticBasic::release_name() {
  // @@protoc_insertion_point(field_release:Common.Basic.SecurityStaticBasic.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityStaticBasic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.SecurityStaticBasic.name)
}

// string list_time = 6;
inline void SecurityStaticBasic::clear_list_time() {
  list_time_.ClearToEmpty();
}
inline const std::string& SecurityStaticBasic::list_time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticBasic.list_time)
  return _internal_list_time();
}
inline void SecurityStaticBasic::set_list_time(const std::string& value) {
  _internal_set_list_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.SecurityStaticBasic.list_time)
}
inline std::string* SecurityStaticBasic::mutable_list_time() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.SecurityStaticBasic.list_time)
  return _internal_mutable_list_time();
}
inline const std::string& SecurityStaticBasic::_internal_list_time() const {
  return list_time_.Get();
}
inline void SecurityStaticBasic::_internal_set_list_time(const std::string& value) {
  
  list_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SecurityStaticBasic::set_list_time(std::string&& value) {
  
  list_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.SecurityStaticBasic.list_time)
}
inline void SecurityStaticBasic::set_list_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  list_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.SecurityStaticBasic.list_time)
}
inline void SecurityStaticBasic::set_list_time(const char* value,
    size_t size) {
  
  list_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.SecurityStaticBasic.list_time)
}
inline std::string* SecurityStaticBasic::_internal_mutable_list_time() {
  
  return list_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SecurityStaticBasic::release_list_time() {
  // @@protoc_insertion_point(field_release:Common.Basic.SecurityStaticBasic.list_time)
  return list_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityStaticBasic::set_allocated_list_time(std::string* list_time) {
  if (list_time != nullptr) {
    
  } else {
    
  }
  list_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), list_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.SecurityStaticBasic.list_time)
}

// bool delisting = 7;
inline void SecurityStaticBasic::clear_delisting() {
  delisting_ = false;
}
inline bool SecurityStaticBasic::_internal_delisting() const {
  return delisting_;
}
inline bool SecurityStaticBasic::delisting() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticBasic.delisting)
  return _internal_delisting();
}
inline void SecurityStaticBasic::_internal_set_delisting(bool value) {
  
  delisting_ = value;
}
inline void SecurityStaticBasic::set_delisting(bool value) {
  _internal_set_delisting(value);
  // @@protoc_insertion_point(field_set:Common.Basic.SecurityStaticBasic.delisting)
}

// double list_timestamp = 8;
inline void SecurityStaticBasic::clear_list_timestamp() {
  list_timestamp_ = 0;
}
inline double SecurityStaticBasic::_internal_list_timestamp() const {
  return list_timestamp_;
}
inline double SecurityStaticBasic::list_timestamp() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticBasic.list_timestamp)
  return _internal_list_timestamp();
}
inline void SecurityStaticBasic::_internal_set_list_timestamp(double value) {
  
  list_timestamp_ = value;
}
inline void SecurityStaticBasic::set_list_timestamp(double value) {
  _internal_set_list_timestamp(value);
  // @@protoc_insertion_point(field_set:Common.Basic.SecurityStaticBasic.list_timestamp)
}

// -------------------------------------------------------------------

// FutureStaticExData

// string last_trade_time = 1;
inline void FutureStaticExData::clear_last_trade_time() {
  last_trade_time_.ClearToEmpty();
}
inline const std::string& FutureStaticExData::last_trade_time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureStaticExData.last_trade_time)
  return _internal_last_trade_time();
}
inline void FutureStaticExData::set_last_trade_time(const std::string& value) {
  _internal_set_last_trade_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureStaticExData.last_trade_time)
}
inline std::string* FutureStaticExData::mutable_last_trade_time() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.FutureStaticExData.last_trade_time)
  return _internal_mutable_last_trade_time();
}
inline const std::string& FutureStaticExData::_internal_last_trade_time() const {
  return last_trade_time_.Get();
}
inline void FutureStaticExData::_internal_set_last_trade_time(const std::string& value) {
  
  last_trade_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FutureStaticExData::set_last_trade_time(std::string&& value) {
  
  last_trade_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.FutureStaticExData.last_trade_time)
}
inline void FutureStaticExData::set_last_trade_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_trade_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.FutureStaticExData.last_trade_time)
}
inline void FutureStaticExData::set_last_trade_time(const char* value,
    size_t size) {
  
  last_trade_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.FutureStaticExData.last_trade_time)
}
inline std::string* FutureStaticExData::_internal_mutable_last_trade_time() {
  
  return last_trade_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FutureStaticExData::release_last_trade_time() {
  // @@protoc_insertion_point(field_release:Common.Basic.FutureStaticExData.last_trade_time)
  return last_trade_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FutureStaticExData::set_allocated_last_trade_time(std::string* last_trade_time) {
  if (last_trade_time != nullptr) {
    
  } else {
    
  }
  last_trade_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_trade_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.FutureStaticExData.last_trade_time)
}

// double last_trade_timestamp = 2;
inline void FutureStaticExData::clear_last_trade_timestamp() {
  last_trade_timestamp_ = 0;
}
inline double FutureStaticExData::_internal_last_trade_timestamp() const {
  return last_trade_timestamp_;
}
inline double FutureStaticExData::last_trade_timestamp() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureStaticExData.last_trade_timestamp)
  return _internal_last_trade_timestamp();
}
inline void FutureStaticExData::_internal_set_last_trade_timestamp(double value) {
  
  last_trade_timestamp_ = value;
}
inline void FutureStaticExData::set_last_trade_timestamp(double value) {
  _internal_set_last_trade_timestamp(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureStaticExData.last_trade_timestamp)
}

// bool is_main_contract = 3;
inline void FutureStaticExData::clear_is_main_contract() {
  is_main_contract_ = false;
}
inline bool FutureStaticExData::_internal_is_main_contract() const {
  return is_main_contract_;
}
inline bool FutureStaticExData::is_main_contract() const {
  // @@protoc_insertion_point(field_get:Common.Basic.FutureStaticExData.is_main_contract)
  return _internal_is_main_contract();
}
inline void FutureStaticExData::_internal_set_is_main_contract(bool value) {
  
  is_main_contract_ = value;
}
inline void FutureStaticExData::set_is_main_contract(bool value) {
  _internal_set_is_main_contract(value);
  // @@protoc_insertion_point(field_set:Common.Basic.FutureStaticExData.is_main_contract)
}

// -------------------------------------------------------------------

// SecurityStaticInfo

// .Common.Basic.SecurityStaticBasic basic = 1;
inline bool SecurityStaticInfo::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool SecurityStaticInfo::has_basic() const {
  return _internal_has_basic();
}
inline void SecurityStaticInfo::clear_basic() {
  if (GetArena() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::Common::Basic::SecurityStaticBasic& SecurityStaticInfo::_internal_basic() const {
  const ::Common::Basic::SecurityStaticBasic* p = basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::SecurityStaticBasic&>(
      ::Common::Basic::_SecurityStaticBasic_default_instance_);
}
inline const ::Common::Basic::SecurityStaticBasic& SecurityStaticInfo::basic() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticInfo.basic)
  return _internal_basic();
}
inline void SecurityStaticInfo::unsafe_arena_set_allocated_basic(
    ::Common::Basic::SecurityStaticBasic* basic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basic_);
  }
  basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.SecurityStaticInfo.basic)
}
inline ::Common::Basic::SecurityStaticBasic* SecurityStaticInfo::release_basic() {
  
  ::Common::Basic::SecurityStaticBasic* temp = basic_;
  basic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::SecurityStaticBasic* SecurityStaticInfo::unsafe_arena_release_basic() {
  // @@protoc_insertion_point(field_release:Common.Basic.SecurityStaticInfo.basic)
  
  ::Common::Basic::SecurityStaticBasic* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::Common::Basic::SecurityStaticBasic* SecurityStaticInfo::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::SecurityStaticBasic>(GetArena());
    basic_ = p;
  }
  return basic_;
}
inline ::Common::Basic::SecurityStaticBasic* SecurityStaticInfo::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.SecurityStaticInfo.basic)
  return _internal_mutable_basic();
}
inline void SecurityStaticInfo::set_allocated_basic(::Common::Basic::SecurityStaticBasic* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(basic);
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.SecurityStaticInfo.basic)
}

// .Common.Basic.FutureStaticExData future_exdata = 2;
inline bool SecurityStaticInfo::_internal_has_future_exdata() const {
  return this != internal_default_instance() && future_exdata_ != nullptr;
}
inline bool SecurityStaticInfo::has_future_exdata() const {
  return _internal_has_future_exdata();
}
inline void SecurityStaticInfo::clear_future_exdata() {
  if (GetArena() == nullptr && future_exdata_ != nullptr) {
    delete future_exdata_;
  }
  future_exdata_ = nullptr;
}
inline const ::Common::Basic::FutureStaticExData& SecurityStaticInfo::_internal_future_exdata() const {
  const ::Common::Basic::FutureStaticExData* p = future_exdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::FutureStaticExData&>(
      ::Common::Basic::_FutureStaticExData_default_instance_);
}
inline const ::Common::Basic::FutureStaticExData& SecurityStaticInfo::future_exdata() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticInfo.future_exdata)
  return _internal_future_exdata();
}
inline void SecurityStaticInfo::unsafe_arena_set_allocated_future_exdata(
    ::Common::Basic::FutureStaticExData* future_exdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(future_exdata_);
  }
  future_exdata_ = future_exdata;
  if (future_exdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.SecurityStaticInfo.future_exdata)
}
inline ::Common::Basic::FutureStaticExData* SecurityStaticInfo::release_future_exdata() {
  
  ::Common::Basic::FutureStaticExData* temp = future_exdata_;
  future_exdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::FutureStaticExData* SecurityStaticInfo::unsafe_arena_release_future_exdata() {
  // @@protoc_insertion_point(field_release:Common.Basic.SecurityStaticInfo.future_exdata)
  
  ::Common::Basic::FutureStaticExData* temp = future_exdata_;
  future_exdata_ = nullptr;
  return temp;
}
inline ::Common::Basic::FutureStaticExData* SecurityStaticInfo::_internal_mutable_future_exdata() {
  
  if (future_exdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::FutureStaticExData>(GetArena());
    future_exdata_ = p;
  }
  return future_exdata_;
}
inline ::Common::Basic::FutureStaticExData* SecurityStaticInfo::mutable_future_exdata() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.SecurityStaticInfo.future_exdata)
  return _internal_mutable_future_exdata();
}
inline void SecurityStaticInfo::set_allocated_future_exdata(::Common::Basic::FutureStaticExData* future_exdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete future_exdata_;
  }
  if (future_exdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(future_exdata);
    if (message_arena != submessage_arena) {
      future_exdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, future_exdata, submessage_arena);
    }
    
  } else {
    
  }
  future_exdata_ = future_exdata;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.SecurityStaticInfo.future_exdata)
}

// .Common.Basic.HKSecurityStaticBasic hk_basic = 3;
inline bool SecurityStaticInfo::_internal_has_hk_basic() const {
  return this != internal_default_instance() && hk_basic_ != nullptr;
}
inline bool SecurityStaticInfo::has_hk_basic() const {
  return _internal_has_hk_basic();
}
inline void SecurityStaticInfo::clear_hk_basic() {
  if (GetArena() == nullptr && hk_basic_ != nullptr) {
    delete hk_basic_;
  }
  hk_basic_ = nullptr;
}
inline const ::Common::Basic::HKSecurityStaticBasic& SecurityStaticInfo::_internal_hk_basic() const {
  const ::Common::Basic::HKSecurityStaticBasic* p = hk_basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::HKSecurityStaticBasic&>(
      ::Common::Basic::_HKSecurityStaticBasic_default_instance_);
}
inline const ::Common::Basic::HKSecurityStaticBasic& SecurityStaticInfo::hk_basic() const {
  // @@protoc_insertion_point(field_get:Common.Basic.SecurityStaticInfo.hk_basic)
  return _internal_hk_basic();
}
inline void SecurityStaticInfo::unsafe_arena_set_allocated_hk_basic(
    ::Common::Basic::HKSecurityStaticBasic* hk_basic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hk_basic_);
  }
  hk_basic_ = hk_basic;
  if (hk_basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.SecurityStaticInfo.hk_basic)
}
inline ::Common::Basic::HKSecurityStaticBasic* SecurityStaticInfo::release_hk_basic() {
  
  ::Common::Basic::HKSecurityStaticBasic* temp = hk_basic_;
  hk_basic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::HKSecurityStaticBasic* SecurityStaticInfo::unsafe_arena_release_hk_basic() {
  // @@protoc_insertion_point(field_release:Common.Basic.SecurityStaticInfo.hk_basic)
  
  ::Common::Basic::HKSecurityStaticBasic* temp = hk_basic_;
  hk_basic_ = nullptr;
  return temp;
}
inline ::Common::Basic::HKSecurityStaticBasic* SecurityStaticInfo::_internal_mutable_hk_basic() {
  
  if (hk_basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::HKSecurityStaticBasic>(GetArena());
    hk_basic_ = p;
  }
  return hk_basic_;
}
inline ::Common::Basic::HKSecurityStaticBasic* SecurityStaticInfo::mutable_hk_basic() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.SecurityStaticInfo.hk_basic)
  return _internal_mutable_hk_basic();
}
inline void SecurityStaticInfo::set_allocated_hk_basic(::Common::Basic::HKSecurityStaticBasic* hk_basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hk_basic_;
  }
  if (hk_basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hk_basic);
    if (message_arena != submessage_arena) {
      hk_basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hk_basic, submessage_arena);
    }
    
  } else {
    
  }
  hk_basic_ = hk_basic;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.SecurityStaticInfo.hk_basic)
}

// -------------------------------------------------------------------

// VCMTrigger

// .Common.Basic.Security security = 1;
inline bool VCMTrigger::_internal_has_security() const {
  return this != internal_default_instance() && security_ != nullptr;
}
inline bool VCMTrigger::has_security() const {
  return _internal_has_security();
}
inline void VCMTrigger::clear_security() {
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
}
inline const ::Common::Basic::Security& VCMTrigger::_internal_security() const {
  const ::Common::Basic::Security* p = security_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::Security&>(
      ::Common::Basic::_Security_default_instance_);
}
inline const ::Common::Basic::Security& VCMTrigger::security() const {
  // @@protoc_insertion_point(field_get:Common.Basic.VCMTrigger.security)
  return _internal_security();
}
inline void VCMTrigger::unsafe_arena_set_allocated_security(
    ::Common::Basic::Security* security) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_);
  }
  security_ = security;
  if (security) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.VCMTrigger.security)
}
inline ::Common::Basic::Security* VCMTrigger::release_security() {
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::Security* VCMTrigger::unsafe_arena_release_security() {
  // @@protoc_insertion_point(field_release:Common.Basic.VCMTrigger.security)
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  return temp;
}
inline ::Common::Basic::Security* VCMTrigger::_internal_mutable_security() {
  
  if (security_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::Security>(GetArena());
    security_ = p;
  }
  return security_;
}
inline ::Common::Basic::Security* VCMTrigger::mutable_security() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.VCMTrigger.security)
  return _internal_mutable_security();
}
inline void VCMTrigger::set_allocated_security(::Common::Basic::Security* security) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_;
  }
  if (security) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security);
    if (message_arena != submessage_arena) {
      security = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    
  } else {
    
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.VCMTrigger.security)
}

// uint64 coolingoff_starttime = 2;
inline void VCMTrigger::clear_coolingoff_starttime() {
  coolingoff_starttime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VCMTrigger::_internal_coolingoff_starttime() const {
  return coolingoff_starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VCMTrigger::coolingoff_starttime() const {
  // @@protoc_insertion_point(field_get:Common.Basic.VCMTrigger.coolingoff_starttime)
  return _internal_coolingoff_starttime();
}
inline void VCMTrigger::_internal_set_coolingoff_starttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coolingoff_starttime_ = value;
}
inline void VCMTrigger::set_coolingoff_starttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coolingoff_starttime(value);
  // @@protoc_insertion_point(field_set:Common.Basic.VCMTrigger.coolingoff_starttime)
}

// uint64 coolingoff_endtime = 3;
inline void VCMTrigger::clear_coolingoff_endtime() {
  coolingoff_endtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VCMTrigger::_internal_coolingoff_endtime() const {
  return coolingoff_endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VCMTrigger::coolingoff_endtime() const {
  // @@protoc_insertion_point(field_get:Common.Basic.VCMTrigger.coolingoff_endtime)
  return _internal_coolingoff_endtime();
}
inline void VCMTrigger::_internal_set_coolingoff_endtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coolingoff_endtime_ = value;
}
inline void VCMTrigger::set_coolingoff_endtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coolingoff_endtime(value);
  // @@protoc_insertion_point(field_set:Common.Basic.VCMTrigger.coolingoff_endtime)
}

// uint32 vcm_price = 4;
inline void VCMTrigger::clear_vcm_price() {
  vcm_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VCMTrigger::_internal_vcm_price() const {
  return vcm_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VCMTrigger::vcm_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.VCMTrigger.vcm_price)
  return _internal_vcm_price();
}
inline void VCMTrigger::_internal_set_vcm_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vcm_price_ = value;
}
inline void VCMTrigger::set_vcm_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vcm_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.VCMTrigger.vcm_price)
}

// uint32 vcm_lower_price = 5;
inline void VCMTrigger::clear_vcm_lower_price() {
  vcm_lower_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VCMTrigger::_internal_vcm_lower_price() const {
  return vcm_lower_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VCMTrigger::vcm_lower_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.VCMTrigger.vcm_lower_price)
  return _internal_vcm_lower_price();
}
inline void VCMTrigger::_internal_set_vcm_lower_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vcm_lower_price_ = value;
}
inline void VCMTrigger::set_vcm_lower_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vcm_lower_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.VCMTrigger.vcm_lower_price)
}

// uint32 vcm_upper_price = 6;
inline void VCMTrigger::clear_vcm_upper_price() {
  vcm_upper_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VCMTrigger::_internal_vcm_upper_price() const {
  return vcm_upper_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VCMTrigger::vcm_upper_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.VCMTrigger.vcm_upper_price)
  return _internal_vcm_upper_price();
}
inline void VCMTrigger::_internal_set_vcm_upper_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vcm_upper_price_ = value;
}
inline void VCMTrigger::set_vcm_upper_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vcm_upper_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.VCMTrigger.vcm_upper_price)
}

// -------------------------------------------------------------------

// RefPrice

// .Common.Basic.Security security = 1;
inline bool RefPrice::_internal_has_security() const {
  return this != internal_default_instance() && security_ != nullptr;
}
inline bool RefPrice::has_security() const {
  return _internal_has_security();
}
inline void RefPrice::clear_security() {
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
}
inline const ::Common::Basic::Security& RefPrice::_internal_security() const {
  const ::Common::Basic::Security* p = security_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::Security&>(
      ::Common::Basic::_Security_default_instance_);
}
inline const ::Common::Basic::Security& RefPrice::security() const {
  // @@protoc_insertion_point(field_get:Common.Basic.RefPrice.security)
  return _internal_security();
}
inline void RefPrice::unsafe_arena_set_allocated_security(
    ::Common::Basic::Security* security) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_);
  }
  security_ = security;
  if (security) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.RefPrice.security)
}
inline ::Common::Basic::Security* RefPrice::release_security() {
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::Security* RefPrice::unsafe_arena_release_security() {
  // @@protoc_insertion_point(field_release:Common.Basic.RefPrice.security)
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  return temp;
}
inline ::Common::Basic::Security* RefPrice::_internal_mutable_security() {
  
  if (security_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::Security>(GetArena());
    security_ = p;
  }
  return security_;
}
inline ::Common::Basic::Security* RefPrice::mutable_security() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.RefPrice.security)
  return _internal_mutable_security();
}
inline void RefPrice::set_allocated_security(::Common::Basic::Security* security) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_;
  }
  if (security) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security);
    if (message_arena != submessage_arena) {
      security = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    
  } else {
    
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.RefPrice.security)
}

// uint32 ref_price = 2;
inline void RefPrice::clear_ref_price() {
  ref_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefPrice::_internal_ref_price() const {
  return ref_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefPrice::ref_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.RefPrice.ref_price)
  return _internal_ref_price();
}
inline void RefPrice::_internal_set_ref_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ref_price_ = value;
}
inline void RefPrice::set_ref_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ref_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.RefPrice.ref_price)
}

// uint32 lower_price = 3;
inline void RefPrice::clear_lower_price() {
  lower_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefPrice::_internal_lower_price() const {
  return lower_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefPrice::lower_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.RefPrice.lower_price)
  return _internal_lower_price();
}
inline void RefPrice::_internal_set_lower_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lower_price_ = value;
}
inline void RefPrice::set_lower_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lower_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.RefPrice.lower_price)
}

// uint32 upper_price = 4;
inline void RefPrice::clear_upper_price() {
  upper_price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefPrice::_internal_upper_price() const {
  return upper_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefPrice::upper_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.RefPrice.upper_price)
  return _internal_upper_price();
}
inline void RefPrice::_internal_set_upper_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  upper_price_ = value;
}
inline void RefPrice::set_upper_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_upper_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.RefPrice.upper_price)
}

// -------------------------------------------------------------------

// TradingSessionStatus

// string market = 1;
inline void TradingSessionStatus::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& TradingSessionStatus::market() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TradingSessionStatus.market)
  return _internal_market();
}
inline void TradingSessionStatus::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TradingSessionStatus.market)
}
inline std::string* TradingSessionStatus::mutable_market() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.TradingSessionStatus.market)
  return _internal_mutable_market();
}
inline const std::string& TradingSessionStatus::_internal_market() const {
  return market_.Get();
}
inline void TradingSessionStatus::_internal_set_market(const std::string& value) {
  
  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradingSessionStatus::set_market(std::string&& value) {
  
  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.TradingSessionStatus.market)
}
inline void TradingSessionStatus::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.TradingSessionStatus.market)
}
inline void TradingSessionStatus::set_market(const char* value,
    size_t size) {
  
  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.TradingSessionStatus.market)
}
inline std::string* TradingSessionStatus::_internal_mutable_market() {
  
  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradingSessionStatus::release_market() {
  // @@protoc_insertion_point(field_release:Common.Basic.TradingSessionStatus.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradingSessionStatus::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.TradingSessionStatus.market)
}

// uint32 marketcode = 2;
inline void TradingSessionStatus::clear_marketcode() {
  marketcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradingSessionStatus::_internal_marketcode() const {
  return marketcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradingSessionStatus::marketcode() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TradingSessionStatus.marketcode)
  return _internal_marketcode();
}
inline void TradingSessionStatus::_internal_set_marketcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  marketcode_ = value;
}
inline void TradingSessionStatus::set_marketcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_marketcode(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TradingSessionStatus.marketcode)
}

// uint32 trading_session_subid = 3;
inline void TradingSessionStatus::clear_trading_session_subid() {
  trading_session_subid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradingSessionStatus::_internal_trading_session_subid() const {
  return trading_session_subid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradingSessionStatus::trading_session_subid() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TradingSessionStatus.trading_session_subid)
  return _internal_trading_session_subid();
}
inline void TradingSessionStatus::_internal_set_trading_session_subid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trading_session_subid_ = value;
}
inline void TradingSessionStatus::set_trading_session_subid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trading_session_subid(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TradingSessionStatus.trading_session_subid)
}

// uint32 trading_session_status = 4;
inline void TradingSessionStatus::clear_trading_session_status() {
  trading_session_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradingSessionStatus::_internal_trading_session_status() const {
  return trading_session_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradingSessionStatus::trading_session_status() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TradingSessionStatus.trading_session_status)
  return _internal_trading_session_status();
}
inline void TradingSessionStatus::_internal_set_trading_session_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trading_session_status_ = value;
}
inline void TradingSessionStatus::set_trading_session_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trading_session_status(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TradingSessionStatus.trading_session_status)
}

// uint64 start_datetime = 5;
inline void TradingSessionStatus::clear_start_datetime() {
  start_datetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradingSessionStatus::_internal_start_datetime() const {
  return start_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradingSessionStatus::start_datetime() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TradingSessionStatus.start_datetime)
  return _internal_start_datetime();
}
inline void TradingSessionStatus::_internal_set_start_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_datetime_ = value;
}
inline void TradingSessionStatus::set_start_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_datetime(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TradingSessionStatus.start_datetime)
}

// uint64 end_datetime = 6;
inline void TradingSessionStatus::clear_end_datetime() {
  end_datetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradingSessionStatus::_internal_end_datetime() const {
  return end_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradingSessionStatus::end_datetime() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TradingSessionStatus.end_datetime)
  return _internal_end_datetime();
}
inline void TradingSessionStatus::_internal_set_end_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_datetime_ = value;
}
inline void TradingSessionStatus::set_end_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_datetime(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TradingSessionStatus.end_datetime)
}

// -------------------------------------------------------------------

// Ticker

// string time = 1;
inline void Ticker::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& Ticker::time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.time)
  return _internal_time();
}
inline void Ticker::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.time)
}
inline std::string* Ticker::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.Ticker.time)
  return _internal_mutable_time();
}
inline const std::string& Ticker::_internal_time() const {
  return time_.Get();
}
inline void Ticker::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Ticker::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.Ticker.time)
}
inline void Ticker::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.Ticker.time)
}
inline void Ticker::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.Ticker.time)
}
inline std::string* Ticker::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Ticker::release_time() {
  // @@protoc_insertion_point(field_release:Common.Basic.Ticker.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ticker::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.Ticker.time)
}

// int64 sequence = 2;
inline void Ticker::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ticker::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ticker::sequence() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.sequence)
  return _internal_sequence();
}
inline void Ticker::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void Ticker::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.sequence)
}

// int32 dir = 3;
inline void Ticker::clear_dir() {
  dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ticker::_internal_dir() const {
  return dir_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ticker::dir() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.dir)
  return _internal_dir();
}
inline void Ticker::_internal_set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dir_ = value;
}
inline void Ticker::set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.dir)
}

// double price = 4;
inline void Ticker::clear_price() {
  price_ = 0;
}
inline double Ticker::_internal_price() const {
  return price_;
}
inline double Ticker::price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.price)
  return _internal_price();
}
inline void Ticker::_internal_set_price(double value) {
  
  price_ = value;
}
inline void Ticker::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.price)
}

// int64 volume = 5;
inline void Ticker::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ticker::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ticker::volume() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.volume)
  return _internal_volume();
}
inline void Ticker::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void Ticker::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.volume)
}

// double turnover = 6;
inline void Ticker::clear_turnover() {
  turnover_ = 0;
}
inline double Ticker::_internal_turnover() const {
  return turnover_;
}
inline double Ticker::turnover() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.turnover)
  return _internal_turnover();
}
inline void Ticker::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void Ticker::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.turnover)
}

// double recvTime = 7;
inline void Ticker::clear_recvtime() {
  recvtime_ = 0;
}
inline double Ticker::_internal_recvtime() const {
  return recvtime_;
}
inline double Ticker::recvtime() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.recvTime)
  return _internal_recvtime();
}
inline void Ticker::_internal_set_recvtime(double value) {
  
  recvtime_ = value;
}
inline void Ticker::set_recvtime(double value) {
  _internal_set_recvtime(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.recvTime)
}

// int32 type = 8;
inline void Ticker::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ticker::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ticker::type() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.type)
  return _internal_type();
}
inline void Ticker::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Ticker::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.type)
}

// int32 type_sign = 9;
inline void Ticker::clear_type_sign() {
  type_sign_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ticker::_internal_type_sign() const {
  return type_sign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ticker::type_sign() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.type_sign)
  return _internal_type_sign();
}
inline void Ticker::_internal_set_type_sign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_sign_ = value;
}
inline void Ticker::set_type_sign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_sign(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.type_sign)
}

// double timestamp = 10;
inline void Ticker::clear_timestamp() {
  timestamp_ = 0;
}
inline double Ticker::_internal_timestamp() const {
  return timestamp_;
}
inline double Ticker::timestamp() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Ticker.timestamp)
  return _internal_timestamp();
}
inline void Ticker::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void Ticker::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Ticker.timestamp)
}

// -------------------------------------------------------------------

// Broker

// int64 id = 1;
inline void Broker::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Broker::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Broker::id() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Broker.id)
  return _internal_id();
}
inline void Broker::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Broker::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Broker.id)
}

// string name = 2;
inline void Broker::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Broker::name() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Broker.name)
  return _internal_name();
}
inline void Broker::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Broker.name)
}
inline std::string* Broker::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.Broker.name)
  return _internal_mutable_name();
}
inline const std::string& Broker::_internal_name() const {
  return name_.Get();
}
inline void Broker::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Broker::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.Broker.name)
}
inline void Broker::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.Broker.name)
}
inline void Broker::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.Broker.name)
}
inline std::string* Broker::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Broker::release_name() {
  // @@protoc_insertion_point(field_release:Common.Basic.Broker.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Broker::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.Broker.name)
}

// int32 pos = 3;
inline void Broker::clear_pos() {
  pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Broker::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Broker::pos() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Broker.pos)
  return _internal_pos();
}
inline void Broker::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_ = value;
}
inline void Broker::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Broker.pos)
}

// -------------------------------------------------------------------

// Brokerlist

// .Common.Basic.Security security = 1;
inline bool Brokerlist::_internal_has_security() const {
  return this != internal_default_instance() && security_ != nullptr;
}
inline bool Brokerlist::has_security() const {
  return _internal_has_security();
}
inline void Brokerlist::clear_security() {
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
}
inline const ::Common::Basic::Security& Brokerlist::_internal_security() const {
  const ::Common::Basic::Security* p = security_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::Security&>(
      ::Common::Basic::_Security_default_instance_);
}
inline const ::Common::Basic::Security& Brokerlist::security() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Brokerlist.security)
  return _internal_security();
}
inline void Brokerlist::unsafe_arena_set_allocated_security(
    ::Common::Basic::Security* security) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_);
  }
  security_ = security;
  if (security) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.Brokerlist.security)
}
inline ::Common::Basic::Security* Brokerlist::release_security() {
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::Security* Brokerlist::unsafe_arena_release_security() {
  // @@protoc_insertion_point(field_release:Common.Basic.Brokerlist.security)
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  return temp;
}
inline ::Common::Basic::Security* Brokerlist::_internal_mutable_security() {
  
  if (security_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::Security>(GetArena());
    security_ = p;
  }
  return security_;
}
inline ::Common::Basic::Security* Brokerlist::mutable_security() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.Brokerlist.security)
  return _internal_mutable_security();
}
inline void Brokerlist::set_allocated_security(::Common::Basic::Security* security) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_;
  }
  if (security) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security);
    if (message_arena != submessage_arena) {
      security = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    
  } else {
    
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.Brokerlist.security)
}

// repeated .Common.Basic.Broker broker_ask_list = 2;
inline int Brokerlist::_internal_broker_ask_list_size() const {
  return broker_ask_list_.size();
}
inline int Brokerlist::broker_ask_list_size() const {
  return _internal_broker_ask_list_size();
}
inline void Brokerlist::clear_broker_ask_list() {
  broker_ask_list_.Clear();
}
inline ::Common::Basic::Broker* Brokerlist::mutable_broker_ask_list(int index) {
  // @@protoc_insertion_point(field_mutable:Common.Basic.Brokerlist.broker_ask_list)
  return broker_ask_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker >*
Brokerlist::mutable_broker_ask_list() {
  // @@protoc_insertion_point(field_mutable_list:Common.Basic.Brokerlist.broker_ask_list)
  return &broker_ask_list_;
}
inline const ::Common::Basic::Broker& Brokerlist::_internal_broker_ask_list(int index) const {
  return broker_ask_list_.Get(index);
}
inline const ::Common::Basic::Broker& Brokerlist::broker_ask_list(int index) const {
  // @@protoc_insertion_point(field_get:Common.Basic.Brokerlist.broker_ask_list)
  return _internal_broker_ask_list(index);
}
inline ::Common::Basic::Broker* Brokerlist::_internal_add_broker_ask_list() {
  return broker_ask_list_.Add();
}
inline ::Common::Basic::Broker* Brokerlist::add_broker_ask_list() {
  // @@protoc_insertion_point(field_add:Common.Basic.Brokerlist.broker_ask_list)
  return _internal_add_broker_ask_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker >&
Brokerlist::broker_ask_list() const {
  // @@protoc_insertion_point(field_list:Common.Basic.Brokerlist.broker_ask_list)
  return broker_ask_list_;
}

// repeated .Common.Basic.Broker broker_bid_list = 3;
inline int Brokerlist::_internal_broker_bid_list_size() const {
  return broker_bid_list_.size();
}
inline int Brokerlist::broker_bid_list_size() const {
  return _internal_broker_bid_list_size();
}
inline void Brokerlist::clear_broker_bid_list() {
  broker_bid_list_.Clear();
}
inline ::Common::Basic::Broker* Brokerlist::mutable_broker_bid_list(int index) {
  // @@protoc_insertion_point(field_mutable:Common.Basic.Brokerlist.broker_bid_list)
  return broker_bid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker >*
Brokerlist::mutable_broker_bid_list() {
  // @@protoc_insertion_point(field_mutable_list:Common.Basic.Brokerlist.broker_bid_list)
  return &broker_bid_list_;
}
inline const ::Common::Basic::Broker& Brokerlist::_internal_broker_bid_list(int index) const {
  return broker_bid_list_.Get(index);
}
inline const ::Common::Basic::Broker& Brokerlist::broker_bid_list(int index) const {
  // @@protoc_insertion_point(field_get:Common.Basic.Brokerlist.broker_bid_list)
  return _internal_broker_bid_list(index);
}
inline ::Common::Basic::Broker* Brokerlist::_internal_add_broker_bid_list() {
  return broker_bid_list_.Add();
}
inline ::Common::Basic::Broker* Brokerlist::add_broker_bid_list() {
  // @@protoc_insertion_point(field_add:Common.Basic.Brokerlist.broker_bid_list)
  return _internal_add_broker_bid_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::Broker >&
Brokerlist::broker_bid_list() const {
  // @@protoc_insertion_point(field_list:Common.Basic.Brokerlist.broker_bid_list)
  return broker_bid_list_;
}

// -------------------------------------------------------------------

// OrderBookDetail

// double ask_price = 1;
inline void OrderBookDetail::clear_ask_price() {
  ask_price_ = 0;
}
inline double OrderBookDetail::_internal_ask_price() const {
  return ask_price_;
}
inline double OrderBookDetail::ask_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBookDetail.ask_price)
  return _internal_ask_price();
}
inline void OrderBookDetail::_internal_set_ask_price(double value) {
  
  ask_price_ = value;
}
inline void OrderBookDetail::set_ask_price(double value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.OrderBookDetail.ask_price)
}

// int64 ask_volume = 2;
inline void OrderBookDetail::clear_ask_volume() {
  ask_volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderBookDetail::_internal_ask_volume() const {
  return ask_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderBookDetail::ask_volume() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBookDetail.ask_volume)
  return _internal_ask_volume();
}
inline void OrderBookDetail::_internal_set_ask_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ask_volume_ = value;
}
inline void OrderBookDetail::set_ask_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ask_volume(value);
  // @@protoc_insertion_point(field_set:Common.Basic.OrderBookDetail.ask_volume)
}

// int32 ask_order_count = 3;
inline void OrderBookDetail::clear_ask_order_count() {
  ask_order_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderBookDetail::_internal_ask_order_count() const {
  return ask_order_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderBookDetail::ask_order_count() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBookDetail.ask_order_count)
  return _internal_ask_order_count();
}
inline void OrderBookDetail::_internal_set_ask_order_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ask_order_count_ = value;
}
inline void OrderBookDetail::set_ask_order_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ask_order_count(value);
  // @@protoc_insertion_point(field_set:Common.Basic.OrderBookDetail.ask_order_count)
}

// double bid_price = 4;
inline void OrderBookDetail::clear_bid_price() {
  bid_price_ = 0;
}
inline double OrderBookDetail::_internal_bid_price() const {
  return bid_price_;
}
inline double OrderBookDetail::bid_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBookDetail.bid_price)
  return _internal_bid_price();
}
inline void OrderBookDetail::_internal_set_bid_price(double value) {
  
  bid_price_ = value;
}
inline void OrderBookDetail::set_bid_price(double value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.OrderBookDetail.bid_price)
}

// int64 bid_volume = 5;
inline void OrderBookDetail::clear_bid_volume() {
  bid_volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderBookDetail::_internal_bid_volume() const {
  return bid_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderBookDetail::bid_volume() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBookDetail.bid_volume)
  return _internal_bid_volume();
}
inline void OrderBookDetail::_internal_set_bid_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bid_volume_ = value;
}
inline void OrderBookDetail::set_bid_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bid_volume(value);
  // @@protoc_insertion_point(field_set:Common.Basic.OrderBookDetail.bid_volume)
}

// int32 bid_order_count = 6;
inline void OrderBookDetail::clear_bid_order_count() {
  bid_order_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderBookDetail::_internal_bid_order_count() const {
  return bid_order_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderBookDetail::bid_order_count() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBookDetail.bid_order_count)
  return _internal_bid_order_count();
}
inline void OrderBookDetail::_internal_set_bid_order_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_order_count_ = value;
}
inline void OrderBookDetail::set_bid_order_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid_order_count(value);
  // @@protoc_insertion_point(field_set:Common.Basic.OrderBookDetail.bid_order_count)
}

// -------------------------------------------------------------------

// OrderBook

// .Common.Basic.Security security = 1;
inline bool OrderBook::_internal_has_security() const {
  return this != internal_default_instance() && security_ != nullptr;
}
inline bool OrderBook::has_security() const {
  return _internal_has_security();
}
inline void OrderBook::clear_security() {
  if (GetArena() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
}
inline const ::Common::Basic::Security& OrderBook::_internal_security() const {
  const ::Common::Basic::Security* p = security_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::Security&>(
      ::Common::Basic::_Security_default_instance_);
}
inline const ::Common::Basic::Security& OrderBook::security() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBook.security)
  return _internal_security();
}
inline void OrderBook::unsafe_arena_set_allocated_security(
    ::Common::Basic::Security* security) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_);
  }
  security_ = security;
  if (security) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.OrderBook.security)
}
inline ::Common::Basic::Security* OrderBook::release_security() {
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::Security* OrderBook::unsafe_arena_release_security() {
  // @@protoc_insertion_point(field_release:Common.Basic.OrderBook.security)
  
  ::Common::Basic::Security* temp = security_;
  security_ = nullptr;
  return temp;
}
inline ::Common::Basic::Security* OrderBook::_internal_mutable_security() {
  
  if (security_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::Security>(GetArena());
    security_ = p;
  }
  return security_;
}
inline ::Common::Basic::Security* OrderBook::mutable_security() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.OrderBook.security)
  return _internal_mutable_security();
}
inline void OrderBook::set_allocated_security(::Common::Basic::Security* security) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_;
  }
  if (security) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security);
    if (message_arena != submessage_arena) {
      security = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    
  } else {
    
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.OrderBook.security)
}

// int32 order_level_count = 2;
inline void OrderBook::clear_order_level_count() {
  order_level_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderBook::_internal_order_level_count() const {
  return order_level_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderBook::order_level_count() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBook.order_level_count)
  return _internal_order_level_count();
}
inline void OrderBook::_internal_set_order_level_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_level_count_ = value;
}
inline void OrderBook::set_order_level_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_level_count(value);
  // @@protoc_insertion_point(field_set:Common.Basic.OrderBook.order_level_count)
}

// uint64 update_time = 3;
inline void OrderBook::clear_update_time() {
  update_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderBook::_internal_update_time() const {
  return update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderBook::update_time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBook.update_time)
  return _internal_update_time();
}
inline void OrderBook::_internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  update_time_ = value;
}
inline void OrderBook::set_update_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.OrderBook.update_time)
}

// repeated .Common.Basic.OrderBookDetail detail_list = 4;
inline int OrderBook::_internal_detail_list_size() const {
  return detail_list_.size();
}
inline int OrderBook::detail_list_size() const {
  return _internal_detail_list_size();
}
inline void OrderBook::clear_detail_list() {
  detail_list_.Clear();
}
inline ::Common::Basic::OrderBookDetail* OrderBook::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:Common.Basic.OrderBook.detail_list)
  return detail_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::OrderBookDetail >*
OrderBook::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:Common.Basic.OrderBook.detail_list)
  return &detail_list_;
}
inline const ::Common::Basic::OrderBookDetail& OrderBook::_internal_detail_list(int index) const {
  return detail_list_.Get(index);
}
inline const ::Common::Basic::OrderBookDetail& OrderBook::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:Common.Basic.OrderBook.detail_list)
  return _internal_detail_list(index);
}
inline ::Common::Basic::OrderBookDetail* OrderBook::_internal_add_detail_list() {
  return detail_list_.Add();
}
inline ::Common::Basic::OrderBookDetail* OrderBook::add_detail_list() {
  // @@protoc_insertion_point(field_add:Common.Basic.OrderBook.detail_list)
  return _internal_add_detail_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Basic::OrderBookDetail >&
OrderBook::detail_list() const {
  // @@protoc_insertion_point(field_list:Common.Basic.OrderBook.detail_list)
  return detail_list_;
}

// -------------------------------------------------------------------

// PlateInfo

// .Common.Basic.Security plate = 1;
inline bool PlateInfo::_internal_has_plate() const {
  return this != internal_default_instance() && plate_ != nullptr;
}
inline bool PlateInfo::has_plate() const {
  return _internal_has_plate();
}
inline void PlateInfo::clear_plate() {
  if (GetArena() == nullptr && plate_ != nullptr) {
    delete plate_;
  }
  plate_ = nullptr;
}
inline const ::Common::Basic::Security& PlateInfo::_internal_plate() const {
  const ::Common::Basic::Security* p = plate_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Basic::Security&>(
      ::Common::Basic::_Security_default_instance_);
}
inline const ::Common::Basic::Security& PlateInfo::plate() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PlateInfo.plate)
  return _internal_plate();
}
inline void PlateInfo::unsafe_arena_set_allocated_plate(
    ::Common::Basic::Security* plate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plate_);
  }
  plate_ = plate;
  if (plate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Common.Basic.PlateInfo.plate)
}
inline ::Common::Basic::Security* PlateInfo::release_plate() {
  
  ::Common::Basic::Security* temp = plate_;
  plate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Common::Basic::Security* PlateInfo::unsafe_arena_release_plate() {
  // @@protoc_insertion_point(field_release:Common.Basic.PlateInfo.plate)
  
  ::Common::Basic::Security* temp = plate_;
  plate_ = nullptr;
  return temp;
}
inline ::Common::Basic::Security* PlateInfo::_internal_mutable_plate() {
  
  if (plate_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Basic::Security>(GetArena());
    plate_ = p;
  }
  return plate_;
}
inline ::Common::Basic::Security* PlateInfo::mutable_plate() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.PlateInfo.plate)
  return _internal_mutable_plate();
}
inline void PlateInfo::set_allocated_plate(::Common::Basic::Security* plate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete plate_;
  }
  if (plate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plate);
    if (message_arena != submessage_arena) {
      plate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plate, submessage_arena);
    }
    
  } else {
    
  }
  plate_ = plate;
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.PlateInfo.plate)
}

// string name = 2;
inline void PlateInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PlateInfo::name() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PlateInfo.name)
  return _internal_name();
}
inline void PlateInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PlateInfo.name)
}
inline std::string* PlateInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.PlateInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PlateInfo::_internal_name() const {
  return name_.Get();
}
inline void PlateInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlateInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.PlateInfo.name)
}
inline void PlateInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.PlateInfo.name)
}
inline void PlateInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.PlateInfo.name)
}
inline std::string* PlateInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlateInfo::release_name() {
  // @@protoc_insertion_point(field_release:Common.Basic.PlateInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlateInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.PlateInfo.name)
}

// int32 plate_type = 3;
inline void PlateInfo::clear_plate_type() {
  plate_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlateInfo::_internal_plate_type() const {
  return plate_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlateInfo::plate_type() const {
  // @@protoc_insertion_point(field_get:Common.Basic.PlateInfo.plate_type)
  return _internal_plate_type();
}
inline void PlateInfo::_internal_set_plate_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plate_type_ = value;
}
inline void PlateInfo::set_plate_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plate_type(value);
  // @@protoc_insertion_point(field_set:Common.Basic.PlateInfo.plate_type)
}

// -------------------------------------------------------------------

// Rehab

// string time = 1;
inline void Rehab::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& Rehab::time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.time)
  return _internal_time();
}
inline void Rehab::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.time)
}
inline std::string* Rehab::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.Rehab.time)
  return _internal_mutable_time();
}
inline const std::string& Rehab::_internal_time() const {
  return time_.Get();
}
inline void Rehab::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rehab::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.Rehab.time)
}
inline void Rehab::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.Rehab.time)
}
inline void Rehab::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.Rehab.time)
}
inline std::string* Rehab::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rehab::release_time() {
  // @@protoc_insertion_point(field_release:Common.Basic.Rehab.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rehab::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.Rehab.time)
}

// int64 company_act_flag = 2;
inline void Rehab::clear_company_act_flag() {
  company_act_flag_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Rehab::_internal_company_act_flag() const {
  return company_act_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Rehab::company_act_flag() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.company_act_flag)
  return _internal_company_act_flag();
}
inline void Rehab::_internal_set_company_act_flag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  company_act_flag_ = value;
}
inline void Rehab::set_company_act_flag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_company_act_flag(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.company_act_flag)
}

// double fwd_factor_A = 3;
inline void Rehab::clear_fwd_factor_a() {
  fwd_factor_a_ = 0;
}
inline double Rehab::_internal_fwd_factor_a() const {
  return fwd_factor_a_;
}
inline double Rehab::fwd_factor_a() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.fwd_factor_A)
  return _internal_fwd_factor_a();
}
inline void Rehab::_internal_set_fwd_factor_a(double value) {
  
  fwd_factor_a_ = value;
}
inline void Rehab::set_fwd_factor_a(double value) {
  _internal_set_fwd_factor_a(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.fwd_factor_A)
}

// double fwd_factor_B = 4;
inline void Rehab::clear_fwd_factor_b() {
  fwd_factor_b_ = 0;
}
inline double Rehab::_internal_fwd_factor_b() const {
  return fwd_factor_b_;
}
inline double Rehab::fwd_factor_b() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.fwd_factor_B)
  return _internal_fwd_factor_b();
}
inline void Rehab::_internal_set_fwd_factor_b(double value) {
  
  fwd_factor_b_ = value;
}
inline void Rehab::set_fwd_factor_b(double value) {
  _internal_set_fwd_factor_b(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.fwd_factor_B)
}

// double bwd_factor_A = 5;
inline void Rehab::clear_bwd_factor_a() {
  bwd_factor_a_ = 0;
}
inline double Rehab::_internal_bwd_factor_a() const {
  return bwd_factor_a_;
}
inline double Rehab::bwd_factor_a() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.bwd_factor_A)
  return _internal_bwd_factor_a();
}
inline void Rehab::_internal_set_bwd_factor_a(double value) {
  
  bwd_factor_a_ = value;
}
inline void Rehab::set_bwd_factor_a(double value) {
  _internal_set_bwd_factor_a(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.bwd_factor_A)
}

// double bwd_factor_B = 6;
inline void Rehab::clear_bwd_factor_b() {
  bwd_factor_b_ = 0;
}
inline double Rehab::_internal_bwd_factor_b() const {
  return bwd_factor_b_;
}
inline double Rehab::bwd_factor_b() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.bwd_factor_B)
  return _internal_bwd_factor_b();
}
inline void Rehab::_internal_set_bwd_factor_b(double value) {
  
  bwd_factor_b_ = value;
}
inline void Rehab::set_bwd_factor_b(double value) {
  _internal_set_bwd_factor_b(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.bwd_factor_B)
}

// int32 split_base = 7;
inline void Rehab::clear_split_base() {
  split_base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_split_base() const {
  return split_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::split_base() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.split_base)
  return _internal_split_base();
}
inline void Rehab::_internal_set_split_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_base_ = value;
}
inline void Rehab::set_split_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_base(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.split_base)
}

// int32 split = 8;
inline void Rehab::clear_split() {
  split_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_split() const {
  return split_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::split() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.split)
  return _internal_split();
}
inline void Rehab::_internal_set_split(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_ = value;
}
inline void Rehab::set_split(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.split)
}

// int32 join_base = 9;
inline void Rehab::clear_join_base() {
  join_base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_join_base() const {
  return join_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::join_base() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.join_base)
  return _internal_join_base();
}
inline void Rehab::_internal_set_join_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  join_base_ = value;
}
inline void Rehab::set_join_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_join_base(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.join_base)
}

// int32 join = 10;
inline void Rehab::clear_join() {
  join_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_join() const {
  return join_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::join() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.join)
  return _internal_join();
}
inline void Rehab::_internal_set_join(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  join_ = value;
}
inline void Rehab::set_join(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_join(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.join)
}

// int32 bonus_base = 11;
inline void Rehab::clear_bonus_base() {
  bonus_base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_bonus_base() const {
  return bonus_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::bonus_base() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.bonus_base)
  return _internal_bonus_base();
}
inline void Rehab::_internal_set_bonus_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bonus_base_ = value;
}
inline void Rehab::set_bonus_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bonus_base(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.bonus_base)
}

// int32 bonus = 12;
inline void Rehab::clear_bonus() {
  bonus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_bonus() const {
  return bonus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::bonus() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.bonus)
  return _internal_bonus();
}
inline void Rehab::_internal_set_bonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bonus_ = value;
}
inline void Rehab::set_bonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bonus(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.bonus)
}

// int32 transfer_base = 13;
inline void Rehab::clear_transfer_base() {
  transfer_base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_transfer_base() const {
  return transfer_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::transfer_base() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.transfer_base)
  return _internal_transfer_base();
}
inline void Rehab::_internal_set_transfer_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transfer_base_ = value;
}
inline void Rehab::set_transfer_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transfer_base(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.transfer_base)
}

// int32 transfer = 14;
inline void Rehab::clear_transfer() {
  transfer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_transfer() const {
  return transfer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::transfer() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.transfer)
  return _internal_transfer();
}
inline void Rehab::_internal_set_transfer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transfer_ = value;
}
inline void Rehab::set_transfer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transfer(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.transfer)
}

// int32 allot_base = 15;
inline void Rehab::clear_allot_base() {
  allot_base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_allot_base() const {
  return allot_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::allot_base() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.allot_base)
  return _internal_allot_base();
}
inline void Rehab::_internal_set_allot_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  allot_base_ = value;
}
inline void Rehab::set_allot_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_allot_base(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.allot_base)
}

// int32 allot = 16;
inline void Rehab::clear_allot() {
  allot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_allot() const {
  return allot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::allot() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.allot)
  return _internal_allot();
}
inline void Rehab::_internal_set_allot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  allot_ = value;
}
inline void Rehab::set_allot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_allot(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.allot)
}

// double allot_price = 17;
inline void Rehab::clear_allot_price() {
  allot_price_ = 0;
}
inline double Rehab::_internal_allot_price() const {
  return allot_price_;
}
inline double Rehab::allot_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.allot_price)
  return _internal_allot_price();
}
inline void Rehab::_internal_set_allot_price(double value) {
  
  allot_price_ = value;
}
inline void Rehab::set_allot_price(double value) {
  _internal_set_allot_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.allot_price)
}

// int32 add_base = 18;
inline void Rehab::clear_add_base() {
  add_base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_add_base() const {
  return add_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::add_base() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.add_base)
  return _internal_add_base();
}
inline void Rehab::_internal_set_add_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_base_ = value;
}
inline void Rehab::set_add_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add_base(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.add_base)
}

// int32 add = 19;
inline void Rehab::clear_add() {
  add_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::_internal_add() const {
  return add_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rehab::add() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.add)
  return _internal_add();
}
inline void Rehab::_internal_set_add(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_ = value;
}
inline void Rehab::set_add(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.add)
}

// double add_price = 20;
inline void Rehab::clear_add_price() {
  add_price_ = 0;
}
inline double Rehab::_internal_add_price() const {
  return add_price_;
}
inline double Rehab::add_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.add_price)
  return _internal_add_price();
}
inline void Rehab::_internal_set_add_price(double value) {
  
  add_price_ = value;
}
inline void Rehab::set_add_price(double value) {
  _internal_set_add_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.add_price)
}

// double dividend = 21;
inline void Rehab::clear_dividend() {
  dividend_ = 0;
}
inline double Rehab::_internal_dividend() const {
  return dividend_;
}
inline double Rehab::dividend() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.dividend)
  return _internal_dividend();
}
inline void Rehab::_internal_set_dividend(double value) {
  
  dividend_ = value;
}
inline void Rehab::set_dividend(double value) {
  _internal_set_dividend(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.dividend)
}

// double special_dividend = 22;
inline void Rehab::clear_special_dividend() {
  special_dividend_ = 0;
}
inline double Rehab::_internal_special_dividend() const {
  return special_dividend_;
}
inline double Rehab::special_dividend() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.special_dividend)
  return _internal_special_dividend();
}
inline void Rehab::_internal_set_special_dividend(double value) {
  
  special_dividend_ = value;
}
inline void Rehab::set_special_dividend(double value) {
  _internal_set_special_dividend(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.special_dividend)
}

// double timestamp = 23;
inline void Rehab::clear_timestamp() {
  timestamp_ = 0;
}
inline double Rehab::_internal_timestamp() const {
  return timestamp_;
}
inline double Rehab::timestamp() const {
  // @@protoc_insertion_point(field_get:Common.Basic.Rehab.timestamp)
  return _internal_timestamp();
}
inline void Rehab::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void Rehab::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Common.Basic.Rehab.timestamp)
}

// -------------------------------------------------------------------

// CapitalFlow

// double capital_in_big = 1;
inline void CapitalFlow::clear_capital_in_big() {
  capital_in_big_ = 0;
}
inline double CapitalFlow::_internal_capital_in_big() const {
  return capital_in_big_;
}
inline double CapitalFlow::capital_in_big() const {
  // @@protoc_insertion_point(field_get:Common.Basic.CapitalFlow.capital_in_big)
  return _internal_capital_in_big();
}
inline void CapitalFlow::_internal_set_capital_in_big(double value) {
  
  capital_in_big_ = value;
}
inline void CapitalFlow::set_capital_in_big(double value) {
  _internal_set_capital_in_big(value);
  // @@protoc_insertion_point(field_set:Common.Basic.CapitalFlow.capital_in_big)
}

// double capital_in_mid = 2;
inline void CapitalFlow::clear_capital_in_mid() {
  capital_in_mid_ = 0;
}
inline double CapitalFlow::_internal_capital_in_mid() const {
  return capital_in_mid_;
}
inline double CapitalFlow::capital_in_mid() const {
  // @@protoc_insertion_point(field_get:Common.Basic.CapitalFlow.capital_in_mid)
  return _internal_capital_in_mid();
}
inline void CapitalFlow::_internal_set_capital_in_mid(double value) {
  
  capital_in_mid_ = value;
}
inline void CapitalFlow::set_capital_in_mid(double value) {
  _internal_set_capital_in_mid(value);
  // @@protoc_insertion_point(field_set:Common.Basic.CapitalFlow.capital_in_mid)
}

// double capital_in_small = 3;
inline void CapitalFlow::clear_capital_in_small() {
  capital_in_small_ = 0;
}
inline double CapitalFlow::_internal_capital_in_small() const {
  return capital_in_small_;
}
inline double CapitalFlow::capital_in_small() const {
  // @@protoc_insertion_point(field_get:Common.Basic.CapitalFlow.capital_in_small)
  return _internal_capital_in_small();
}
inline void CapitalFlow::_internal_set_capital_in_small(double value) {
  
  capital_in_small_ = value;
}
inline void CapitalFlow::set_capital_in_small(double value) {
  _internal_set_capital_in_small(value);
  // @@protoc_insertion_point(field_set:Common.Basic.CapitalFlow.capital_in_small)
}

// double capital_out_big = 4;
inline void CapitalFlow::clear_capital_out_big() {
  capital_out_big_ = 0;
}
inline double CapitalFlow::_internal_capital_out_big() const {
  return capital_out_big_;
}
inline double CapitalFlow::capital_out_big() const {
  // @@protoc_insertion_point(field_get:Common.Basic.CapitalFlow.capital_out_big)
  return _internal_capital_out_big();
}
inline void CapitalFlow::_internal_set_capital_out_big(double value) {
  
  capital_out_big_ = value;
}
inline void CapitalFlow::set_capital_out_big(double value) {
  _internal_set_capital_out_big(value);
  // @@protoc_insertion_point(field_set:Common.Basic.CapitalFlow.capital_out_big)
}

// double capital_out_mid = 5;
inline void CapitalFlow::clear_capital_out_mid() {
  capital_out_mid_ = 0;
}
inline double CapitalFlow::_internal_capital_out_mid() const {
  return capital_out_mid_;
}
inline double CapitalFlow::capital_out_mid() const {
  // @@protoc_insertion_point(field_get:Common.Basic.CapitalFlow.capital_out_mid)
  return _internal_capital_out_mid();
}
inline void CapitalFlow::_internal_set_capital_out_mid(double value) {
  
  capital_out_mid_ = value;
}
inline void CapitalFlow::set_capital_out_mid(double value) {
  _internal_set_capital_out_mid(value);
  // @@protoc_insertion_point(field_set:Common.Basic.CapitalFlow.capital_out_mid)
}

// double capital_out_small = 6;
inline void CapitalFlow::clear_capital_out_small() {
  capital_out_small_ = 0;
}
inline double CapitalFlow::_internal_capital_out_small() const {
  return capital_out_small_;
}
inline double CapitalFlow::capital_out_small() const {
  // @@protoc_insertion_point(field_get:Common.Basic.CapitalFlow.capital_out_small)
  return _internal_capital_out_small();
}
inline void CapitalFlow::_internal_set_capital_out_small(double value) {
  
  capital_out_small_ = value;
}
inline void CapitalFlow::set_capital_out_small(double value) {
  _internal_set_capital_out_small(value);
  // @@protoc_insertion_point(field_set:Common.Basic.CapitalFlow.capital_out_small)
}

// string update_time = 7;
inline void CapitalFlow::clear_update_time() {
  update_time_.ClearToEmpty();
}
inline const std::string& CapitalFlow::update_time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.CapitalFlow.update_time)
  return _internal_update_time();
}
inline void CapitalFlow::set_update_time(const std::string& value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.CapitalFlow.update_time)
}
inline std::string* CapitalFlow::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.CapitalFlow.update_time)
  return _internal_mutable_update_time();
}
inline const std::string& CapitalFlow::_internal_update_time() const {
  return update_time_.Get();
}
inline void CapitalFlow::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CapitalFlow::set_update_time(std::string&& value) {
  
  update_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.CapitalFlow.update_time)
}
inline void CapitalFlow::set_update_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.CapitalFlow.update_time)
}
inline void CapitalFlow::set_update_time(const char* value,
    size_t size) {
  
  update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.CapitalFlow.update_time)
}
inline std::string* CapitalFlow::_internal_mutable_update_time() {
  
  return update_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CapitalFlow::release_update_time() {
  // @@protoc_insertion_point(field_release:Common.Basic.CapitalFlow.update_time)
  return update_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapitalFlow::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.CapitalFlow.update_time)
}

// double update_timestamp = 8;
inline void CapitalFlow::clear_update_timestamp() {
  update_timestamp_ = 0;
}
inline double CapitalFlow::_internal_update_timestamp() const {
  return update_timestamp_;
}
inline double CapitalFlow::update_timestamp() const {
  // @@protoc_insertion_point(field_get:Common.Basic.CapitalFlow.update_timestamp)
  return _internal_update_timestamp();
}
inline void CapitalFlow::_internal_set_update_timestamp(double value) {
  
  update_timestamp_ = value;
}
inline void CapitalFlow::set_update_timestamp(double value) {
  _internal_set_update_timestamp(value);
  // @@protoc_insertion_point(field_set:Common.Basic.CapitalFlow.update_timestamp)
}

// -------------------------------------------------------------------

// KLine

// string time = 1;
inline void KLine::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& KLine::time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.time)
  return _internal_time();
}
inline void KLine::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.time)
}
inline std::string* KLine::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.KLine.time)
  return _internal_mutable_time();
}
inline const std::string& KLine::_internal_time() const {
  return time_.Get();
}
inline void KLine::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KLine::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.KLine.time)
}
inline void KLine::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.KLine.time)
}
inline void KLine::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.KLine.time)
}
inline std::string* KLine::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KLine::release_time() {
  // @@protoc_insertion_point(field_release:Common.Basic.KLine.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KLine::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.KLine.time)
}

// bool is_blank = 2;
inline void KLine::clear_is_blank() {
  is_blank_ = false;
}
inline bool KLine::_internal_is_blank() const {
  return is_blank_;
}
inline bool KLine::is_blank() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.is_blank)
  return _internal_is_blank();
}
inline void KLine::_internal_set_is_blank(bool value) {
  
  is_blank_ = value;
}
inline void KLine::set_is_blank(bool value) {
  _internal_set_is_blank(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.is_blank)
}

// double high_price = 3;
inline void KLine::clear_high_price() {
  high_price_ = 0;
}
inline double KLine::_internal_high_price() const {
  return high_price_;
}
inline double KLine::high_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.high_price)
  return _internal_high_price();
}
inline void KLine::_internal_set_high_price(double value) {
  
  high_price_ = value;
}
inline void KLine::set_high_price(double value) {
  _internal_set_high_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.high_price)
}

// double open_price = 4;
inline void KLine::clear_open_price() {
  open_price_ = 0;
}
inline double KLine::_internal_open_price() const {
  return open_price_;
}
inline double KLine::open_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.open_price)
  return _internal_open_price();
}
inline void KLine::_internal_set_open_price(double value) {
  
  open_price_ = value;
}
inline void KLine::set_open_price(double value) {
  _internal_set_open_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.open_price)
}

// double low_price = 5;
inline void KLine::clear_low_price() {
  low_price_ = 0;
}
inline double KLine::_internal_low_price() const {
  return low_price_;
}
inline double KLine::low_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.low_price)
  return _internal_low_price();
}
inline void KLine::_internal_set_low_price(double value) {
  
  low_price_ = value;
}
inline void KLine::set_low_price(double value) {
  _internal_set_low_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.low_price)
}

// double close_price = 6;
inline void KLine::clear_close_price() {
  close_price_ = 0;
}
inline double KLine::_internal_close_price() const {
  return close_price_;
}
inline double KLine::close_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.close_price)
  return _internal_close_price();
}
inline void KLine::_internal_set_close_price(double value) {
  
  close_price_ = value;
}
inline void KLine::set_close_price(double value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.close_price)
}

// double last_close_price = 7;
inline void KLine::clear_last_close_price() {
  last_close_price_ = 0;
}
inline double KLine::_internal_last_close_price() const {
  return last_close_price_;
}
inline double KLine::last_close_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.last_close_price)
  return _internal_last_close_price();
}
inline void KLine::_internal_set_last_close_price(double value) {
  
  last_close_price_ = value;
}
inline void KLine::set_last_close_price(double value) {
  _internal_set_last_close_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.last_close_price)
}

// int64 volume = 8;
inline void KLine::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KLine::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KLine::volume() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.volume)
  return _internal_volume();
}
inline void KLine::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void KLine::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.volume)
}

// double turnover = 9;
inline void KLine::clear_turnover() {
  turnover_ = 0;
}
inline double KLine::_internal_turnover() const {
  return turnover_;
}
inline double KLine::turnover() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.turnover)
  return _internal_turnover();
}
inline void KLine::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void KLine::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.turnover)
}

// double turnover_rate = 10;
inline void KLine::clear_turnover_rate() {
  turnover_rate_ = 0;
}
inline double KLine::_internal_turnover_rate() const {
  return turnover_rate_;
}
inline double KLine::turnover_rate() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.turnover_rate)
  return _internal_turnover_rate();
}
inline void KLine::_internal_set_turnover_rate(double value) {
  
  turnover_rate_ = value;
}
inline void KLine::set_turnover_rate(double value) {
  _internal_set_turnover_rate(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.turnover_rate)
}

// double pe = 11;
inline void KLine::clear_pe() {
  pe_ = 0;
}
inline double KLine::_internal_pe() const {
  return pe_;
}
inline double KLine::pe() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.pe)
  return _internal_pe();
}
inline void KLine::_internal_set_pe(double value) {
  
  pe_ = value;
}
inline void KLine::set_pe(double value) {
  _internal_set_pe(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.pe)
}

// double change_rate = 12;
inline void KLine::clear_change_rate() {
  change_rate_ = 0;
}
inline double KLine::_internal_change_rate() const {
  return change_rate_;
}
inline double KLine::change_rate() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.change_rate)
  return _internal_change_rate();
}
inline void KLine::_internal_set_change_rate(double value) {
  
  change_rate_ = value;
}
inline void KLine::set_change_rate(double value) {
  _internal_set_change_rate(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.change_rate)
}

// double timestamp = 13;
inline void KLine::clear_timestamp() {
  timestamp_ = 0;
}
inline double KLine::_internal_timestamp() const {
  return timestamp_;
}
inline double KLine::timestamp() const {
  // @@protoc_insertion_point(field_get:Common.Basic.KLine.timestamp)
  return _internal_timestamp();
}
inline void KLine::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void KLine::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Common.Basic.KLine.timestamp)
}

// -------------------------------------------------------------------

// TimeShare

// string time = 1;
inline void TimeShare::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& TimeShare::time() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TimeShare.time)
  return _internal_time();
}
inline void TimeShare::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TimeShare.time)
}
inline std::string* TimeShare::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Common.Basic.TimeShare.time)
  return _internal_mutable_time();
}
inline const std::string& TimeShare::_internal_time() const {
  return time_.Get();
}
inline void TimeShare::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeShare::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.Basic.TimeShare.time)
}
inline void TimeShare::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.Basic.TimeShare.time)
}
inline void TimeShare::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.Basic.TimeShare.time)
}
inline std::string* TimeShare::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeShare::release_time() {
  // @@protoc_insertion_point(field_release:Common.Basic.TimeShare.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeShare::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.Basic.TimeShare.time)
}

// bool is_blank = 2;
inline void TimeShare::clear_is_blank() {
  is_blank_ = false;
}
inline bool TimeShare::_internal_is_blank() const {
  return is_blank_;
}
inline bool TimeShare::is_blank() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TimeShare.is_blank)
  return _internal_is_blank();
}
inline void TimeShare::_internal_set_is_blank(bool value) {
  
  is_blank_ = value;
}
inline void TimeShare::set_is_blank(bool value) {
  _internal_set_is_blank(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TimeShare.is_blank)
}

// double price = 3;
inline void TimeShare::clear_price() {
  price_ = 0;
}
inline double TimeShare::_internal_price() const {
  return price_;
}
inline double TimeShare::price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TimeShare.price)
  return _internal_price();
}
inline void TimeShare::_internal_set_price(double value) {
  
  price_ = value;
}
inline void TimeShare::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TimeShare.price)
}

// double last_close_price = 4;
inline void TimeShare::clear_last_close_price() {
  last_close_price_ = 0;
}
inline double TimeShare::_internal_last_close_price() const {
  return last_close_price_;
}
inline double TimeShare::last_close_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TimeShare.last_close_price)
  return _internal_last_close_price();
}
inline void TimeShare::_internal_set_last_close_price(double value) {
  
  last_close_price_ = value;
}
inline void TimeShare::set_last_close_price(double value) {
  _internal_set_last_close_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TimeShare.last_close_price)
}

// double avg_price = 5;
inline void TimeShare::clear_avg_price() {
  avg_price_ = 0;
}
inline double TimeShare::_internal_avg_price() const {
  return avg_price_;
}
inline double TimeShare::avg_price() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TimeShare.avg_price)
  return _internal_avg_price();
}
inline void TimeShare::_internal_set_avg_price(double value) {
  
  avg_price_ = value;
}
inline void TimeShare::set_avg_price(double value) {
  _internal_set_avg_price(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TimeShare.avg_price)
}

// int64 volume = 6;
inline void TimeShare::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeShare::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeShare::volume() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TimeShare.volume)
  return _internal_volume();
}
inline void TimeShare::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void TimeShare::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TimeShare.volume)
}

// double turnover = 7;
inline void TimeShare::clear_turnover() {
  turnover_ = 0;
}
inline double TimeShare::_internal_turnover() const {
  return turnover_;
}
inline double TimeShare::turnover() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TimeShare.turnover)
  return _internal_turnover();
}
inline void TimeShare::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void TimeShare::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TimeShare.turnover)
}

// double timestamp = 98;
inline void TimeShare::clear_timestamp() {
  timestamp_ = 0;
}
inline double TimeShare::_internal_timestamp() const {
  return timestamp_;
}
inline double TimeShare::timestamp() const {
  // @@protoc_insertion_point(field_get:Common.Basic.TimeShare.timestamp)
  return _internal_timestamp();
}
inline void TimeShare::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void TimeShare::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Common.Basic.TimeShare.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Common::Basic::QotMarket> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::QotMarket>() {
  return ::Common::Basic::QotMarket_descriptor();
}
template <> struct is_proto_enum< ::Common::Basic::AssetClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::AssetClass>() {
  return ::Common::Basic::AssetClass_descriptor();
}
template <> struct is_proto_enum< ::Common::Basic::SecurityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::SecurityType>() {
  return ::Common::Basic::SecurityType_descriptor();
}
template <> struct is_proto_enum< ::Common::Basic::CompanyAct> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::CompanyAct>() {
  return ::Common::Basic::CompanyAct_descriptor();
}
template <> struct is_proto_enum< ::Common::Basic::RehabType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::RehabType>() {
  return ::Common::Basic::RehabType_descriptor();
}
template <> struct is_proto_enum< ::Common::Basic::SecurityStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::SecurityStatus>() {
  return ::Common::Basic::SecurityStatus_descriptor();
}
template <> struct is_proto_enum< ::Common::Basic::QotMarketState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::QotMarketState>() {
  return ::Common::Basic::QotMarketState_descriptor();
}
template <> struct is_proto_enum< ::Common::Basic::TickerDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::TickerDirection>() {
  return ::Common::Basic::TickerDirection_descriptor();
}
template <> struct is_proto_enum< ::Common::Basic::TradingSessionSubID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::Basic::TradingSessionSubID>() {
  return ::Common::Basic::TradingSessionSubID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Basic_2eproto
