// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuoteRPC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_QuoteRPC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_QuoteRPC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_QuoteRPC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_QuoteRPC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_QuoteRPC_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_QuoteRPC_2eproto_metadata_getter(int index);
namespace Common {
namespace RPC {
class ArrayQuoteResponse;
struct ArrayQuoteResponseDefaultTypeInternal;
extern ArrayQuoteResponseDefaultTypeInternal _ArrayQuoteResponse_default_instance_;
class QuoteRequest;
struct QuoteRequestDefaultTypeInternal;
extern QuoteRequestDefaultTypeInternal _QuoteRequest_default_instance_;
class QuoteResponse;
struct QuoteResponseDefaultTypeInternal;
extern QuoteResponseDefaultTypeInternal _QuoteResponse_default_instance_;
class StreamMessage;
struct StreamMessageDefaultTypeInternal;
extern StreamMessageDefaultTypeInternal _StreamMessage_default_instance_;
}  // namespace RPC
}  // namespace Common
PROTOBUF_NAMESPACE_OPEN
template<> ::Common::RPC::ArrayQuoteResponse* Arena::CreateMaybeMessage<::Common::RPC::ArrayQuoteResponse>(Arena*);
template<> ::Common::RPC::QuoteRequest* Arena::CreateMaybeMessage<::Common::RPC::QuoteRequest>(Arena*);
template<> ::Common::RPC::QuoteResponse* Arena::CreateMaybeMessage<::Common::RPC::QuoteResponse>(Arena*);
template<> ::Common::RPC::StreamMessage* Arena::CreateMaybeMessage<::Common::RPC::StreamMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Common {
namespace RPC {

enum RequestType : int {
  Unknown = 0,
  SecurityDefinition = 1,
  TradingSessionStatus = 2,
  SecurityStatus = 3,
  VCMTrigger = 4,
  RefPrice = 5,
  Snapshot = 6,
  Order = 7,
  Ticker = 8,
  RT = 9,
  Broker = 10,
  Capital = 11,
  KL_Day = 50,
  KL_5Min = 51,
  KL_15Min = 52,
  KL_30Min = 53,
  KL_60Min = 54,
  KL_1Min = 55,
  KL_Week = 56,
  KL_Month = 57,
  KL_Qurater = 58,
  KL_Year = 59,
  Heart_Beat = 249,
  Finish = 250,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = Unknown;
constexpr RequestType RequestType_MAX = Finish;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor();
template<typename T>
inline const std::string& RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestType_descriptor(), enum_t_value);
}
inline bool RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
// ===================================================================

class QuoteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.RPC.QuoteRequest) */ {
 public:
  inline QuoteRequest() : QuoteRequest(nullptr) {}
  virtual ~QuoteRequest();
  explicit constexpr QuoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuoteRequest(const QuoteRequest& from);
  QuoteRequest(QuoteRequest&& from) noexcept
    : QuoteRequest() {
    *this = ::std::move(from);
  }

  inline QuoteRequest& operator=(const QuoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuoteRequest& operator=(QuoteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuoteRequest* internal_default_instance() {
    return reinterpret_cast<const QuoteRequest*>(
               &_QuoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QuoteRequest& a, QuoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuoteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuoteRequest* New() const final {
    return CreateMaybeMessage<QuoteRequest>(nullptr);
  }

  QuoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuoteRequest& from);
  void MergeFrom(const QuoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.RPC.QuoteRequest";
  }
  protected:
  explicit QuoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_QuoteRPC_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 1,
  };
  // repeated .Common.RPC.RequestType types = 1;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::Common::RPC::RequestType _internal_types(int index) const;
  void _internal_add_types(::Common::RPC::RequestType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_types();
  public:
  ::Common::RPC::RequestType types(int index) const;
  void set_types(int index, ::Common::RPC::RequestType value);
  void add_types(::Common::RPC::RequestType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_types();

  // @@protoc_insertion_point(class_scope:Common.RPC.QuoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> types_;
  mutable std::atomic<int> _types_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_QuoteRPC_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.RPC.StreamMessage) */ {
 public:
  inline StreamMessage() : StreamMessage(nullptr) {}
  virtual ~StreamMessage();
  explicit constexpr StreamMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage(const StreamMessage& from);
  StreamMessage(StreamMessage&& from) noexcept
    : StreamMessage() {
    *this = ::std::move(from);
  }

  inline StreamMessage& operator=(const StreamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage& operator=(StreamMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMessage* internal_default_instance() {
    return reinterpret_cast<const StreamMessage*>(
               &_StreamMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamMessage& a, StreamMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage* New() const final {
    return CreateMaybeMessage<StreamMessage>(nullptr);
  }

  StreamMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMessage& from);
  void MergeFrom(const StreamMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.RPC.StreamMessage";
  }
  protected:
  explicit StreamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_QuoteRPC_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.RPC.StreamMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_QuoteRPC_2eproto;
};
// -------------------------------------------------------------------

class QuoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.RPC.QuoteResponse) */ {
 public:
  inline QuoteResponse() : QuoteResponse(nullptr) {}
  virtual ~QuoteResponse();
  explicit constexpr QuoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuoteResponse(const QuoteResponse& from);
  QuoteResponse(QuoteResponse&& from) noexcept
    : QuoteResponse() {
    *this = ::std::move(from);
  }

  inline QuoteResponse& operator=(const QuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuoteResponse& operator=(QuoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuoteResponse* internal_default_instance() {
    return reinterpret_cast<const QuoteResponse*>(
               &_QuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuoteResponse& a, QuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuoteResponse* New() const final {
    return CreateMaybeMessage<QuoteResponse>(nullptr);
  }

  QuoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuoteResponse& from);
  void MergeFrom(const QuoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.RPC.QuoteResponse";
  }
  protected:
  explicit QuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_QuoteRPC_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common.RPC.QuoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_QuoteRPC_2eproto;
};
// -------------------------------------------------------------------

class ArrayQuoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common.RPC.ArrayQuoteResponse) */ {
 public:
  inline ArrayQuoteResponse() : ArrayQuoteResponse(nullptr) {}
  virtual ~ArrayQuoteResponse();
  explicit constexpr ArrayQuoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayQuoteResponse(const ArrayQuoteResponse& from);
  ArrayQuoteResponse(ArrayQuoteResponse&& from) noexcept
    : ArrayQuoteResponse() {
    *this = ::std::move(from);
  }

  inline ArrayQuoteResponse& operator=(const ArrayQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayQuoteResponse& operator=(ArrayQuoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayQuoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayQuoteResponse* internal_default_instance() {
    return reinterpret_cast<const ArrayQuoteResponse*>(
               &_ArrayQuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArrayQuoteResponse& a, ArrayQuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayQuoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayQuoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayQuoteResponse* New() const final {
    return CreateMaybeMessage<ArrayQuoteResponse>(nullptr);
  }

  ArrayQuoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayQuoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayQuoteResponse& from);
  void MergeFrom(const ArrayQuoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayQuoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common.RPC.ArrayQuoteResponse";
  }
  protected:
  explicit ArrayQuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_QuoteRPC_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // repeated .Common.RPC.QuoteResponse record = 1;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::Common::RPC::QuoteResponse* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::RPC::QuoteResponse >*
      mutable_record();
  private:
  const ::Common::RPC::QuoteResponse& _internal_record(int index) const;
  ::Common::RPC::QuoteResponse* _internal_add_record();
  public:
  const ::Common::RPC::QuoteResponse& record(int index) const;
  ::Common::RPC::QuoteResponse* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::RPC::QuoteResponse >&
      record() const;

  // @@protoc_insertion_point(class_scope:Common.RPC.ArrayQuoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::RPC::QuoteResponse > record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_QuoteRPC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuoteRequest

// repeated .Common.RPC.RequestType types = 1;
inline int QuoteRequest::_internal_types_size() const {
  return types_.size();
}
inline int QuoteRequest::types_size() const {
  return _internal_types_size();
}
inline void QuoteRequest::clear_types() {
  types_.Clear();
}
inline ::Common::RPC::RequestType QuoteRequest::_internal_types(int index) const {
  return static_cast< ::Common::RPC::RequestType >(types_.Get(index));
}
inline ::Common::RPC::RequestType QuoteRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:Common.RPC.QuoteRequest.types)
  return _internal_types(index);
}
inline void QuoteRequest::set_types(int index, ::Common::RPC::RequestType value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:Common.RPC.QuoteRequest.types)
}
inline void QuoteRequest::_internal_add_types(::Common::RPC::RequestType value) {
  types_.Add(value);
}
inline void QuoteRequest::add_types(::Common::RPC::RequestType value) {
  // @@protoc_insertion_point(field_add:Common.RPC.QuoteRequest.types)
  _internal_add_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
QuoteRequest::types() const {
  // @@protoc_insertion_point(field_list:Common.RPC.QuoteRequest.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
QuoteRequest::_internal_mutable_types() {
  return &types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
QuoteRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:Common.RPC.QuoteRequest.types)
  return _internal_mutable_types();
}

// -------------------------------------------------------------------

// StreamMessage

// uint32 type = 1;
inline void StreamMessage::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamMessage::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamMessage::type() const {
  // @@protoc_insertion_point(field_get:Common.RPC.StreamMessage.type)
  return _internal_type();
}
inline void StreamMessage::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void StreamMessage::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Common.RPC.StreamMessage.type)
}

// bytes payload = 2;
inline void StreamMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& StreamMessage::payload() const {
  // @@protoc_insertion_point(field_get:Common.RPC.StreamMessage.payload)
  return _internal_payload();
}
inline void StreamMessage::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:Common.RPC.StreamMessage.payload)
}
inline std::string* StreamMessage::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:Common.RPC.StreamMessage.payload)
  return _internal_mutable_payload();
}
inline const std::string& StreamMessage::_internal_payload() const {
  return payload_.Get();
}
inline void StreamMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamMessage::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.RPC.StreamMessage.payload)
}
inline void StreamMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.RPC.StreamMessage.payload)
}
inline void StreamMessage::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.RPC.StreamMessage.payload)
}
inline std::string* StreamMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamMessage::release_payload() {
  // @@protoc_insertion_point(field_release:Common.RPC.StreamMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.RPC.StreamMessage.payload)
}

// -------------------------------------------------------------------

// QuoteResponse

// uint32 type = 1;
inline void QuoteResponse::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuoteResponse::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuoteResponse::type() const {
  // @@protoc_insertion_point(field_get:Common.RPC.QuoteResponse.type)
  return _internal_type();
}
inline void QuoteResponse::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void QuoteResponse::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Common.RPC.QuoteResponse.type)
}

// bytes payload = 2;
inline void QuoteResponse::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& QuoteResponse::payload() const {
  // @@protoc_insertion_point(field_get:Common.RPC.QuoteResponse.payload)
  return _internal_payload();
}
inline void QuoteResponse::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:Common.RPC.QuoteResponse.payload)
}
inline std::string* QuoteResponse::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:Common.RPC.QuoteResponse.payload)
  return _internal_mutable_payload();
}
inline const std::string& QuoteResponse::_internal_payload() const {
  return payload_.Get();
}
inline void QuoteResponse::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QuoteResponse::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Common.RPC.QuoteResponse.payload)
}
inline void QuoteResponse::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Common.RPC.QuoteResponse.payload)
}
inline void QuoteResponse::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Common.RPC.QuoteResponse.payload)
}
inline std::string* QuoteResponse::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QuoteResponse::release_payload() {
  // @@protoc_insertion_point(field_release:Common.RPC.QuoteResponse.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteResponse::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Common.RPC.QuoteResponse.payload)
}

// -------------------------------------------------------------------

// ArrayQuoteResponse

// repeated .Common.RPC.QuoteResponse record = 1;
inline int ArrayQuoteResponse::_internal_record_size() const {
  return record_.size();
}
inline int ArrayQuoteResponse::record_size() const {
  return _internal_record_size();
}
inline void ArrayQuoteResponse::clear_record() {
  record_.Clear();
}
inline ::Common::RPC::QuoteResponse* ArrayQuoteResponse::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:Common.RPC.ArrayQuoteResponse.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::RPC::QuoteResponse >*
ArrayQuoteResponse::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:Common.RPC.ArrayQuoteResponse.record)
  return &record_;
}
inline const ::Common::RPC::QuoteResponse& ArrayQuoteResponse::_internal_record(int index) const {
  return record_.Get(index);
}
inline const ::Common::RPC::QuoteResponse& ArrayQuoteResponse::record(int index) const {
  // @@protoc_insertion_point(field_get:Common.RPC.ArrayQuoteResponse.record)
  return _internal_record(index);
}
inline ::Common::RPC::QuoteResponse* ArrayQuoteResponse::_internal_add_record() {
  return record_.Add();
}
inline ::Common::RPC::QuoteResponse* ArrayQuoteResponse::add_record() {
  // @@protoc_insertion_point(field_add:Common.RPC.ArrayQuoteResponse.record)
  return _internal_add_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::RPC::QuoteResponse >&
ArrayQuoteResponse::record() const {
  // @@protoc_insertion_point(field_list:Common.RPC.ArrayQuoteResponse.record)
  return record_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPC
}  // namespace Common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Common::RPC::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Common::RPC::RequestType>() {
  return ::Common::RPC::RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_QuoteRPC_2eproto
