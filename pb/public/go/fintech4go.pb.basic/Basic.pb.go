// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: Basic.proto

package fintech4go_pb_basic

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enum
type MarketID int32

const (
	MarketID_QotMarket_Unknown       MarketID = 0  //未知市场
	MarketID_QotMarket_HK_Security   MarketID = 1  //香港市场
	MarketID_QotMarket_US_Security   MarketID = 11 //美国市场
	MarketID_QotMarket_CNSH_Security MarketID = 21 //沪股市场
	MarketID_QotMarket_CNSZ_Security MarketID = 22 //深股市场
	MarketID_QotMarket_CHINA_CZCE    MarketID = 100
	MarketID_QotMarket_CHINA_INE     MarketID = 101
	MarketID_QotMarket_CHINA_DCE     MarketID = 102
	MarketID_QotMarket_CHINA_SHFE    MarketID = 103
	MarketID_QotMarket_CHINA_CFFEX   MarketID = 104
)

// Enum value maps for MarketID.
var (
	MarketID_name = map[int32]string{
		0:   "QotMarket_Unknown",
		1:   "QotMarket_HK_Security",
		11:  "QotMarket_US_Security",
		21:  "QotMarket_CNSH_Security",
		22:  "QotMarket_CNSZ_Security",
		100: "QotMarket_CHINA_CZCE",
		101: "QotMarket_CHINA_INE",
		102: "QotMarket_CHINA_DCE",
		103: "QotMarket_CHINA_SHFE",
		104: "QotMarket_CHINA_CFFEX",
	}
	MarketID_value = map[string]int32{
		"QotMarket_Unknown":       0,
		"QotMarket_HK_Security":   1,
		"QotMarket_US_Security":   11,
		"QotMarket_CNSH_Security": 21,
		"QotMarket_CNSZ_Security": 22,
		"QotMarket_CHINA_CZCE":    100,
		"QotMarket_CHINA_INE":     101,
		"QotMarket_CHINA_DCE":     102,
		"QotMarket_CHINA_SHFE":    103,
		"QotMarket_CHINA_CFFEX":   104,
	}
)

func (x MarketID) Enum() *MarketID {
	p := new(MarketID)
	*p = x
	return p
}

func (x MarketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketID) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[0].Descriptor()
}

func (MarketID) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[0]
}

func (x MarketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketID.Descriptor instead.
func (MarketID) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{0}
}

type AssetClass int32

const (
	AssetClass_AssetClass_Unknow AssetClass = 0 //未知
	AssetClass_AssetClass_Stock  AssetClass = 1 //股票
	AssetClass_AssetClass_Bond   AssetClass = 2 //债券
	AssetClass_AssetClass_Future AssetClass = 3 //期货
)

// Enum value maps for AssetClass.
var (
	AssetClass_name = map[int32]string{
		0: "AssetClass_Unknow",
		1: "AssetClass_Stock",
		2: "AssetClass_Bond",
		3: "AssetClass_Future",
	}
	AssetClass_value = map[string]int32{
		"AssetClass_Unknow": 0,
		"AssetClass_Stock":  1,
		"AssetClass_Bond":   2,
		"AssetClass_Future": 3,
	}
)

func (x AssetClass) Enum() *AssetClass {
	p := new(AssetClass)
	*p = x
	return p
}

func (x AssetClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetClass) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[1].Descriptor()
}

func (AssetClass) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[1]
}

func (x AssetClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetClass.Descriptor instead.
func (AssetClass) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{1}
}

type SecurityType int32

const (
	SecurityType_SecurityType_Unknown SecurityType = 0 //未知
	SecurityType_SecurityType_Bond    SecurityType = 1 //债券
	SecurityType_SecurityType_Eqty    SecurityType = 2 //正股
	SecurityType_SecurityType_Trust   SecurityType = 3 //信托,基金
	SecurityType_SecurityType_Warrant SecurityType = 4 //窝轮
	SecurityType_SecurityType_Index   SecurityType = 5 //指数
	SecurityType_SecurityType_Plate   SecurityType = 6 //板块
	SecurityType_SecurityType_Option  SecurityType = 7 //期权
	SecurityType_SecurityType_Future  SecurityType = 8 //期货
)

// Enum value maps for SecurityType.
var (
	SecurityType_name = map[int32]string{
		0: "SecurityType_Unknown",
		1: "SecurityType_Bond",
		2: "SecurityType_Eqty",
		3: "SecurityType_Trust",
		4: "SecurityType_Warrant",
		5: "SecurityType_Index",
		6: "SecurityType_Plate",
		7: "SecurityType_Option",
		8: "SecurityType_Future",
	}
	SecurityType_value = map[string]int32{
		"SecurityType_Unknown": 0,
		"SecurityType_Bond":    1,
		"SecurityType_Eqty":    2,
		"SecurityType_Trust":   3,
		"SecurityType_Warrant": 4,
		"SecurityType_Index":   5,
		"SecurityType_Plate":   6,
		"SecurityType_Option":  7,
		"SecurityType_Future":  8,
	}
)

func (x SecurityType) Enum() *SecurityType {
	p := new(SecurityType)
	*p = x
	return p
}

func (x SecurityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityType) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[2].Descriptor()
}

func (SecurityType) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[2]
}

func (x SecurityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityType.Descriptor instead.
func (SecurityType) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{2}
}

type CompanyAct int32

const (
	CompanyAct_CompanyAct_None       CompanyAct = 0   //无
	CompanyAct_CompanyAct_Split      CompanyAct = 1   //拆股
	CompanyAct_CompanyAct_Join       CompanyAct = 2   //合股
	CompanyAct_CompanyAct_Bonus      CompanyAct = 4   //送股
	CompanyAct_CompanyAct_Transfer   CompanyAct = 8   //转赠股
	CompanyAct_CompanyAct_Allot      CompanyAct = 16  //配股
	CompanyAct_CompanyAct_Add        CompanyAct = 32  //增发股
	CompanyAct_CompanyAct_Dividend   CompanyAct = 64  //现金分红
	CompanyAct_CompanyAct_SPDividend CompanyAct = 128 //特别股息
)

// Enum value maps for CompanyAct.
var (
	CompanyAct_name = map[int32]string{
		0:   "CompanyAct_None",
		1:   "CompanyAct_Split",
		2:   "CompanyAct_Join",
		4:   "CompanyAct_Bonus",
		8:   "CompanyAct_Transfer",
		16:  "CompanyAct_Allot",
		32:  "CompanyAct_Add",
		64:  "CompanyAct_Dividend",
		128: "CompanyAct_SPDividend",
	}
	CompanyAct_value = map[string]int32{
		"CompanyAct_None":       0,
		"CompanyAct_Split":      1,
		"CompanyAct_Join":       2,
		"CompanyAct_Bonus":      4,
		"CompanyAct_Transfer":   8,
		"CompanyAct_Allot":      16,
		"CompanyAct_Add":        32,
		"CompanyAct_Dividend":   64,
		"CompanyAct_SPDividend": 128,
	}
)

func (x CompanyAct) Enum() *CompanyAct {
	p := new(CompanyAct)
	*p = x
	return p
}

func (x CompanyAct) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyAct) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[3].Descriptor()
}

func (CompanyAct) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[3]
}

func (x CompanyAct) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanyAct.Descriptor instead.
func (CompanyAct) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{3}
}

type RehabType int32

const (
	RehabType_RehabType_None     RehabType = 0 //不复权
	RehabType_RehabType_Forward  RehabType = 1 //前复权
	RehabType_RehabType_Backward RehabType = 2 //后复权
)

// Enum value maps for RehabType.
var (
	RehabType_name = map[int32]string{
		0: "RehabType_None",
		1: "RehabType_Forward",
		2: "RehabType_Backward",
	}
	RehabType_value = map[string]int32{
		"RehabType_None":     0,
		"RehabType_Forward":  1,
		"RehabType_Backward": 2,
	}
)

func (x RehabType) Enum() *RehabType {
	p := new(RehabType)
	*p = x
	return p
}

func (x RehabType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RehabType) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[4].Descriptor()
}

func (RehabType) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[4]
}

func (x RehabType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RehabType.Descriptor instead.
func (RehabType) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{4}
}

type SecurityStatus int32

const (
	SecurityStatus_SecurityStatus_Unknown                     SecurityStatus = 0  //未知
	SecurityStatus_SecurityStatus_Normal                      SecurityStatus = 1  //正常状态
	SecurityStatus_SecurityStatus_Listing                     SecurityStatus = 2  //待上市
	SecurityStatus_SecurityStatus_Purchasing                  SecurityStatus = 3  //申购中
	SecurityStatus_SecurityStatus_Subscribing                 SecurityStatus = 4  //认购中
	SecurityStatus_SecurityStatus_BeforeDrakTradeOpening      SecurityStatus = 5  //暗盘开盘前
	SecurityStatus_SecurityStatus_DrakTrading                 SecurityStatus = 6  //暗盘交易中
	SecurityStatus_SecurityStatus_DrakTradeEnd                SecurityStatus = 7  //暗盘已收盘
	SecurityStatus_SecurityStatus_ToBeOpen                    SecurityStatus = 8  //待开盘
	SecurityStatus_SecurityStatus_Suspended                   SecurityStatus = 9  //停牌
	SecurityStatus_SecurityStatus_Called                      SecurityStatus = 10 //已收回
	SecurityStatus_SecurityStatus_ExpiredLastTradingDate      SecurityStatus = 11 //已过最后交易日
	SecurityStatus_SecurityStatus_Expired                     SecurityStatus = 12 //已过期
	SecurityStatus_SecurityStatus_Delisted                    SecurityStatus = 13 //已退市
	SecurityStatus_SecurityStatus_ChangeToTemporaryCode       SecurityStatus = 14 //公司行动中，交易关闭，转至临时代码交易
	SecurityStatus_SecurityStatus_TemporaryCodeTradeEnd       SecurityStatus = 15 //临时买卖结束，交易关闭
	SecurityStatus_SecurityStatus_ChangedPlateTradeEnd        SecurityStatus = 16 //已转板，旧代码交易关闭
	SecurityStatus_SecurityStatus_ChangedCodeTradeEnd         SecurityStatus = 17 //已换代码，旧代码交易关闭
	SecurityStatus_SecurityStatus_RecoverableCircuitBreaker   SecurityStatus = 18 //可恢复性熔断
	SecurityStatus_SecurityStatus_UnRecoverableCircuitBreaker SecurityStatus = 19 //不可恢复性熔断
	SecurityStatus_SecurityStatus_AfterCombination            SecurityStatus = 20 //盘后撮合
	SecurityStatus_SecurityStatus_AfterTransation             SecurityStatus = 21 //盘后交易
)

// Enum value maps for SecurityStatus.
var (
	SecurityStatus_name = map[int32]string{
		0:  "SecurityStatus_Unknown",
		1:  "SecurityStatus_Normal",
		2:  "SecurityStatus_Listing",
		3:  "SecurityStatus_Purchasing",
		4:  "SecurityStatus_Subscribing",
		5:  "SecurityStatus_BeforeDrakTradeOpening",
		6:  "SecurityStatus_DrakTrading",
		7:  "SecurityStatus_DrakTradeEnd",
		8:  "SecurityStatus_ToBeOpen",
		9:  "SecurityStatus_Suspended",
		10: "SecurityStatus_Called",
		11: "SecurityStatus_ExpiredLastTradingDate",
		12: "SecurityStatus_Expired",
		13: "SecurityStatus_Delisted",
		14: "SecurityStatus_ChangeToTemporaryCode",
		15: "SecurityStatus_TemporaryCodeTradeEnd",
		16: "SecurityStatus_ChangedPlateTradeEnd",
		17: "SecurityStatus_ChangedCodeTradeEnd",
		18: "SecurityStatus_RecoverableCircuitBreaker",
		19: "SecurityStatus_UnRecoverableCircuitBreaker",
		20: "SecurityStatus_AfterCombination",
		21: "SecurityStatus_AfterTransation",
	}
	SecurityStatus_value = map[string]int32{
		"SecurityStatus_Unknown":                     0,
		"SecurityStatus_Normal":                      1,
		"SecurityStatus_Listing":                     2,
		"SecurityStatus_Purchasing":                  3,
		"SecurityStatus_Subscribing":                 4,
		"SecurityStatus_BeforeDrakTradeOpening":      5,
		"SecurityStatus_DrakTrading":                 6,
		"SecurityStatus_DrakTradeEnd":                7,
		"SecurityStatus_ToBeOpen":                    8,
		"SecurityStatus_Suspended":                   9,
		"SecurityStatus_Called":                      10,
		"SecurityStatus_ExpiredLastTradingDate":      11,
		"SecurityStatus_Expired":                     12,
		"SecurityStatus_Delisted":                    13,
		"SecurityStatus_ChangeToTemporaryCode":       14,
		"SecurityStatus_TemporaryCodeTradeEnd":       15,
		"SecurityStatus_ChangedPlateTradeEnd":        16,
		"SecurityStatus_ChangedCodeTradeEnd":         17,
		"SecurityStatus_RecoverableCircuitBreaker":   18,
		"SecurityStatus_UnRecoverableCircuitBreaker": 19,
		"SecurityStatus_AfterCombination":            20,
		"SecurityStatus_AfterTransation":             21,
	}
)

func (x SecurityStatus) Enum() *SecurityStatus {
	p := new(SecurityStatus)
	*p = x
	return p
}

func (x SecurityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[5].Descriptor()
}

func (SecurityStatus) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[5]
}

func (x SecurityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityStatus.Descriptor instead.
func (SecurityStatus) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{5}
}

type QotMarketState int32

const (
	QotMarketState_QotMarketState_None            QotMarketState = 0  // 无交易
	QotMarketState_QotMarketState_Auction         QotMarketState = 1  // 竞价
	QotMarketState_QotMarketState_WaitingOpen     QotMarketState = 2  // 早盘前等待开盘
	QotMarketState_QotMarketState_Morning         QotMarketState = 3  // 早盘
	QotMarketState_QotMarketState_Rest            QotMarketState = 4  // 午间休市
	QotMarketState_QotMarketState_Afternoon       QotMarketState = 5  // 午盘
	QotMarketState_QotMarketState_Closed          QotMarketState = 6  // 收盘
	QotMarketState_QotMarketState_PreMarketBegin  QotMarketState = 8  // 盘前
	QotMarketState_QotMarketState_PreMarketEnd    QotMarketState = 9  // 盘前结束
	QotMarketState_QotMarketState_AfterHoursBegin QotMarketState = 10 // 盘后
	QotMarketState_QotMarketState_AfterHoursEnd   QotMarketState = 11 // 盘后结束
	//科创板新增状态
	QotMarketState_QotMarketState_StibAfterHoursWait  QotMarketState = 27 // 科创板的盘后撮合时段
	QotMarketState_QotMarketState_StibAfterHoursBegin QotMarketState = 28 // 科创板的盘后交易开始
	QotMarketState_QotMarketState_StibAfterHoursEnd   QotMarketState = 29 // 科创板的盘后交易结束
)

// Enum value maps for QotMarketState.
var (
	QotMarketState_name = map[int32]string{
		0:  "QotMarketState_None",
		1:  "QotMarketState_Auction",
		2:  "QotMarketState_WaitingOpen",
		3:  "QotMarketState_Morning",
		4:  "QotMarketState_Rest",
		5:  "QotMarketState_Afternoon",
		6:  "QotMarketState_Closed",
		8:  "QotMarketState_PreMarketBegin",
		9:  "QotMarketState_PreMarketEnd",
		10: "QotMarketState_AfterHoursBegin",
		11: "QotMarketState_AfterHoursEnd",
		27: "QotMarketState_StibAfterHoursWait",
		28: "QotMarketState_StibAfterHoursBegin",
		29: "QotMarketState_StibAfterHoursEnd",
	}
	QotMarketState_value = map[string]int32{
		"QotMarketState_None":                0,
		"QotMarketState_Auction":             1,
		"QotMarketState_WaitingOpen":         2,
		"QotMarketState_Morning":             3,
		"QotMarketState_Rest":                4,
		"QotMarketState_Afternoon":           5,
		"QotMarketState_Closed":              6,
		"QotMarketState_PreMarketBegin":      8,
		"QotMarketState_PreMarketEnd":        9,
		"QotMarketState_AfterHoursBegin":     10,
		"QotMarketState_AfterHoursEnd":       11,
		"QotMarketState_StibAfterHoursWait":  27,
		"QotMarketState_StibAfterHoursBegin": 28,
		"QotMarketState_StibAfterHoursEnd":   29,
	}
)

func (x QotMarketState) Enum() *QotMarketState {
	p := new(QotMarketState)
	*p = x
	return p
}

func (x QotMarketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QotMarketState) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[6].Descriptor()
}

func (QotMarketState) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[6]
}

func (x QotMarketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QotMarketState.Descriptor instead.
func (QotMarketState) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{6}
}

type TickerDirection int32

const (
	TickerDirection_TickerDirection_Unknown TickerDirection = 0 //未知
	TickerDirection_TickerDirection_Bid     TickerDirection = 1 //外盘
	TickerDirection_TickerDirection_Ask     TickerDirection = 2 //内盘
	TickerDirection_TickerDirection_Neutral TickerDirection = 3 //中性盘
)

// Enum value maps for TickerDirection.
var (
	TickerDirection_name = map[int32]string{
		0: "TickerDirection_Unknown",
		1: "TickerDirection_Bid",
		2: "TickerDirection_Ask",
		3: "TickerDirection_Neutral",
	}
	TickerDirection_value = map[string]int32{
		"TickerDirection_Unknown": 0,
		"TickerDirection_Bid":     1,
		"TickerDirection_Ask":     2,
		"TickerDirection_Neutral": 3,
	}
)

func (x TickerDirection) Enum() *TickerDirection {
	p := new(TickerDirection)
	*p = x
	return p
}

func (x TickerDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TickerDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[7].Descriptor()
}

func (TickerDirection) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[7]
}

func (x TickerDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TickerDirection.Descriptor instead.
func (TickerDirection) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{7}
}

type TradingSessionSubID int32

const (
	TradingSessionSubID_TradingSessionSubID_DayClose                TradingSessionSubID = 0
	TradingSessionSubID_TradingSessionSubID_NotYetOpen              TradingSessionSubID = 100
	TradingSessionSubID_TradingSessionSubID_POSOrderInput           TradingSessionSubID = 1
	TradingSessionSubID_TradingSessionSubID_POSNoCancellation       TradingSessionSubID = 101
	TradingSessionSubID_TradingSessionSubID_POSRandomMatching       TradingSessionSubID = 108
	TradingSessionSubID_TradingSessionSubID_POSOrderMatching        TradingSessionSubID = 2
	TradingSessionSubID_TradingSessionSubID_Blocking                TradingSessionSubID = 7
	TradingSessionSubID_TradingSessionSubID_ContinuousTrading       TradingSessionSubID = 3
	TradingSessionSubID_TradingSessionSubID_CASReferencePriceFixing TradingSessionSubID = 105
	TradingSessionSubID_TradingSessionSubID_CASOrderInput           TradingSessionSubID = 5
	TradingSessionSubID_TradingSessionSubID_CASNoCancellation       TradingSessionSubID = 106
	TradingSessionSubID_TradingSessionSubID_CASRandomClose          TradingSessionSubID = 107
	TradingSessionSubID_TradingSessionSubID_CASOrderMatching        TradingSessionSubID = 4
	TradingSessionSubID_TradingSessionSubID_ExchangeIntervention    TradingSessionSubID = 102
	TradingSessionSubID_TradingSessionSubID_Close                   TradingSessionSubID = 103
	TradingSessionSubID_TradingSessionSubID_OrderCancel             TradingSessionSubID = 104
)

// Enum value maps for TradingSessionSubID.
var (
	TradingSessionSubID_name = map[int32]string{
		0:   "TradingSessionSubID_DayClose",
		100: "TradingSessionSubID_NotYetOpen",
		1:   "TradingSessionSubID_POSOrderInput",
		101: "TradingSessionSubID_POSNoCancellation",
		108: "TradingSessionSubID_POSRandomMatching",
		2:   "TradingSessionSubID_POSOrderMatching",
		7:   "TradingSessionSubID_Blocking",
		3:   "TradingSessionSubID_ContinuousTrading",
		105: "TradingSessionSubID_CASReferencePriceFixing",
		5:   "TradingSessionSubID_CASOrderInput",
		106: "TradingSessionSubID_CASNoCancellation",
		107: "TradingSessionSubID_CASRandomClose",
		4:   "TradingSessionSubID_CASOrderMatching",
		102: "TradingSessionSubID_ExchangeIntervention",
		103: "TradingSessionSubID_Close",
		104: "TradingSessionSubID_OrderCancel",
	}
	TradingSessionSubID_value = map[string]int32{
		"TradingSessionSubID_DayClose":                0,
		"TradingSessionSubID_NotYetOpen":              100,
		"TradingSessionSubID_POSOrderInput":           1,
		"TradingSessionSubID_POSNoCancellation":       101,
		"TradingSessionSubID_POSRandomMatching":       108,
		"TradingSessionSubID_POSOrderMatching":        2,
		"TradingSessionSubID_Blocking":                7,
		"TradingSessionSubID_ContinuousTrading":       3,
		"TradingSessionSubID_CASReferencePriceFixing": 105,
		"TradingSessionSubID_CASOrderInput":           5,
		"TradingSessionSubID_CASNoCancellation":       106,
		"TradingSessionSubID_CASRandomClose":          107,
		"TradingSessionSubID_CASOrderMatching":        4,
		"TradingSessionSubID_ExchangeIntervention":    102,
		"TradingSessionSubID_Close":                   103,
		"TradingSessionSubID_OrderCancel":             104,
	}
)

func (x TradingSessionSubID) Enum() *TradingSessionSubID {
	p := new(TradingSessionSubID)
	*p = x
	return p
}

func (x TradingSessionSubID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingSessionSubID) Descriptor() protoreflect.EnumDescriptor {
	return file_Basic_proto_enumTypes[8].Descriptor()
}

func (TradingSessionSubID) Type() protoreflect.EnumType {
	return &file_Basic_proto_enumTypes[8]
}

func (x TradingSessionSubID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingSessionSubID.Descriptor instead.
func (TradingSessionSubID) EnumDescriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{8}
}

//两个字段确定一支股票
type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market int32  `protobuf:"varint,1,opt,name=market,proto3" json:"market,omitempty"` //MarketID,股票市场
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`      //股票代码
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{0}
}

func (x *Security) GetMarket() int32 {
	if x != nil {
		return x.Market
	}
	return 0
}

func (x *Security) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Basic
//美股支持盘前盘后数据
//科创板仅支持盘后数据：成交量，成交额
type PreAfterMarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price       float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`                                // 盘前或盘后 - 价格
	HighPrice   float64 `protobuf:"fixed64,2,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`       // 盘前或盘后 - 最高价
	LowPrice    float64 `protobuf:"fixed64,3,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`          // 盘前或盘后 - 最低价
	Volume      int64   `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`                               // 盘前或盘后 - 成交量
	Turnover    float64 `protobuf:"fixed64,5,opt,name=turnover,proto3" json:"turnover,omitempty"`                          // 盘前或盘后 - 成交额
	ChangeValue float64 `protobuf:"fixed64,6,opt,name=change_value,json=changeValue,proto3" json:"change_value,omitempty"` // 盘前或盘后 - 涨跌额
	ChangeRate  float64 `protobuf:"fixed64,7,opt,name=change_rate,json=changeRate,proto3" json:"change_rate,omitempty"`    // 盘前或盘后 - 涨跌幅（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Amplitude   float64 `protobuf:"fixed64,8,opt,name=amplitude,proto3" json:"amplitude,omitempty"`                        // 盘前或盘后 - 振幅（该字段为百分比字段，默认不展示%，如20实际对应20%）
}

func (x *PreAfterMarketData) Reset() {
	*x = PreAfterMarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreAfterMarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreAfterMarketData) ProtoMessage() {}

func (x *PreAfterMarketData) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreAfterMarketData.ProtoReflect.Descriptor instead.
func (*PreAfterMarketData) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{1}
}

func (x *PreAfterMarketData) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PreAfterMarketData) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *PreAfterMarketData) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *PreAfterMarketData) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PreAfterMarketData) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *PreAfterMarketData) GetChangeValue() float64 {
	if x != nil {
		return x.ChangeValue
	}
	return 0
}

func (x *PreAfterMarketData) GetChangeRate() float64 {
	if x != nil {
		return x.ChangeRate
	}
	return 0
}

func (x *PreAfterMarketData) GetAmplitude() float64 {
	if x != nil {
		return x.Amplitude
	}
	return 0
}

type FutureBasicQotExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSettlePrice float64 `protobuf:"fixed64,1,opt,name=last_settle_price,json=lastSettlePrice,proto3" json:"last_settle_price,omitempty"`
	OpenInterest    int32   `protobuf:"varint,2,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`            //持仓量
	PreOpenInterest int32   `protobuf:"varint,3,opt,name=pre_open_interest,json=preOpenInterest,proto3" json:"pre_open_interest,omitempty"` //昨持仓
	UpperLimitPrice float64 `protobuf:"fixed64,4,opt,name=upper_limit_price,json=upperLimitPrice,proto3" json:"upper_limit_price,omitempty"`
	LowerLimitPrice float64 `protobuf:"fixed64,5,opt,name=lower_limit_price,json=lowerLimitPrice,proto3" json:"lower_limit_price,omitempty"`
	ClosePrice      float64 `protobuf:"fixed64,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"` ///今收盘
	PreDelta        float64 `protobuf:"fixed64,7,opt,name=pre_delta,json=preDelta,proto3" json:"pre_delta,omitempty"`       ///昨虚实度
	CurrDelta       float64 `protobuf:"fixed64,8,opt,name=curr_delta,json=currDelta,proto3" json:"curr_delta,omitempty"`    ///今虚实度
	PrevSettlePrice float64 `protobuf:"fixed64,9,opt,name=prev_settle_price,json=prevSettlePrice,proto3" json:"prev_settle_price,omitempty"`
}

func (x *FutureBasicQotExData) Reset() {
	*x = FutureBasicQotExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureBasicQotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureBasicQotExData) ProtoMessage() {}

func (x *FutureBasicQotExData) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureBasicQotExData.ProtoReflect.Descriptor instead.
func (*FutureBasicQotExData) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{2}
}

func (x *FutureBasicQotExData) GetLastSettlePrice() float64 {
	if x != nil {
		return x.LastSettlePrice
	}
	return 0
}

func (x *FutureBasicQotExData) GetOpenInterest() int32 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *FutureBasicQotExData) GetPreOpenInterest() int32 {
	if x != nil {
		return x.PreOpenInterest
	}
	return 0
}

func (x *FutureBasicQotExData) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *FutureBasicQotExData) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *FutureBasicQotExData) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *FutureBasicQotExData) GetPreDelta() float64 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

func (x *FutureBasicQotExData) GetCurrDelta() float64 {
	if x != nil {
		return x.CurrDelta
	}
	return 0
}

func (x *FutureBasicQotExData) GetPrevSettlePrice() float64 {
	if x != nil {
		return x.PrevSettlePrice
	}
	return 0
}

type BasicQot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security       *Security             `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`                                       //股票
	UpdateTime     uint64                `protobuf:"varint,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                //最新价的更新时间
	HighPrice      float64               `protobuf:"fixed64,3,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`                  //最高价
	OpenPrice      float64               `protobuf:"fixed64,4,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`                  //开盘价
	LowPrice       float64               `protobuf:"fixed64,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`                     //最低价
	CurPrice       float64               `protobuf:"fixed64,6,opt,name=cur_price,json=curPrice,proto3" json:"cur_price,omitempty"`                     //最新价
	PrevClosePrice float64               `protobuf:"fixed64,7,opt,name=prev_close_price,json=prevClosePrice,proto3" json:"prev_close_price,omitempty"` //昨收价
	Volume         int64                 `protobuf:"varint,8,opt,name=volume,proto3" json:"volume,omitempty"`                                          //成交量
	Turnover       float64               `protobuf:"fixed64,9,opt,name=turnover,proto3" json:"turnover,omitempty"`                                     //成交额
	TurnoverRate   float64               `protobuf:"fixed64,10,opt,name=turnover_rate,json=turnoverRate,proto3" json:"turnover_rate,omitempty"`        //换手率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	SecurityStatus int32                 `protobuf:"varint,11,opt,name=security_status,json=securityStatus,proto3" json:"security_status,omitempty"`   //SecurityStatus, 股票状态
	PreMarket      *PreAfterMarketData   `protobuf:"bytes,50,opt,name=pre_market,json=preMarket,proto3" json:"pre_market,omitempty"`                   //盘前数据
	AfterMarket    *PreAfterMarketData   `protobuf:"bytes,51,opt,name=after_market,json=afterMarket,proto3" json:"after_market,omitempty"`             //盘后数据
	FutureData     *FutureBasicQotExData `protobuf:"bytes,52,opt,name=future_data,json=futureData,proto3" json:"future_data,omitempty"`                //期货特有字段
}

func (x *BasicQot) Reset() {
	*x = BasicQot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicQot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicQot) ProtoMessage() {}

func (x *BasicQot) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicQot.ProtoReflect.Descriptor instead.
func (*BasicQot) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{3}
}

func (x *BasicQot) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *BasicQot) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *BasicQot) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *BasicQot) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *BasicQot) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *BasicQot) GetCurPrice() float64 {
	if x != nil {
		return x.CurPrice
	}
	return 0
}

func (x *BasicQot) GetPrevClosePrice() float64 {
	if x != nil {
		return x.PrevClosePrice
	}
	return 0
}

func (x *BasicQot) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *BasicQot) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *BasicQot) GetTurnoverRate() float64 {
	if x != nil {
		return x.TurnoverRate
	}
	return 0
}

func (x *BasicQot) GetSecurityStatus() int32 {
	if x != nil {
		return x.SecurityStatus
	}
	return 0
}

func (x *BasicQot) GetPreMarket() *PreAfterMarketData {
	if x != nil {
		return x.PreMarket
	}
	return nil
}

func (x *BasicQot) GetAfterMarket() *PreAfterMarketData {
	if x != nil {
		return x.AfterMarket
	}
	return nil
}

func (x *BasicQot) GetFutureData() *FutureBasicQotExData {
	if x != nil {
		return x.FutureData
	}
	return nil
}

type HKSecurityStaticBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VCMFlag       bool   `protobuf:"varint,2,opt,name=VCM_flag,json=VCMFlag,proto3" json:"VCM_flag,omitempty"`
	ShortsellFlag bool   `protobuf:"varint,3,opt,name=shortsell_flag,json=shortsellFlag,proto3" json:"shortsell_flag,omitempty"`
	CASFlag       bool   `protobuf:"varint,4,opt,name=CAS_flag,json=CASFlag,proto3" json:"CAS_flag,omitempty"`
	CCASSFlag     bool   `protobuf:"varint,5,opt,name=CCASS_flag,json=CCASSFlag,proto3" json:"CCASS_flag,omitempty"`
	StampDutyFlag bool   `protobuf:"varint,6,opt,name=stamp_duty_flag,json=stampDutyFlag,proto3" json:"stamp_duty_flag,omitempty"`
	POSFlag       bool   `protobuf:"varint,7,opt,name=POS_flag,json=POSFlag,proto3" json:"POS_flag,omitempty"`
	POSUpperLimit uint32 `protobuf:"varint,8,opt,name=POS_upper_limit,json=POSUpperLimit,proto3" json:"POS_upper_limit,omitempty"`
	POSLowerLimit uint32 `protobuf:"varint,9,opt,name=POS_lower_limit,json=POSLowerLimit,proto3" json:"POS_lower_limit,omitempty"`
}

func (x *HKSecurityStaticBasic) Reset() {
	*x = HKSecurityStaticBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HKSecurityStaticBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKSecurityStaticBasic) ProtoMessage() {}

func (x *HKSecurityStaticBasic) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKSecurityStaticBasic.ProtoReflect.Descriptor instead.
func (*HKSecurityStaticBasic) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{4}
}

func (x *HKSecurityStaticBasic) GetVCMFlag() bool {
	if x != nil {
		return x.VCMFlag
	}
	return false
}

func (x *HKSecurityStaticBasic) GetShortsellFlag() bool {
	if x != nil {
		return x.ShortsellFlag
	}
	return false
}

func (x *HKSecurityStaticBasic) GetCASFlag() bool {
	if x != nil {
		return x.CASFlag
	}
	return false
}

func (x *HKSecurityStaticBasic) GetCCASSFlag() bool {
	if x != nil {
		return x.CCASSFlag
	}
	return false
}

func (x *HKSecurityStaticBasic) GetStampDutyFlag() bool {
	if x != nil {
		return x.StampDutyFlag
	}
	return false
}

func (x *HKSecurityStaticBasic) GetPOSFlag() bool {
	if x != nil {
		return x.POSFlag
	}
	return false
}

func (x *HKSecurityStaticBasic) GetPOSUpperLimit() uint32 {
	if x != nil {
		return x.POSUpperLimit
	}
	return 0
}

func (x *HKSecurityStaticBasic) GetPOSLowerLimit() uint32 {
	if x != nil {
		return x.POSLowerLimit
	}
	return 0
}

// Static
type SecurityStaticBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security      *Security `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`                                  //股票
	Id            int64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                             //股票ID
	LotSize       int32     `protobuf:"varint,3,opt,name=lot_size,json=lotSize,proto3" json:"lot_size,omitempty"`                    //每手数量,期权以及期货类型表示合约乘数
	SecurityType  int32     `protobuf:"varint,4,opt,name=security_type,json=securityType,proto3" json:"security_type,omitempty"`     //Qot_Common.SecurityType,股票类型
	Name          string    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                          //股票名字
	ListTime      string    `protobuf:"bytes,6,opt,name=list_time,json=listTime,proto3" json:"list_time,omitempty"`                  //上市时间字符串
	Delisting     bool      `protobuf:"varint,7,opt,name=delisting,proto3" json:"delisting,omitempty"`                               //是否退市
	ListTimestamp float64   `protobuf:"fixed64,8,opt,name=list_timestamp,json=listTimestamp,proto3" json:"list_timestamp,omitempty"` //上市时间戳
}

func (x *SecurityStaticBasic) Reset() {
	*x = SecurityStaticBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityStaticBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityStaticBasic) ProtoMessage() {}

func (x *SecurityStaticBasic) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityStaticBasic.ProtoReflect.Descriptor instead.
func (*SecurityStaticBasic) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{5}
}

func (x *SecurityStaticBasic) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *SecurityStaticBasic) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecurityStaticBasic) GetLotSize() int32 {
	if x != nil {
		return x.LotSize
	}
	return 0
}

func (x *SecurityStaticBasic) GetSecurityType() int32 {
	if x != nil {
		return x.SecurityType
	}
	return 0
}

func (x *SecurityStaticBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityStaticBasic) GetListTime() string {
	if x != nil {
		return x.ListTime
	}
	return ""
}

func (x *SecurityStaticBasic) GetDelisting() bool {
	if x != nil {
		return x.Delisting
	}
	return false
}

func (x *SecurityStaticBasic) GetListTimestamp() float64 {
	if x != nil {
		return x.ListTimestamp
	}
	return 0
}

type FutureStaticExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTradeTime      string  `protobuf:"bytes,1,opt,name=last_trade_time,json=lastTradeTime,proto3" json:"last_trade_time,omitempty"`                  //最后交易日，只有非主连期货合约才有该字段
	LastTradeTimestamp float64 `protobuf:"fixed64,2,opt,name=last_trade_timestamp,json=lastTradeTimestamp,proto3" json:"last_trade_timestamp,omitempty"` //最后交易日时间戳，只有非主连期货合约才有该字段
	IsMainContract     bool    `protobuf:"varint,3,opt,name=is_main_contract,json=isMainContract,proto3" json:"is_main_contract,omitempty"`              //是否主连合约
}

func (x *FutureStaticExData) Reset() {
	*x = FutureStaticExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureStaticExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureStaticExData) ProtoMessage() {}

func (x *FutureStaticExData) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureStaticExData.ProtoReflect.Descriptor instead.
func (*FutureStaticExData) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{6}
}

func (x *FutureStaticExData) GetLastTradeTime() string {
	if x != nil {
		return x.LastTradeTime
	}
	return ""
}

func (x *FutureStaticExData) GetLastTradeTimestamp() float64 {
	if x != nil {
		return x.LastTradeTimestamp
	}
	return 0
}

func (x *FutureStaticExData) GetIsMainContract() bool {
	if x != nil {
		return x.IsMainContract
	}
	return false
}

type SecurityStaticInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Basic        *SecurityStaticBasic   `protobuf:"bytes,1,opt,name=basic,proto3" json:"basic,omitempty"`                                   //基本股票静态信息
	FutureExdata *FutureStaticExData    `protobuf:"bytes,2,opt,name=future_exdata,json=futureExdata,proto3" json:"future_exdata,omitempty"` //期货额外股票静态信息
	HkBasic      *HKSecurityStaticBasic `protobuf:"bytes,3,opt,name=hk_basic,json=hkBasic,proto3" json:"hk_basic,omitempty"`                //港股特殊字段
}

func (x *SecurityStaticInfo) Reset() {
	*x = SecurityStaticInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityStaticInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityStaticInfo) ProtoMessage() {}

func (x *SecurityStaticInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityStaticInfo.ProtoReflect.Descriptor instead.
func (*SecurityStaticInfo) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{7}
}

func (x *SecurityStaticInfo) GetBasic() *SecurityStaticBasic {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *SecurityStaticInfo) GetFutureExdata() *FutureStaticExData {
	if x != nil {
		return x.FutureExdata
	}
	return nil
}

func (x *SecurityStaticInfo) GetHkBasic() *HKSecurityStaticBasic {
	if x != nil {
		return x.HkBasic
	}
	return nil
}

type VCMTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security            *Security `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	CoolingoffStarttime uint64    `protobuf:"varint,2,opt,name=coolingoff_starttime,json=coolingoffStarttime,proto3" json:"coolingoff_starttime,omitempty"`
	CoolingoffEndtime   uint64    `protobuf:"varint,3,opt,name=coolingoff_endtime,json=coolingoffEndtime,proto3" json:"coolingoff_endtime,omitempty"`
	VcmPrice            uint32    `protobuf:"varint,4,opt,name=vcm_price,json=vcmPrice,proto3" json:"vcm_price,omitempty"`
	VcmLowerPrice       uint32    `protobuf:"varint,5,opt,name=vcm_lower_price,json=vcmLowerPrice,proto3" json:"vcm_lower_price,omitempty"`
	VcmUpperPrice       uint32    `protobuf:"varint,6,opt,name=vcm_upper_price,json=vcmUpperPrice,proto3" json:"vcm_upper_price,omitempty"`
}

func (x *VCMTrigger) Reset() {
	*x = VCMTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCMTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCMTrigger) ProtoMessage() {}

func (x *VCMTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCMTrigger.ProtoReflect.Descriptor instead.
func (*VCMTrigger) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{8}
}

func (x *VCMTrigger) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *VCMTrigger) GetCoolingoffStarttime() uint64 {
	if x != nil {
		return x.CoolingoffStarttime
	}
	return 0
}

func (x *VCMTrigger) GetCoolingoffEndtime() uint64 {
	if x != nil {
		return x.CoolingoffEndtime
	}
	return 0
}

func (x *VCMTrigger) GetVcmPrice() uint32 {
	if x != nil {
		return x.VcmPrice
	}
	return 0
}

func (x *VCMTrigger) GetVcmLowerPrice() uint32 {
	if x != nil {
		return x.VcmLowerPrice
	}
	return 0
}

func (x *VCMTrigger) GetVcmUpperPrice() uint32 {
	if x != nil {
		return x.VcmUpperPrice
	}
	return 0
}

type RefPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security   *Security `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	RefPrice   uint32    `protobuf:"varint,2,opt,name=ref_price,json=refPrice,proto3" json:"ref_price,omitempty"`
	LowerPrice uint32    `protobuf:"varint,3,opt,name=lower_price,json=lowerPrice,proto3" json:"lower_price,omitempty"`
	UpperPrice uint32    `protobuf:"varint,4,opt,name=upper_price,json=upperPrice,proto3" json:"upper_price,omitempty"`
}

func (x *RefPrice) Reset() {
	*x = RefPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefPrice) ProtoMessage() {}

func (x *RefPrice) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefPrice.ProtoReflect.Descriptor instead.
func (*RefPrice) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{9}
}

func (x *RefPrice) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *RefPrice) GetRefPrice() uint32 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *RefPrice) GetLowerPrice() uint32 {
	if x != nil {
		return x.LowerPrice
	}
	return 0
}

func (x *RefPrice) GetUpperPrice() uint32 {
	if x != nil {
		return x.UpperPrice
	}
	return 0
}

type TradingSessionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market               string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Marketcode           uint32 `protobuf:"varint,2,opt,name=marketcode,proto3" json:"marketcode,omitempty"`                                                   // MDS.Enums.HK.MarketCode
	TradingSessionSubid  uint32 `protobuf:"varint,3,opt,name=trading_session_subid,json=tradingSessionSubid,proto3" json:"trading_session_subid,omitempty"`    // MDS.Enums.HK.TradingSessionSubID
	TradingSessionStatus uint32 `protobuf:"varint,4,opt,name=trading_session_status,json=tradingSessionStatus,proto3" json:"trading_session_status,omitempty"` // MDS.Enums.HK.TradingSessionStatus
	StartDatetime        uint64 `protobuf:"varint,5,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	EndDatetime          uint64 `protobuf:"varint,6,opt,name=end_datetime,json=endDatetime,proto3" json:"end_datetime,omitempty"`
}

func (x *TradingSessionStatus) Reset() {
	*x = TradingSessionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSessionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSessionStatus) ProtoMessage() {}

func (x *TradingSessionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSessionStatus.ProtoReflect.Descriptor instead.
func (*TradingSessionStatus) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{10}
}

func (x *TradingSessionStatus) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *TradingSessionStatus) GetMarketcode() uint32 {
	if x != nil {
		return x.Marketcode
	}
	return 0
}

func (x *TradingSessionStatus) GetTradingSessionSubid() uint32 {
	if x != nil {
		return x.TradingSessionSubid
	}
	return 0
}

func (x *TradingSessionStatus) GetTradingSessionStatus() uint32 {
	if x != nil {
		return x.TradingSessionStatus
	}
	return 0
}

func (x *TradingSessionStatus) GetStartDatetime() uint64 {
	if x != nil {
		return x.StartDatetime
	}
	return 0
}

func (x *TradingSessionStatus) GetEndDatetime() uint64 {
	if x != nil {
		return x.EndDatetime
	}
	return 0
}

type Ticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      string  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                          //时间字符串
	Sequence  int64   `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`                 // 唯一标识
	Dir       int32   `protobuf:"varint,3,opt,name=dir,proto3" json:"dir,omitempty"`                           //TickerDirection, 买卖方向
	Price     float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                      //价格
	Volume    int64   `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`                     //成交量
	Turnover  float64 `protobuf:"fixed64,6,opt,name=turnover,proto3" json:"turnover,omitempty"`                //成交额
	RecvTime  float64 `protobuf:"fixed64,7,opt,name=recvTime,proto3" json:"recvTime,omitempty"`                //收到推送数据的本地时间戳，用于定位延迟
	Type      int32   `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                         //TickerType, 逐笔类型
	TypeSign  int32   `protobuf:"varint,9,opt,name=type_sign,json=typeSign,proto3" json:"type_sign,omitempty"` //逐笔类型符号
	Timestamp float64 `protobuf:"fixed64,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`             //时间戳
}

func (x *Ticker) Reset() {
	*x = Ticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticker) ProtoMessage() {}

func (x *Ticker) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticker.ProtoReflect.Descriptor instead.
func (*Ticker) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{11}
}

func (x *Ticker) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Ticker) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Ticker) GetDir() int32 {
	if x != nil {
		return x.Dir
	}
	return 0
}

func (x *Ticker) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Ticker) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Ticker) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *Ticker) GetRecvTime() float64 {
	if x != nil {
		return x.RecvTime
	}
	return 0
}

func (x *Ticker) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Ticker) GetTypeSign() int32 {
	if x != nil {
		return x.TypeSign
	}
	return 0
}

func (x *Ticker) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Broker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    //经纪ID
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` //经纪名称
	Pos  int32  `protobuf:"varint,3,opt,name=pos,proto3" json:"pos,omitempty"`  //经纪档位
}

func (x *Broker) Reset() {
	*x = Broker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Broker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broker) ProtoMessage() {}

func (x *Broker) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broker.ProtoReflect.Descriptor instead.
func (*Broker) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{12}
}

func (x *Broker) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Broker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Broker) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

type Brokerlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security      *Security `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`                                  //股票
	BrokerAskList []*Broker `protobuf:"bytes,2,rep,name=broker_ask_list,json=brokerAskList,proto3" json:"broker_ask_list,omitempty"` //经纪Ask(卖)盘
	BrokerBidList []*Broker `protobuf:"bytes,3,rep,name=broker_bid_list,json=brokerBidList,proto3" json:"broker_bid_list,omitempty"` //经纪Bid(买)盘
}

func (x *Brokerlist) Reset() {
	*x = Brokerlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brokerlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brokerlist) ProtoMessage() {}

func (x *Brokerlist) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brokerlist.ProtoReflect.Descriptor instead.
func (*Brokerlist) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{13}
}

func (x *Brokerlist) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Brokerlist) GetBrokerAskList() []*Broker {
	if x != nil {
		return x.BrokerAskList
	}
	return nil
}

func (x *Brokerlist) GetBrokerBidList() []*Broker {
	if x != nil {
		return x.BrokerBidList
	}
	return nil
}

type OrderBookDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AskPrice      float64 `protobuf:"fixed64,1,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume     int64   `protobuf:"varint,2,opt,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	AskOrderCount int32   `protobuf:"varint,3,opt,name=ask_order_count,json=askOrderCount,proto3" json:"ask_order_count,omitempty"`
	BidPrice      float64 `protobuf:"fixed64,4,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume     int64   `protobuf:"varint,5,opt,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	BidOrderCount int32   `protobuf:"varint,6,opt,name=bid_order_count,json=bidOrderCount,proto3" json:"bid_order_count,omitempty"`
}

func (x *OrderBookDetail) Reset() {
	*x = OrderBookDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookDetail) ProtoMessage() {}

func (x *OrderBookDetail) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookDetail.ProtoReflect.Descriptor instead.
func (*OrderBookDetail) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{14}
}

func (x *OrderBookDetail) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *OrderBookDetail) GetAskVolume() int64 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *OrderBookDetail) GetAskOrderCount() int32 {
	if x != nil {
		return x.AskOrderCount
	}
	return 0
}

func (x *OrderBookDetail) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *OrderBookDetail) GetBidVolume() int64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *OrderBookDetail) GetBidOrderCount() int32 {
	if x != nil {
		return x.BidOrderCount
	}
	return 0
}

type OrderBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security        *Security          `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`                                         //股票
	OrderLevelCount int32              `protobuf:"varint,2,opt,name=order_level_count,json=orderLevelCount,proto3" json:"order_level_count,omitempty"` //总的挡位
	UpdateTime      uint64             `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                  //最新价的更新时间
	DetailList      []*OrderBookDetail `protobuf:"bytes,4,rep,name=detail_list,json=detailList,proto3" json:"detail_list,omitempty"`
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{15}
}

func (x *OrderBook) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *OrderBook) GetOrderLevelCount() int32 {
	if x != nil {
		return x.OrderLevelCount
	}
	return 0
}

func (x *OrderBook) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *OrderBook) GetDetailList() []*OrderBookDetail {
	if x != nil {
		return x.DetailList
	}
	return nil
}

type PlateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plate     *Security `protobuf:"bytes,1,opt,name=plate,proto3" json:"plate,omitempty"`                           //板块
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             //板块名字
	PlateType int32     `protobuf:"varint,3,opt,name=plate_type,json=plateType,proto3" json:"plate_type,omitempty"` //PlateSetType 板块类型
}

func (x *PlateInfo) Reset() {
	*x = PlateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlateInfo) ProtoMessage() {}

func (x *PlateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlateInfo.ProtoReflect.Descriptor instead.
func (*PlateInfo) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{16}
}

func (x *PlateInfo) GetPlate() *Security {
	if x != nil {
		return x.Plate
	}
	return nil
}

func (x *PlateInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlateInfo) GetPlateType() int32 {
	if x != nil {
		return x.PlateType
	}
	return 0
}

type Rehab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            string  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                              //时间字符串
	CompanyActFlag  int64   `protobuf:"varint,2,opt,name=company_act_flag,json=companyActFlag,proto3" json:"company_act_flag,omitempty"` //公司行动(CompanyAct)组合标志位
	FwdFactor_A     float64 `protobuf:"fixed64,3,opt,name=fwd_factor_A,json=fwdFactorA,proto3" json:"fwd_factor_A,omitempty"`            //前复权因子A
	FwdFactor_B     float64 `protobuf:"fixed64,4,opt,name=fwd_factor_B,json=fwdFactorB,proto3" json:"fwd_factor_B,omitempty"`            //前复权因子B
	BwdFactor_A     float64 `protobuf:"fixed64,5,opt,name=bwd_factor_A,json=bwdFactorA,proto3" json:"bwd_factor_A,omitempty"`            //后复权因子A
	BwdFactor_B     float64 `protobuf:"fixed64,6,opt,name=bwd_factor_B,json=bwdFactorB,proto3" json:"bwd_factor_B,omitempty"`            //后复权因子B
	SplitBase       int32   `protobuf:"varint,7,opt,name=split_base,json=splitBase,proto3" json:"split_base,omitempty"`                  //拆股(例如，1拆5)
	Split           int32   `protobuf:"varint,8,opt,name=split,proto3" json:"split,omitempty"`
	JoinBase        int32   `protobuf:"varint,9,opt,name=join_base,json=joinBase,proto3" json:"join_base,omitempty"` //合股(例如，50合1)
	Join            int32   `protobuf:"varint,10,opt,name=join,proto3" json:"join,omitempty"`
	BonusBase       int32   `protobuf:"varint,11,opt,name=bonus_base,json=bonusBase,proto3" json:"bonus_base,omitempty"` //送股(例如，10送3)
	Bonus           int32   `protobuf:"varint,12,opt,name=bonus,proto3" json:"bonus,omitempty"`
	TransferBase    int32   `protobuf:"varint,13,opt,name=transfer_base,json=transferBase,proto3" json:"transfer_base,omitempty"` //转赠股(例如，10转3)
	Transfer        int32   `protobuf:"varint,14,opt,name=transfer,proto3" json:"transfer,omitempty"`
	AllotBase       int32   `protobuf:"varint,15,opt,name=allot_base,json=allotBase,proto3" json:"allot_base,omitempty"` //配股(例如，10送2, 配股价为6.3元)
	Allot           int32   `protobuf:"varint,16,opt,name=allot,proto3" json:"allot,omitempty"`
	AllotPrice      float64 `protobuf:"fixed64,17,opt,name=allot_price,json=allotPrice,proto3" json:"allot_price,omitempty"`
	AddBase         int32   `protobuf:"varint,18,opt,name=add_base,json=addBase,proto3" json:"add_base,omitempty"` //增发股(例如，10送2, 增发股价为6.3元)
	Add             int32   `protobuf:"varint,19,opt,name=add,proto3" json:"add,omitempty"`
	AddPrice        float64 `protobuf:"fixed64,20,opt,name=add_price,json=addPrice,proto3" json:"add_price,omitempty"`
	Dividend        float64 `protobuf:"fixed64,21,opt,name=dividend,proto3" json:"dividend,omitempty"`                                      //现金分红(例如，每10股派现0.5元,则该字段值为0.05)
	SpecialDividend float64 `protobuf:"fixed64,22,opt,name=special_dividend,json=specialDividend,proto3" json:"special_dividend,omitempty"` //特别股息(例如，每10股派特别股息0.5元,则该字段值为0.05)
	Timestamp       float64 `protobuf:"fixed64,23,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                    //时间戳
}

func (x *Rehab) Reset() {
	*x = Rehab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rehab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rehab) ProtoMessage() {}

func (x *Rehab) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rehab.ProtoReflect.Descriptor instead.
func (*Rehab) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{17}
}

func (x *Rehab) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Rehab) GetCompanyActFlag() int64 {
	if x != nil {
		return x.CompanyActFlag
	}
	return 0
}

func (x *Rehab) GetFwdFactor_A() float64 {
	if x != nil {
		return x.FwdFactor_A
	}
	return 0
}

func (x *Rehab) GetFwdFactor_B() float64 {
	if x != nil {
		return x.FwdFactor_B
	}
	return 0
}

func (x *Rehab) GetBwdFactor_A() float64 {
	if x != nil {
		return x.BwdFactor_A
	}
	return 0
}

func (x *Rehab) GetBwdFactor_B() float64 {
	if x != nil {
		return x.BwdFactor_B
	}
	return 0
}

func (x *Rehab) GetSplitBase() int32 {
	if x != nil {
		return x.SplitBase
	}
	return 0
}

func (x *Rehab) GetSplit() int32 {
	if x != nil {
		return x.Split
	}
	return 0
}

func (x *Rehab) GetJoinBase() int32 {
	if x != nil {
		return x.JoinBase
	}
	return 0
}

func (x *Rehab) GetJoin() int32 {
	if x != nil {
		return x.Join
	}
	return 0
}

func (x *Rehab) GetBonusBase() int32 {
	if x != nil {
		return x.BonusBase
	}
	return 0
}

func (x *Rehab) GetBonus() int32 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

func (x *Rehab) GetTransferBase() int32 {
	if x != nil {
		return x.TransferBase
	}
	return 0
}

func (x *Rehab) GetTransfer() int32 {
	if x != nil {
		return x.Transfer
	}
	return 0
}

func (x *Rehab) GetAllotBase() int32 {
	if x != nil {
		return x.AllotBase
	}
	return 0
}

func (x *Rehab) GetAllot() int32 {
	if x != nil {
		return x.Allot
	}
	return 0
}

func (x *Rehab) GetAllotPrice() float64 {
	if x != nil {
		return x.AllotPrice
	}
	return 0
}

func (x *Rehab) GetAddBase() int32 {
	if x != nil {
		return x.AddBase
	}
	return 0
}

func (x *Rehab) GetAdd() int32 {
	if x != nil {
		return x.Add
	}
	return 0
}

func (x *Rehab) GetAddPrice() float64 {
	if x != nil {
		return x.AddPrice
	}
	return 0
}

func (x *Rehab) GetDividend() float64 {
	if x != nil {
		return x.Dividend
	}
	return 0
}

func (x *Rehab) GetSpecialDividend() float64 {
	if x != nil {
		return x.SpecialDividend
	}
	return 0
}

func (x *Rehab) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type CapitalFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CapitalInBig    float64 `protobuf:"fixed64,1,opt,name=capital_in_big,json=capitalInBig,proto3" json:"capital_in_big,omitempty"`          //流入资金额度，大单
	CapitalInMid    float64 `protobuf:"fixed64,2,opt,name=capital_in_mid,json=capitalInMid,proto3" json:"capital_in_mid,omitempty"`          //流入资金额度，中单
	CapitalInSmall  float64 `protobuf:"fixed64,3,opt,name=capital_in_small,json=capitalInSmall,proto3" json:"capital_in_small,omitempty"`    //流入资金额度，小单
	CapitalOutBig   float64 `protobuf:"fixed64,4,opt,name=capital_out_big,json=capitalOutBig,proto3" json:"capital_out_big,omitempty"`       //流出资金额度，大单
	CapitalOutMid   float64 `protobuf:"fixed64,5,opt,name=capital_out_mid,json=capitalOutMid,proto3" json:"capital_out_mid,omitempty"`       //流出资金额度，中单
	CapitalOutSmall float64 `protobuf:"fixed64,6,opt,name=capital_out_small,json=capitalOutSmall,proto3" json:"capital_out_small,omitempty"` //流出资金额度，小单
	UpdateTime      string  `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                    //更新时间字符串
	UpdateTimestamp float64 `protobuf:"fixed64,8,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`   //更新时间戳
}

func (x *CapitalFlow) Reset() {
	*x = CapitalFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapitalFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapitalFlow) ProtoMessage() {}

func (x *CapitalFlow) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapitalFlow.ProtoReflect.Descriptor instead.
func (*CapitalFlow) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{18}
}

func (x *CapitalFlow) GetCapitalInBig() float64 {
	if x != nil {
		return x.CapitalInBig
	}
	return 0
}

func (x *CapitalFlow) GetCapitalInMid() float64 {
	if x != nil {
		return x.CapitalInMid
	}
	return 0
}

func (x *CapitalFlow) GetCapitalInSmall() float64 {
	if x != nil {
		return x.CapitalInSmall
	}
	return 0
}

func (x *CapitalFlow) GetCapitalOutBig() float64 {
	if x != nil {
		return x.CapitalOutBig
	}
	return 0
}

func (x *CapitalFlow) GetCapitalOutMid() float64 {
	if x != nil {
		return x.CapitalOutMid
	}
	return 0
}

func (x *CapitalFlow) GetCapitalOutSmall() float64 {
	if x != nil {
		return x.CapitalOutSmall
	}
	return 0
}

func (x *CapitalFlow) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CapitalFlow) GetUpdateTimestamp() float64 {
	if x != nil {
		return x.UpdateTimestamp
	}
	return 0
}

type KLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           string  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                               //时间戳字符串
	IsBlank        bool    `protobuf:"varint,2,opt,name=is_blank,json=isBlank,proto3" json:"is_blank,omitempty"`                         //是否是空内容的点,若为ture则只有时间信息
	HighPrice      float64 `protobuf:"fixed64,3,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`                  //最高价
	OpenPrice      float64 `protobuf:"fixed64,4,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`                  //开盘价
	LowPrice       float64 `protobuf:"fixed64,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`                     //最低价
	ClosePrice     float64 `protobuf:"fixed64,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`               //收盘价
	LastClosePrice float64 `protobuf:"fixed64,7,opt,name=last_close_price,json=lastClosePrice,proto3" json:"last_close_price,omitempty"` //昨收价
	Volume         int64   `protobuf:"varint,8,opt,name=volume,proto3" json:"volume,omitempty"`                                          //成交量
	Turnover       float64 `protobuf:"fixed64,9,opt,name=turnover,proto3" json:"turnover,omitempty"`                                     //成交额
	TurnoverRate   float64 `protobuf:"fixed64,10,opt,name=turnover_rate,json=turnoverRate,proto3" json:"turnover_rate,omitempty"`        //换手率（该字段为百分比字段，展示为小数表示）
	Pe             float64 `protobuf:"fixed64,11,opt,name=pe,proto3" json:"pe,omitempty"`                                                //市盈率
	ChangeRate     float64 `protobuf:"fixed64,12,opt,name=change_rate,json=changeRate,proto3" json:"change_rate,omitempty"`              //涨跌幅（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Timestamp      float64 `protobuf:"fixed64,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                  //时间戳
}

func (x *KLine) Reset() {
	*x = KLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KLine) ProtoMessage() {}

func (x *KLine) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KLine.ProtoReflect.Descriptor instead.
func (*KLine) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{19}
}

func (x *KLine) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *KLine) GetIsBlank() bool {
	if x != nil {
		return x.IsBlank
	}
	return false
}

func (x *KLine) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *KLine) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *KLine) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *KLine) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *KLine) GetLastClosePrice() float64 {
	if x != nil {
		return x.LastClosePrice
	}
	return 0
}

func (x *KLine) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *KLine) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *KLine) GetTurnoverRate() float64 {
	if x != nil {
		return x.TurnoverRate
	}
	return 0
}

func (x *KLine) GetPe() float64 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *KLine) GetChangeRate() float64 {
	if x != nil {
		return x.ChangeRate
	}
	return 0
}

func (x *KLine) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TimeShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           string  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                               //时间字符串
	IsBlank        bool    `protobuf:"varint,2,opt,name=is_blank,json=isBlank,proto3" json:"is_blank,omitempty"`                         //是否是空内容的点,若为ture则只有时间信息
	Price          float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`                                           //当前价
	LastClosePrice float64 `protobuf:"fixed64,4,opt,name=last_close_price,json=lastClosePrice,proto3" json:"last_close_price,omitempty"` //昨收价
	AvgPrice       float64 `protobuf:"fixed64,5,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`                     //均价
	Volume         int64   `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`                                          //成交量
	Turnover       float64 `protobuf:"fixed64,7,opt,name=turnover,proto3" json:"turnover,omitempty"`                                     //成交额
	Timestamp      float64 `protobuf:"fixed64,98,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                  //时间戳
}

func (x *TimeShare) Reset() {
	*x = TimeShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Basic_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeShare) ProtoMessage() {}

func (x *TimeShare) ProtoReflect() protoreflect.Message {
	mi := &file_Basic_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeShare.ProtoReflect.Descriptor instead.
func (*TimeShare) Descriptor() ([]byte, []int) {
	return file_Basic_proto_rawDescGZIP(), []int{20}
}

func (x *TimeShare) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *TimeShare) GetIsBlank() bool {
	if x != nil {
		return x.IsBlank
	}
	return false
}

func (x *TimeShare) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TimeShare) GetLastClosePrice() float64 {
	if x != nil {
		return x.LastClosePrice
	}
	return 0
}

func (x *TimeShare) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *TimeShare) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TimeShare) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *TimeShare) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_Basic_proto protoreflect.FileDescriptor

var file_Basic_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x4d,
	0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x22, 0x36, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xfc, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0xf4, 0x02, 0x0a, 0x14, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x51,
	0x6f, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc2, 0x04, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x51, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x51, 0x6f, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x02, 0x0a, 0x15,
	0x48, 0x4b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x56, 0x43, 0x4d, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56, 0x43, 0x4d, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73,
	0x65, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x43, 0x41, 0x53, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x41, 0x53, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x43, 0x41, 0x53, 0x53, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x43, 0x41, 0x53, 0x53, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x44, 0x75, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x50, 0x4f, 0x53,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x4f, 0x53,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x50, 0x4f, 0x53, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x50,
	0x4f, 0x53, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x50, 0x4f, 0x53, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x50, 0x4f, 0x53, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x08,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xcb,
	0x01, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x45, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x08, 0x68, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x48, 0x4b,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x07, 0x68, 0x6b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x22, 0x8c, 0x02, 0x0a,
	0x0a, 0x56, 0x43, 0x4d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x14,
	0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6f, 0x6c,
	0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x5f, 0x65, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x45, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x63, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x76, 0x63, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76,
	0x63, 0x6d, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x63, 0x6d, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x63, 0x6d, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x63,
	0x6d, 0x55, 0x70, 0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x44, 0x53,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xff, 0x01,
	0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x3e, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22,
	0xb3, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x0d, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x41, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69,
	0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x64,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc6, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x2f, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x09, 0x50, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x44, 0x53, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xae, 0x05, 0x0a, 0x05, 0x52, 0x65, 0x68, 0x61, 0x62, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x61,
	0x63, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a,
	0x0c, 0x66, 0x77, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x41, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x77, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x12,
	0x20, 0x0a, 0x0c, 0x66, 0x77, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x42, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x77, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x77, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x41, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x77, 0x64, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x77, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x42, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x77, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x61, 0x64, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcb, 0x02, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x42, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x4d,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x42, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x4d, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x84, 0x03, 0x0a, 0x05, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe9, 0x01, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x62, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x92, 0x02, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x51,
	0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x48, 0x4b, 0x5f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x55, 0x53, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10,
	0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x43,
	0x4e, 0x53, 0x48, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x15, 0x12, 0x1b,
	0x0a, 0x17, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x43, 0x4e, 0x53, 0x5a,
	0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x51,
	0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x5f, 0x43,
	0x5a, 0x43, 0x45, 0x10, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x5f, 0x49, 0x4e, 0x45, 0x10, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x43, 0x48, 0x49, 0x4e,
	0x41, 0x5f, 0x44, 0x43, 0x45, 0x10, 0x66, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x6f, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x5f, 0x53, 0x48, 0x46, 0x45, 0x10,
	0x67, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x43,
	0x48, 0x49, 0x4e, 0x41, 0x5f, 0x43, 0x46, 0x46, 0x45, 0x58, 0x10, 0x68, 0x2a, 0x65, 0x0a, 0x0a,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x10, 0x03, 0x2a, 0xea, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x6f, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x71, 0x74, 0x79, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x08,
	0x2a, 0xda, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x63, 0x74, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x5f, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x41, 0x63, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x08, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x5f, 0x41, 0x6c, 0x6c,
	0x6f, 0x74, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x63, 0x74, 0x5f, 0x41, 0x64, 0x64, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x5f, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x10,
	0x40, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x5f,
	0x53, 0x50, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x10, 0x80, 0x01, 0x2a, 0x4e, 0x0a,
	0x09, 0x52, 0x65, 0x68, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65,
	0x68, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x65, 0x68, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x68, 0x61, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x10, 0x02, 0x2a, 0x94, 0x06,
	0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67,
	0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x61, 0x6b, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x44, 0x72, 0x61, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x44, 0x72, 0x61, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x10, 0x07, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x54, 0x6f, 0x42, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x10, 0x0b, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x6e, 0x64, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x10, 0x11, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x13, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x14,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x15, 0x2a, 0xd2, 0x03, 0x0a, 0x0e, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x6f, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d,
	0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x6f, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x74, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x6f, 0x6e, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x51, 0x6f,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x72, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x08, 0x12, 0x1f, 0x0a,
	0x1b, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x50, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x10, 0x09, 0x12, 0x22,
	0x0a, 0x1e, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x45,
	0x6e, 0x64, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x74, 0x69, 0x62, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x57, 0x61, 0x69, 0x74, 0x10, 0x1b, 0x12, 0x26, 0x0a, 0x22, 0x51,
	0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x74,
	0x69, 0x62, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x10, 0x1c, 0x12, 0x24, 0x0a, 0x20, 0x51, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x74, 0x69, 0x62, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e, 0x64, 0x10, 0x1d, 0x2a, 0x7d, 0x0a, 0x0f, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x69, 0x64,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x73, 0x6b, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x10, 0x03, 0x2a, 0x96, 0x05, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x44, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x4e, 0x6f, 0x74, 0x59, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x10, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x50, 0x4f,
	0x53, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x01, 0x12, 0x29, 0x0a,
	0x25, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x4e, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f,
	0x50, 0x4f, 0x53, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x10, 0x6c, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x49, 0x44, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12,
	0x29, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49,
	0x44, 0x5f, 0x43, 0x41, 0x53, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x10, 0x69, 0x12, 0x25, 0x0a, 0x21, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x49, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x4e, 0x6f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6a, 0x12, 0x26, 0x0a,
	0x22, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x10, 0x6b, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x53,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12,
	0x2c, 0x0a, 0x28, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x66, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x67, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x49, 0x44, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10,
	0x68, 0x42, 0x15, 0x5a, 0x13, 0x66, 0x69, 0x6e, 0x74, 0x65, 0x63, 0x68, 0x34, 0x67, 0x6f, 0x2e,
	0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Basic_proto_rawDescOnce sync.Once
	file_Basic_proto_rawDescData = file_Basic_proto_rawDesc
)

func file_Basic_proto_rawDescGZIP() []byte {
	file_Basic_proto_rawDescOnce.Do(func() {
		file_Basic_proto_rawDescData = protoimpl.X.CompressGZIP(file_Basic_proto_rawDescData)
	})
	return file_Basic_proto_rawDescData
}

var file_Basic_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_Basic_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_Basic_proto_goTypes = []interface{}{
	(MarketID)(0),                 // 0: MDS.Basic.MarketID
	(AssetClass)(0),               // 1: MDS.Basic.AssetClass
	(SecurityType)(0),             // 2: MDS.Basic.SecurityType
	(CompanyAct)(0),               // 3: MDS.Basic.CompanyAct
	(RehabType)(0),                // 4: MDS.Basic.RehabType
	(SecurityStatus)(0),           // 5: MDS.Basic.SecurityStatus
	(QotMarketState)(0),           // 6: MDS.Basic.QotMarketState
	(TickerDirection)(0),          // 7: MDS.Basic.TickerDirection
	(TradingSessionSubID)(0),      // 8: MDS.Basic.TradingSessionSubID
	(*Security)(nil),              // 9: MDS.Basic.Security
	(*PreAfterMarketData)(nil),    // 10: MDS.Basic.PreAfterMarketData
	(*FutureBasicQotExData)(nil),  // 11: MDS.Basic.FutureBasicQotExData
	(*BasicQot)(nil),              // 12: MDS.Basic.BasicQot
	(*HKSecurityStaticBasic)(nil), // 13: MDS.Basic.HKSecurityStaticBasic
	(*SecurityStaticBasic)(nil),   // 14: MDS.Basic.SecurityStaticBasic
	(*FutureStaticExData)(nil),    // 15: MDS.Basic.FutureStaticExData
	(*SecurityStaticInfo)(nil),    // 16: MDS.Basic.SecurityStaticInfo
	(*VCMTrigger)(nil),            // 17: MDS.Basic.VCMTrigger
	(*RefPrice)(nil),              // 18: MDS.Basic.RefPrice
	(*TradingSessionStatus)(nil),  // 19: MDS.Basic.TradingSessionStatus
	(*Ticker)(nil),                // 20: MDS.Basic.Ticker
	(*Broker)(nil),                // 21: MDS.Basic.Broker
	(*Brokerlist)(nil),            // 22: MDS.Basic.Brokerlist
	(*OrderBookDetail)(nil),       // 23: MDS.Basic.OrderBookDetail
	(*OrderBook)(nil),             // 24: MDS.Basic.OrderBook
	(*PlateInfo)(nil),             // 25: MDS.Basic.PlateInfo
	(*Rehab)(nil),                 // 26: MDS.Basic.Rehab
	(*CapitalFlow)(nil),           // 27: MDS.Basic.CapitalFlow
	(*KLine)(nil),                 // 28: MDS.Basic.KLine
	(*TimeShare)(nil),             // 29: MDS.Basic.TimeShare
}
var file_Basic_proto_depIdxs = []int32{
	9,  // 0: MDS.Basic.BasicQot.security:type_name -> MDS.Basic.Security
	10, // 1: MDS.Basic.BasicQot.pre_market:type_name -> MDS.Basic.PreAfterMarketData
	10, // 2: MDS.Basic.BasicQot.after_market:type_name -> MDS.Basic.PreAfterMarketData
	11, // 3: MDS.Basic.BasicQot.future_data:type_name -> MDS.Basic.FutureBasicQotExData
	9,  // 4: MDS.Basic.SecurityStaticBasic.security:type_name -> MDS.Basic.Security
	14, // 5: MDS.Basic.SecurityStaticInfo.basic:type_name -> MDS.Basic.SecurityStaticBasic
	15, // 6: MDS.Basic.SecurityStaticInfo.future_exdata:type_name -> MDS.Basic.FutureStaticExData
	13, // 7: MDS.Basic.SecurityStaticInfo.hk_basic:type_name -> MDS.Basic.HKSecurityStaticBasic
	9,  // 8: MDS.Basic.VCMTrigger.security:type_name -> MDS.Basic.Security
	9,  // 9: MDS.Basic.RefPrice.security:type_name -> MDS.Basic.Security
	9,  // 10: MDS.Basic.Brokerlist.security:type_name -> MDS.Basic.Security
	21, // 11: MDS.Basic.Brokerlist.broker_ask_list:type_name -> MDS.Basic.Broker
	21, // 12: MDS.Basic.Brokerlist.broker_bid_list:type_name -> MDS.Basic.Broker
	9,  // 13: MDS.Basic.OrderBook.security:type_name -> MDS.Basic.Security
	23, // 14: MDS.Basic.OrderBook.detail_list:type_name -> MDS.Basic.OrderBookDetail
	9,  // 15: MDS.Basic.PlateInfo.plate:type_name -> MDS.Basic.Security
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_Basic_proto_init() }
func file_Basic_proto_init() {
	if File_Basic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Basic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreAfterMarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureBasicQotExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicQot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HKSecurityStaticBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityStaticBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureStaticExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityStaticInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCMTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSessionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Broker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brokerlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rehab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapitalFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Basic_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Basic_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Basic_proto_goTypes,
		DependencyIndexes: file_Basic_proto_depIdxs,
		EnumInfos:         file_Basic_proto_enumTypes,
		MessageInfos:      file_Basic_proto_msgTypes,
	}.Build()
	File_Basic_proto = out.File
	file_Basic_proto_rawDesc = nil
	file_Basic_proto_goTypes = nil
	file_Basic_proto_depIdxs = nil
}
